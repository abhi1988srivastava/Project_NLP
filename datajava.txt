A Ball Moving round the window

:/*             <applet code="screencircle2" width=300 height=300>
              </applet>                       */
import java.applet.*;
import java.awt.*;
public class screencircle2 extends Applet implements Runnable
{
       Thread t;
       int i,j,k,l,flag=0,m,x1,y1,x2,y2,m1,x3,y3,m2,m3;
       Color bg;
       public void init()
       {
       }
       public void start()
       {
               t=new Thread(this,"a");
               t.start();
       }
       public void run()
       {
                               paint1();
       }
       public void paint1()
       {
               Graphics g=getGraphics();
               try
               {
                       for(i=0;i<260;i++)
                       {
                               for(j=130;j<=260;j++)
                               {
                                       g.setColor(Color.red);
                                       g.fillOval(i,j,40,40);
                                       Thread.sleep(50);
                                       i=i+5;
                                       j=j+5;
                                       paint2();
                                       if(j>=260)
                                       {
                                               k=i;
                                               l=j;
                                               paint3();
                                               break;
                                       }
                               }
                       }
               }
               catch(InterruptedException s)
               {
                       //ShowStatus("error");
               }
       }
       public void paint3()
       {
               setBackground(Color.black);
               Graphics h=getGraphics();
               try
               {
                               for(x1=k;x1<=260;x1++)
                               {
                                       for(y1=j;y1>1;y1--)
                                       {
                                               h.setColor(Color.red);
                                               h.fillOval(x1,y1,40,40);
                                               Thread.sleep(50);
                                               x1=x1+6;
                                               y1=y1-4;
                                               paint2();
                                               if(x1>=260)
                                               {
                                                       m=x1;
                                                       m1=y1;
                                                       paint4();
                                               }
                                       }
                               }
               }
               catch(InterruptedException s1)
               {
                       //ShowStatus("error");
               }
       }
       public void paint4()
       {
               Graphics h1=getGraphics();
               try
               {
                               for(x2=m;x2>=40;x2--)
                               {
                                       for(y2=m1;y2>=1;y1--)
                                       {
                                               h1.setColor(Color.red);
                                               h1.fillOval(x2,y2,40,40);
                                               Thread.sleep(50);
                                               x2=x2-5;
                                               y2=y2-6;
                                               paint2();
                                               if(y2<=1)
                                               {
                                                       m2=x2;
                                                       m3=y2;
                                                       paint5();
                                               }
                                       }
                               }
               }
               catch(InterruptedException s1)
               {
                       //ShowStatus("error");
               }
       }
       public void paint5()
       {
               setBackground(Color.black);

               Graphics h2=getGraphics();
               try
               {
                               for(x3=m2;x3>=1;x3--)
                               {
                                       for(y3=m3;y3<260;y3++)
                                       {
                                               h2.setColor(Color.red);
                                               h2.fillOval(x3,y3,40,40);
                                               Thread.sleep(50);
                                               x3=x3-6;
                                               y3=y3+4;
                                               paint2();
                                               if(x3<=1)
                                               {
                                                       m=x1;
                                                       m1=y1;
                                                       paint1();
                                               }
                                       }
                               }
               }
               catch(InterruptedException s1)
               {
                       //ShowStatus("error");
               }
       }


       public void paint2()
       {
               Graphics d=getGraphics();
               d.setColor(Color.white);
               d.fillRect(0,0,300,300);
               setBackground(Color.black);
       }
}


Calculator In Java

import java.awt.*;
import java.awt.event.*;
import java.applet.*;

public class CalculatorApplet extends Applet implements ActionListener
{
private Button keysArray[];
private Panel keyPad;
private TextField lcdField;
private double result;
private boolean first;
private boolean foundKey;
static boolean clearText;
private int prevOperator;

public void init()
{
  lcdField = new TextField(20);
  keyPad = new Panel ();
  keysArray = new Button[17];
  result = 0.0;
  prevOperator = 0;
  first = true;
  clearText = true;

  //Set frame layout manager setLayout(new BorderLayout());

  lcdField.setEditable(false);

  //Create buttons
  for (int i = 0; i <=9; i++)
   keysArray[i] = new Button(String.valueOf(i));
   keysArray[10] = new Button("/");
   keysArray[11] = new Button("*");
   keysArray[12] = new Button("-");
   keysArray[13] = new Button("+");
   keysArray[14] = new Button("=");
   keysArray[15] = new Button(".");
   keysArray[16] = new Button("CLR");

   //Set panel layout manager
   keyPad.setLayout(new GridLayout (4,4));

   //Add button to keyPad panel
   for (int i = 7; i <=10; i++) //adds Button 7,8,9, and divide to 
Panel
    keyPad.add(keysArray[i]);

   for (int i = 4; i <6; i++) //adds buttons 4,5,6 to Panel
    keyPad.add(keysArray[i]);

   keyPad.add(keysArray[11]); //adds multiply button to Panel

   for (int i = 1; i <= 3;i++) //adds buttons 1,2 and 3 to Panel
    keyPad.add(keysArray[i]);

   keyPad.add(keysArray[12]);//adds minus button to Panel

   keyPad.add(keysArray[0]); //adds 0 key to Panel

   for (int i = 15; i >=13; i--)
    keyPad.add(keysArray[i]); //adds decimal point, equal, and addition 
ke
ys Panel

    add(lcdField, BorderLayout.NORTH); //adds text field to top of 
Frame
    add(keyPad, BorderLayout.CENTER); //adds Panel to center of Frame
    add(keysArray[16], BorderLayout.EAST); //adds Clear key to right 
side
of applet

    for(int i = 0; i < keysArray.length; i++)
     keysArray[i].addActionListener(this);
 }

 public void actionPerformed(ActionEvent e)
 {
	  foundKey = false;

	  //Search for the key pressed
	  for (int i = 0; i < keysArray.length && !foundKey; i++)
	  if(e.getSource() == keysArray[i]) //key match found
	  {
		   foundKey = true;
		   switch(i)
		   {
		   case 0: case 1: case 2: case 3: case 4: //number buttons
		   case 5: case 6: case 7: case 8: case 9: //0-9
		   case 15:
		   if (clearText)
		   {
		   lcdField.setText("");
		   clearText = false;
		}
		lcdField.setText(lcdField.getText() +
		keysArray[i].getLabel());
		break;

		case 10:// divide button
		case 11:// multiply button
		case 12:// minus button
		case 13:// plus button
		case 14:// equal button
		  clearText = true;
		  if (first) // First operand
		  {
		  if(lcdField.getText().length()==0)
		   result = 0.0;
		  else
		   result = Double.valueOf(lcdField.getText()).doubleValue();

		first = false;
	               prevOperator = i; //save previous operator
		   }
		     else //second operand already enter, so calculator total
		     {
		 switch(prevOperator)
		 {
		 case 10: //divide Button
		  result /= Double.valueOf(lcdField.getText()).
		  doubleValue();
		break;
		case 11: //multiply Button
		result *= Double.valueOf(lcdField.getText()).
		doubleValue();
		break;
		case 12: //minus button
		result -= Double.valueOf(lcdField.getText()).
		doubleValue();
		break;
		case 13: //plus button
		result += Double.valueOf(lcdField.getText()).
		doubleValue();
		break;
		  }
		  lcdField.setText(Double.toString(result));
		  if (i==14)//equal button
		   first = true;
		  else
		   prevOperator = i; //save previous opetator
		   }
		   break;

		   case 16://Clear button
		   clearText = true;
		   first = true;
		   lcdField.setText("");
		   result = 0.0;
		   prevOperator = 0;
		   break;
		   }
		   }
	   }
   }



Calculator with both Standard and Scientific Mode

import java.awt.*;
import java.awt.event.*;
import javax.swing.*;
import javax.swing.event.*;

public class calculator extends JFrame implements ActionListener
{
        JTextField jtx;
        double temp,temp1,result,a;
        static double m1,m2;
        int k=1,x=0,y=0,z=0;
        char ch;
        JButton
one,two,three,four,five,six,seven,eight,nine,zero,clr,pow2,pow3,exp;
        JButton
plus,min,div,lg,rec,mul,eq,plmi,poin,mr,mc,mp,mm,sqrt,sin,cos,tan;
        JMenuBar bar;
        JMenu view;
        JMenuItem exit;
        JRadioButtonMenuItem standard,scientific;
        JSeparator jp;
        ButtonGroup bg;
        Container cont;
        JPanel textPanel,syntpanel,buttonpanel;
        calculator()
        {
                cont=getContentPane();
                cont.setLayout(new BorderLayout());
                JPanel textpanel=new JPanel();
                Font font=new Font("Arial",Font.PLAIN,18);
                jtx=new JTextField(25);
                jtx.setFont(font);
                jtx.setHorizontalAlignment(SwingConstants.RIGHT);
                jtx.addKeyListener(new KeyAdapter()
                {
                 public void keyTyped(KeyEvent keyevent)
                 {
                 char c=keyevent.getKeyChar();
                 if(c>='0' && c<='9')
                 {
                 }
                 else
                 {
                 keyevent.consume();
                 }
                 }
                 });
                textpanel.add(jtx);
                buttonpanel=new JPanel();
                buttonpanel.setLayout(new GridLayout(5,4,2,2));
                boolean t=true;
                syntpanel=new JPanel();
                syntpanel.setLayout(new GridLayout(5,1));
                bar=new JMenuBar();
                view=new JMenu("View");

                standard =new JRadioButtonMenuItem("Standard",true);
                standard.setMnemonic('S');
                standard.addItemListener(new radiohandler());
                scientific =new JRadioButtonMenuItem("Sceintific");
                standard.setMnemonic('c');
                scientific.addItemListener(new radiohandler());
                jp=new JSeparator();
                exit=new JMenuItem("Exit");
                standard.setMnemonic('E');
                exit.addActionListener(this);
                bg=new ButtonGroup();
                bg.add(standard);
                bg.add(scientific);
                view.add(standard);
                view.add(scientific);
                view.add(jp);
                view.add(exit);
                bar.add(view);
                setJMenuBar(bar);

                mr=new JButton("MR");
                buttonpanel.add(mr);
                mr.addActionListener(this);
                seven=new JButton("7");
                buttonpanel.add(seven);
                seven.addActionListener(this);
                eight=new JButton("8");
                buttonpanel.add(eight);
                eight.addActionListener(this);
                nine=new JButton("9");
                buttonpanel.add(nine);
                nine.addActionListener(this);
                clr=new JButton("AC");
                buttonpanel.add(clr);
                clr.addActionListener(this);

                mc=new JButton("MC");
                buttonpanel.add(mc);
                mc.addActionListener(this);
                four=new JButton("4");
                buttonpanel.add(four);
                four.addActionListener(this);
                five=new JButton("5");
                buttonpanel.add(five);
                five.addActionListener(this);
                six=new JButton("6");
                buttonpanel.add(six);
                six.addActionListener(this);
                mul=new JButton("*");
                buttonpanel.add(mul);
                mul.addActionListener(this);

                mp=new JButton("M+");
                buttonpanel.add(mp);
                mp.addActionListener(this);
                one=new JButton("1");
                buttonpanel.add(one);
                one.addActionListener(this);
                two=new JButton("2");
                buttonpanel.add(two);
                two.addActionListener(this);
                three=new JButton("3");
                buttonpanel.add(three);
                three.addActionListener(this);
                min=new JButton("-");
                buttonpanel.add(min);
                min.addActionListener(this);

                mm=new JButton("M-");
                buttonpanel.add(mm);
                mm.addActionListener(this);
                zero=new JButton("0");
                buttonpanel.add(zero);
                zero.addActionListener(this);
                plmi=new JButton("+/-");
                buttonpanel.add(plmi);
                plmi.addActionListener(this);
                poin=new JButton(".");
                buttonpanel.add(poin);
                poin.addActionListener(this);
                plus=new JButton("+");
                buttonpanel.add(plus);
                plus.addActionListener(this);


                rec=new JButton("1/x");
                buttonpanel.add(rec);
                rec.addActionListener(this);
                sqrt=new JButton("Sqrt");
                buttonpanel.add(sqrt);
                sqrt.addActionListener(this);
                lg=new JButton("log");
                buttonpanel.add(lg);
                lg.addActionListener(this);
                div=new JButton("/");
                div.addActionListener(this);
                buttonpanel.add(div);
                eq=new JButton("=");
                buttonpanel.add(eq);
                eq.addActionListener(this);

                sin=new JButton("SIN");
                syntpanel.add(sin);
                sin.addActionListener(this);
                cos=new JButton("COS");
                syntpanel.add(cos);
                cos.addActionListener(this);
                tan=new JButton("TAN");
                syntpanel.add(tan);
                tan.addActionListener(this);
                pow2=new JButton("x^2");
                syntpanel.add(pow2);
                pow2.addActionListener(this);
                pow3=new JButton("x^3");
                syntpanel.add(pow3);
                pow3.addActionListener(this);
                exp=new JButton("Exp");
                exp.addActionListener(this);

                cont.add("Center",buttonpanel);
                cont.add("North",textpanel);
                setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        }
class radiohandler implements ItemListener
{
public void itemStateChanged(ItemEvent ie)
  {
        AbstractButton button=(AbstractButton)ie.getItem();
        String label=button.getText();
        {
          if(label.equals("Standard"))
          {
                cont.remove(syntpanel);
                validate();
          }
        if(label.equals("Sceintific"))
          {
                cont.add("West",syntpanel);
                validate();
          }
        }
  }
}
public void actionPerformed(ActionEvent e)
{
        String s=e.getActionCommand();
        if(s.equals("Exit"))
        {
                System.exit(0);
        }
        if(s.equals("1"))
        {
        if(z==0)
        {
        jtx.setText(jtx.getText()+"1");
        }
        else
        {
        jtx.setText("");
        jtx.setText(jtx.getText()+"1");
        z=0;
        }
        }
        if(s.equals("2"))
        {
        if(z==0)
        {
        jtx.setText(jtx.getText()+"2");
        }
        else
        {
        jtx.setText("");
        jtx.setText(jtx.getText()+"2");
        z=0;
        }
        }
        if(s.equals("3"))
        {
        if(z==0)
        {
        jtx.setText(jtx.getText()+"3");
        }
        else
        {
        jtx.setText("");
        jtx.setText(jtx.getText()+"3");
        z=0;
        }
        }
        if(s.equals("4"))
        {
        if(z==0)
        {
        jtx.setText(jtx.getText()+"4");
        }
        else
        {
        jtx.setText("");
        jtx.setText(jtx.getText()+"4");
        z=0;
        }
        }
        if(s.equals("5"))
        {
        if(z==0)
        {
        jtx.setText(jtx.getText()+"5");
        }
        else
        {
        jtx.setText("");
        jtx.setText(jtx.getText()+"5");
        z=0;
        }
        }
        if(s.equals("6"))
        {
        if(z==0)
        {
        jtx.setText(jtx.getText()+"6");
        }
        else
        {
        jtx.setText("");
        jtx.setText(jtx.getText()+"6");
        z=0;
        }
        }
        if(s.equals("7"))
        {
        if(z==0)
        {
        jtx.setText(jtx.getText()+"7");
        }
        else
        {
        jtx.setText("");
        jtx.setText(jtx.getText()+"7");
        z=0;
        }
        }
        if(s.equals("8"))
        {
        if(z==0)
        {
        jtx.setText(jtx.getText()+"8");
        }
        else
        {
        jtx.setText("");
        jtx.setText(jtx.getText()+"8");
        z=0;
        }
        }
        if(s.equals("9"))
        {
        if(z==0)
        {
        jtx.setText(jtx.getText()+"9");
        }
        else
        {
        jtx.setText("");
        jtx.setText(jtx.getText()+"9");
        z=0;
        }
        }
        if(s.equals("0"))
        {
        if(z==0)
        {
        jtx.setText(jtx.getText()+"0");
        }
        else
        {
        jtx.setText("");
        jtx.setText(jtx.getText()+"0");
        z=0;
        }
        }
        if(s.equals("AC"))
        {
        jtx.setText("");
        x=0;
        y=0;
        z=0;
        }
        if(s.equals("log"))
        {
           if(jtx.getText().equals(""))
             {
                 jtx.setText("");
             }
           else
          {
                a=Math.log(Double.parseDouble(jtx.getText()));
                jtx.setText("");
                jtx.setText(jtx.getText() + a);
          }
        }
        if(s.equals("1/x"))
        {
           if(jtx.getText().equals(""))
             {
                 jtx.setText("");
             }
           else
             {
                  a=1/Double.parseDouble(jtx.getText());
                  jtx.setText("");
                  jtx.setText(jtx.getText() + a);
             }
        }
        if(s.equals("Exp"))
        {
          if(jtx.getText().equals(""))
            {
                 jtx.setText("");
            }
            else
            {
                 a=Math.exp(Double.parseDouble(jtx.getText()));
                 jtx.setText("");
                 jtx.setText(jtx.getText() + a);
            }
        }
        if(s.equals("x^2"))
        {
          if(jtx.getText().equals(""))
           {
                jtx.setText("");
           }
           else
           {
               a=Math.pow(Double.parseDouble(jtx.getText()),2);
               jtx.setText("");
               jtx.setText(jtx.getText() + a);
           }
        }
        if(s.equals("x^3"))
        {
          if(jtx.getText().equals(""))
          {
              jtx.setText("");
          }
          else
          {
              a=Math.pow(Double.parseDouble(jtx.getText()),3);
              jtx.setText("");
              jtx.setText(jtx.getText() + a);
          }
        }
        if(s.equals("+/-"))
        {
         if(x==0)
         {
              jtx.setText("-"+jtx.getText());
         x=1;
         }
         else
         {
              jtx.setText(jtx.getText());
         }
         }
        if(s.equals("."))
        {
         if(y==0)
         {
         jtx.setText(jtx.getText()+".");
         y=1;
         }
         else
         {
         jtx.setText(jtx.getText());
         }
         }
        if(s.equals("+"))
        {
          if(jtx.getText().equals(""))
           {
                jtx.setText("");
                temp=0;
                ch='+';
           }
        else
           {
                temp=Double.parseDouble(jtx.getText());
                jtx.setText("");
                ch='+';
                y=0;
                x=0;
           }
           jtx.requestFocus();
        }
        if(s.equals("-"))
        {
          if(jtx.getText().equals(""))
           {
                jtx.setText("");
                temp=0;
                ch='-';
           }
          else
           {
                x=0;
                y=0;
                temp=Double.parseDouble(jtx.getText());
                jtx.setText("");
                ch='-';
           }
             jtx.requestFocus();
        }
        if(s.equals("/"))
        {
          if(jtx.getText().equals(""))
           {
                jtx.setText("");
                temp=1;
                ch='/';
           }
        else
           {
                x=0;
                y=0;
                temp=Double.parseDouble(jtx.getText());
                ch='/';
                jtx.setText("");
           }
            jtx.requestFocus();
        }
        if(s.equals("*"))
        {
          if(jtx.getText().equals(""))
           {
                jtx.setText("");
                temp=1;
                ch='*';
           }
        else
           {
                x=0;
                y=0;
                temp=Double.parseDouble(jtx.getText());
                ch='*';
                jtx.setText("");
           }
            jtx.requestFocus();
        }
        if(s.equals("MC"))
          {
                m1=0;
                jtx.setText("");
          }
        if(s.equals("MR"))
        {
                jtx.setText("");
                jtx.setText(jtx.getText() + m1);
        }
        if(s.equals("M+"))
           {
                if(k==1)
                {
                m1=Double.parseDouble(jtx.getText());
                k++;
                }
                else
                {
                m1+=Double.parseDouble(jtx.getText());
                jtx.setText(""+m1);
                }
            }
        if(s.equals("M-"))
           {
                if(k==1)
                {
                m1=Double.parseDouble(jtx.getText());
                k++;
                }
                else
                {
                m1-=Double.parseDouble(jtx.getText());
                jtx.setText(""+m1);
                }
            }
            if(s.equals("Sqrt"))
            {
                if(jtx.getText().equals(""))
                {
                jtx.setText("");
                }
                else
                {
                a=Math.sqrt(Double.parseDouble(jtx.getText()));
                jtx.setText("");
                jtx.setText(jtx.getText() + a);
                }
            }
            if(s.equals("SIN"))
            {
                if(jtx.getText().equals(""))
                {
                jtx.setText("");
                }
                else
                {
                a=Math.sin(Double.parseDouble(jtx.getText()));
                jtx.setText("");
                jtx.setText(jtx.getText() + a);
                }
            }
            if(s.equals("COS"))
            {
                if(jtx.getText().equals(""))
                {
                jtx.setText("");
                }
                else
                {
                a=Math.cos(Double.parseDouble(jtx.getText()));
                jtx.setText("");
                jtx.setText(jtx.getText() + a);
                }
            }
            if(s.equals("TAN"))
            {
                if(jtx.getText().equals(""))
                {
                jtx.setText("");
                }
                else
                {
                a=Math.tan(Double.parseDouble(jtx.getText()));
                jtx.setText("");
                jtx.setText(jtx.getText() + a);
                }
            }
        if(s.equals("="))
       {
         if(jtx.getText().equals(""))
         {
              jtx.setText("");
         }
         else
         {
         temp1 = Double.parseDouble(jtx.getText());
         switch(ch)
         {
                case '+':
                result=temp+temp1;
                break;
                case '-':
                result=temp-temp1;
                break;
                case '/':
                result=temp/temp1;
                break;
                case '*':
                result=temp*temp1;
                break;
           }
                jtx.setText("");
                jtx.setText(jtx.getText() + result);
                z=1;
         }
         }
         jtx.requestFocus();
  }
public static void main(String args[])
        {
                calculator n=new calculator();
                n.setTitle("CALCULATOR");
                n.setSize(370,250);
                n.setResizable(false);
                n.setVisible(true);
        }
}


Calling Windows Runtime Commands

import java.io.*;
public class Win
{
public static void main(String[] Miller) throws IOException
{
 Process process =
Runtime.getRuntime().exec("/C:WINNTsystem32calculator.exe");
         process.waitFor();
}
}


CLock CAN TAlk REALLy

import java.util.*;
public class CLockTAlk
{
   public static void main(String[]args)
   {
       // get current time and date
       Calendar now = Calendar.getInstance();
       int hour = now.get(Calendar.HOUR_OF_DAY);
       int minute = now.get(Calendar.MINUTE);
       int month = now.get(Calendar.MONTH)+ 1;
       int day = now.get(Calendar.DAY_OF_MONTH);
       int year = now.get(Calendar.YEAR);

       // display gretting
       if (hour < 12)
           System.out.println("Good morning Sir!
Have you ate breakfast
yet?");
       else if (hour < 18)
           System.out.println("Good afternoon Sir!
Have you ate lunch
yet?");
       else
           System.out.println("Good evening Sir!
Have you ate dinner
yet?");

       // begin time message by showing the minutes
       System.out.print("It is");
       if (minute != 0)
       {
           System.out.print(" " + minute + " ");
           System.out.print( (minute != 1) ? "minutes" : "minute");
           System.out.print(" past");
       }

       // display the hour
           System.out.print(" ");
           System.out.print( (hour > 12) ? (hour - 12) : hour );
           System.out.print(" 0'clock on ");

           // display the name of the month
           switch (month)
           {
               case 1:
                   System.out.print("January");
                   break;
               case 2:
                   System.out.print("February");
                   break;
               case 3:
                   System.out.print("March");
                   break;
               case 4:
                   System.out.print("April");
                   break;
               case 5:
                   System.out.print("May");
                   break;
               case 6:
                   System.out.print("June");
                   break;
               case 7:
                   System.out.print("July");
                   break;
               case 8:
                   System.out.print("August");
                   break;
               case 9:
                   System.out.print("September");
                   break;
               case 10:
                   System.out.print("October");
                   break;
               case 11:
                   System.out.print("November");
                   break;
               case 12:
                   System.out.print("December");
          }

           // display the date and year
           System.out.println(" " + day + ", " + year + ".");
   }

}


Program for converting numbers in a file to corresponding words

import java.io.*;
import java.lang.*;

class NumToWords
{
        public static void main(String a[]) throws IOException
        {
                String s="";
                BufferedReader br=new BufferedReader(new InputStreamReader(System.in));
                System.out.print("Enter filename : ");
                try
                {
                        s=br.readLine();
                }catch(Exception e){}
                InputStream in=new FileInputStream(s);
                MyInputStream mis=new MyInputStream(in);
                mis.changeNumbers();
                in.close();
                mis.close();
        }
}
class MyInputStream extends FilterInputStream
{
        InputStream is;
        MyInputStream(InputStream in)
        {
                super(in);
                is=in;
        }
        public void changeNumbers() throws IOException
        {
                PushbackInputStream pis;
                String num="";
                char ch;
                int c;
                pis=new PushbackInputStream(is);
                while((c=pis.read())!=-1)
                {
                        ch=(char)c;
                        if('0'<=ch&&ch<='9')
                        {
                                num="";
                                while('0'<=ch&&ch<='9'&&c!=-1)
                                {
                                        num=num+ch;
                                        c=pis.read();
                                        ch=(char)c;
                                }
                                System.out.print(MyInputStream.process(num));
                                pis.unread(ch);
                        }
                        else
                                System.out.print(ch);
                }
        }
        static String process(String str)
        {
                String a1[]={"One","Two","Three","Four","Five","Six","Seven","Eight","Nine"};
                String a2[]={"Twenty","Thirty","Fourty","Fifty","Sixty","Seventy","Eighty","Ninety"};
                String a3[]={"Ten","Eleven","Twelve","Thirteen","Fourteen","Fifteen","Sixteen","Seventeen","Eighteen","Nineteen"};
                String a4[]={"Hundered","Thousand","Lakhs","Crores"};
                int num=0;
                try
                {
                        num=Integer.parseInt(str);
                }catch(Exception e){}
                if(num==0)
                        return "Zero";
                int n,n1;
                String ans="";
                String ans1="";
                n1=num%10;
                num=num/10;
                if(n1!=0)
                        ans=a1[n1-1];
                if(num>0)
                {
                        n=num%10;
                        num=num/10;
                        if(n==1)
                                ans=a3[n1];
                        else if(n!=0)
                                ans=a2[n-2]+" "+ans;
                }
                if(num>0)
                {
                        n=num%10;
                        num=num/10;
                        if(n!=0)
                                ans=a1[n-1]+" "+a4[0]+" "+ans;
                }
                for(int i=1;num>0;i++)
                {
                        n1=num%10;
                        num=num/10;
                        if(n1!=0)
                                ans1=a1[n1-1];
                        if(num>0)
                        {
                                n=num%10;
                                num=num/10;
                                if(n==1)
                                        ans1=a3[n1];
                                else if(n!=0)
                                        ans1=a2[n-2]+" "+ans1;
                        }
                        ans=ans1+" "+a4[i]+" "+ans;
                        ans1="";
                }
                return(ans);
        }
}


Program for counting no. of Chars, Words and Lines in a file

import java.lang.*;
import java.io.*;
import java.util.*;
class WordCount
{
        public static void main(String arg[]) throws Exception
        {
                int char_count=0;
                int word_count=0;
                int line_count=0;
                String s;
                StringTokenizer st;
                BufferedReader buf=new BufferedReader(new InputStreamReader(System.in));
                System.out.print("Enter filename : ");
                s=buf.readLine();
                buf=new BufferedReader(new FileReader(s));
                while((s=buf.readLine())!=null)
                {
                        line_count++;
                        st=new StringTokenizer(s," ,;:.");
                        while(st.hasMoreTokens())
                        {
                                word_count++;
                                s=st.nextToken();
                                char_count+=s.length();
                        }
                }
                System.out.println("Character Count : "+char_count);
                System.out.println("Word Count : "+word_count);
                System.out.println("Line Count : "+line_count);
                buf.close();
        }
}



Program to check the input characcter for uppercase, lowercase, no. of digits
and other characters

import java.io.*;

class InputDiagnosis{

      public static void main(String args[]) throws IOException
      {
         char ch;
         int digit=0;
         int upper=0;
         int lower=0;
         int other=0;

         BufferedReader inputstream =new BufferedReader(new InputStreamReader(System.in));

         System.out.println("

 Type some text. When done, press Enter to Quit:");


         do{

          ch=(char) inputstream.read();

          if(Character.isDigit(ch))
            digit++;
          else if(Character.isUpperCase(ch))
            upper++;
          else if(Character.isLowerCase(ch))
            lower++;
          else
            other++;

          }while(ch !='
');


          System.out.println("No Of Digits:" +digit);
          System.out.println("No Of Uppercase Characters:" +upper);
          System.out.println("No Of Lowercase Characters:" +lower);
          System.out.println("No Of Other Characters:" +other);

         }
     }


Program to create GUI for Bank Account Simulation

import java.awt.*;
import java.awt.event.*;
import javax.swing.*;
class GuiAccTest extends Frame implements ActionListener
{
        Label lab=new Label("                                                                                                                                                                 ");
        Label lab1=new Label("                                                                                                                                                                 ");
        TextField t[]=new TextField [4];
        Label l[]=new Label [4];
        Button but=new Button("Create Account");
        Button but1=new Button("Test Account");
        BankAccount b;
        GuiAccTest()
        {
                addWindowListener(new NewWindowAdapter());
                setLayout(new GridLayout(2,0));
                Panel p=new Panel();
                Panel p1=new Panel();
                but.addActionListener(this);
                but1.addActionListener(this);
                p.setLayout(new GridLayout(5,2));
                p1.add(lab1);
                p1.add(lab);
                l[0]=new Label("Account Number");
                l[1]=new Label("Initial Balance");
                l[2]=new Label("Deposit Amount");
                l[3]=new Label("Withdraw Amount");
                for(int i=0;i<4;i++)
                {
                        t[i]=new TextField(10);
                        p.add(l[i]);
                        p.add(t[i]);
                }
                p.add(but);
                p.add(but1);
                but1.setVisible(false);
                l[2].setVisible(false);
                l[3].setVisible(false);
                t[2].setVisible(false);
                t[3].setVisible(false);
                add(p);
                add(p1);
        }
        String testAccount(int d_amt,int w_amt)
        {
                String msg;
                b.deposit(d_amt);
                msg="Transaction Succesful";
                try
                {
                        b.withdraw(w_amt);
                }catch(FundsInsufficientException fe)
                {
                        fe=new FundsInsufficientException(b.amount,w_amt);
                        msg=String.valueOf(fe);
                }
                return msg;
        }
        public void actionPerformed(ActionEvent ae)
        {
                String str=ae.getActionCommand();
                if(str.equals("Create Account"))
                {
                        b=new BankAccount(Integer.parseInt(t[0].getText()),Integer.parseInt(t[1].getText()));
                        but1.setVisible(true);
                        l[2].setVisible(true);
                        l[3].setVisible(true);
                        t[2].setVisible(true);
                        t[3].setVisible(true);
                        but.setVisible(false);
                        l[0].setVisible(false);
                        l[1].setVisible(false);
                        t[0].setVisible(false);
                        t[1].setVisible(false);
                        lab1.setText("Account : "+b.accnum+", Current Balance : "+b.amount);
                        return;
                }
                else
                {
                        lab.setText(testAccount(Integer.parseInt(t[2].getText()),Integer.parseInt(t[3].getText())));
                        lab1.setText("Account : "+b.accnum+", Current Balance : "+b.amount);
                }
        }
        public static void main(String arg[])
        {
                GuiAccTest at=new GuiAccTest();
                at.setTitle("Bank Account Tester");
                at.setSize(600,200);
                at.setVisible(true);
        }
}
class NewWindowAdapter extends WindowAdapter
{
        public void windowClosing(WindowEvent we)
        {
                System.exit(0);
        }
}
class BankAccount
{
        int accnum;
        int amount;
        BankAccount(int num,int amt)
        {
                accnum=num;
                amount=amt;
        }
        public void deposit(int amt)
        {
                amount=amount+amt;
        }
        public void withdraw(int amt) throws FundsInsufficientException
        {
                if(amt>amount)
                        throw new FundsInsufficientException(amount,amt);
                else
                        amount=amount-amt;
        }
}
class FundsInsufficientException extends Exception
{
        int balance;
        int withdraw_amount;
        FundsInsufficientException(int bal,int w_amt)
        {
                balance=bal;
                withdraw_amount=w_amt;
        }
        public String toString()
        {
                return "Your withdraw amount ("+withdraw_amount+") is less than the balance ("+balance+"). No withdrawal was recorded.";
        }
}


Program to implement Gregorian Calendar

import java.util.*;
class calendar1
{
        public static void main(String arg[])
        {
              GregorianCalendar c1 = new GregorianCalendar();
              int month  = Integer.parseInt(arg[0]);
              int year = Integer.parseInt(arg[1]);
              month = month-1;
              c1.set(year,month,1);
              int day = c1.get(Calendar.DAY_OF_WEEK);
              System.out.println(day);
              int numdays = 0;

        switch(c1.get(Calendar.MONTH))
        {
           case 0:
           case 2:
           case 4:
           case 6:
           case 7:
           case 9:
           case 11:
                numdays = 31;

                break;
           case 1:
                if(c1.isLeapYear(c1.get(Calendar.YEAR)))
                   numdays = 29;
                else
                   numdays = 28;
                   break;
           case 3:
           case 5:
           case 8:
           case 10:
                 numdays = 30;
                 break;
        default:
                System.out.println("ERROR IN MONTH SPECIFICATION");
                break;
       }
       display(day,numdays);

       }
       static void display(int sday , int tday)
         {
              int k = 0;
              System.out.println(" SUN  MON  TUE  WED  THU  FRI  SAT 
");
              for(int j = 1;j <= sday-1; j++)
              {
               System.out.print("     ");
               k++;
              }
             for(int i = 1;i <= tday;i++)
             {
               if(i < 10)
                System.out.print("  "+"0"+i+" ");
               else
                System.out.print("  "+i+" ");
               k++;
               if ( k == 7)
               {
                System.out.println();
                k = 0;
               }
             }
 }
}



School Management System

import java.awt.*;
import java.io.*;
import java.util.*;
import javax.swing.*;
import javax.swing.event.*;
import java.awt.event.*;

public class ProjectX extends JFrame implements ChangeListener,
ActionListener
{
                static int choice = 0;
                static String line = "--------------------------------
";
                DataInputStream inputData = new DataInputStream(System.in);
                private Registration studentDetails = new Registration();
                int topScore = studentDetails.getTopScore();
                int passMarks = studentDetails.getPassMarks();
                int firstClass = studentDetails.getFirstClass();
                int secondClass = studentDetails.getSecondClass();

                JTabbedPane tabbedPane = new JTabbedPane();
                JLabel statusLabel = new JLabel();
                JLabel titleLabel = new JLabel("Student Software Beta Edition");
                JPanel addStudentPanel = new JPanel();
                                 JTextField studentName = new JTextField();
                                 JTextField physicsMarks = new JTextField();
                                 JTextField biologyMarks = new JTextField();
                                 JTextField mathsMarks = new JTextField();
                                 JButton submitDetails = new JButton("Submit Details");
                JPanel studentDetailsPanel = new JPanel();
                                 JTextField studentID1 = new JTextField();
                                 JTextArea studentInfo = new JTextArea();
                                 JButton submitID1 = new JButton("Submit ID");
                JPanel studentGradePanel = new JPanel();
                                 JTextField studentID2 = new JTextField();
                                 JTextArea studentGrade = new JTextArea();
                                 JButton submitID2 = new JButton("Submit ID");
                JPanel numberPassedPanel = new JPanel();
                                 JTextArea studentPassed = new JTextArea();
                JPanel classTopperPanel = new JPanel();
                                 JTextArea studentTopper = new JTextArea();

                public ProjectX(String frameTitle)
                {
                                 super(frameTitle);
                                 setResizable(true);
                                 setSize(400,400);
                                 submitDetails.addActionListener(this);
                                 submitID1.addActionListener(this);
                                 submitID2.addActionListener(this);

                                 getContentPane().setLayout(new BorderLayout());

                                 getContentPane().add(titleLabel,"North");

                                 tabbedPane.addTab("Add Student",addStudentPanel);
                                 addStudentPanel.setLayout(new GridLayout(8,2,5,5));
                                 addStudentPanel.add(new JLabel("Student Name: "));
                                 addStudentPanel.add(studentName);
                                 addStudentPanel.add(new JLabel("Physics Marks: "));
                                 addStudentPanel.add(physicsMarks);
                                 addStudentPanel.add(new JLabel("Biology Marks: "));
                                 addStudentPanel.add(biologyMarks);
                                 addStudentPanel.add(new JLabel("Maths Marks: "));
                                 addStudentPanel.add(mathsMarks);
                                 addStudentPanel.add(submitDetails);

                                 tabbedPane.addTab("Student Details",studentDetailsPanel);
                                 studentDetailsPanel.add(new JLabel("Enter Student ID: "));
                                 studentDetailsPanel.add(studentID1);
                                 studentDetailsPanel.add(submitID1);
                                 studentDetailsPanel.add(new JLabel("Student Details:"));
                                 studentDetailsPanel.add(studentInfo);

                                 tabbedPane.addTab("Student Grade",studentGradePanel);
                                 studentGradePanel.setLayout(new GridLayout(5,2,5,5));
                                 studentGradePanel.add(new JLabel("Enter Student ID: "));
                                 studentGradePanel.add(studentID2);
                                 studentGradePanel.add(submitID2);
                                 studentGradePanel.add(new JLabel("Student Grade:"));
                                 studentGradePanel.add(studentGrade);

                                 tabbedPane.addTab("Passed Student",numberPassedPanel);
                                 numberPassedPanel.setLayout(new GridLayout(2,2,5,5));
                                 numberPassedPanel.add(new JLabel("Number of Student Passed: "));
                                 numberPassedPanel.add(studentPassed);

                                 tabbedPane.addTab("Class Topper",classTopperPanel);
                                 classTopperPanel.setLayout(new GridLayout(2,2,5,5));
                                 classTopperPanel.add(new JLabel("Here are the class Toppers: "));
                                 classTopperPanel.add(studentTopper);

                                 tabbedPane.addChangeListener(this);
                                 getContentPane().add(tabbedPane,"Center");

                                 statusLabel.setText("Status: Normal");
                                 getContentPane().add(statusLabel,"South");

                                 setVisible(true);

                }

                public static void main(String args[])
                {
     ProjectX outputScreen = new ProjectX("Case Study");
                }

                public String setStudentInfo()
                {
                                 int id = studentDetails.addStudent(studentName.getText(),
Integer.parseInt(physicsMarks.getText()),
Integer.parseInt(biologyMarks.getText()),
Integer.parseInt(mathsMarks.getText()));
                                 return                                                                    ("
"                                                                                                                                                                              +
                                                                                                                                        line                                                                                                                                                                            +
                                                                                                                                        "Record Created For " + studentName +
                                                                                                                                        "
"                                                                                                                                                                            +
                                                                                                              "Student ID: " + id                                                                                       +
                                                                                                                                        "
"                                                                                                                                                                                            +
                                                                                                                                        line                                                                                                                                                                                            );
                }

                public String getStudentInfo()
                {
                                 int id = Integer.parseInt(studentID1.getText());
                                 if(studentDetails.getStudentDetails(id))
                                 return                                                                    ("
"                                                                                                                                                                            +
                                                                                                                                        line                                                                                                                                                            +
                                                                                                                                        "Student Details
"                                                                                                                                 +
                                                                                                              line                                                                                                                                                               +
                                                                                                                                        "Student ID:" + "	" + id + "
"                                                                                      +
                                                                                                                                        "Student Name:" + "	" + studentDetails.studentName + "
"   +
                                                                                                                                        "Physics Marks:" + "	" + studentDetails.physicsMarks + "
" +
                                                                                                                                        "Biology Marks:" + "	" + studentDetails.biologyMarks + "
" +
                                                                                                                                        "Maths Marks:" + "	" + studentDetails.mathsMarks + "
"                    +
                                                                                                                                        line                                                                                                                                                                                                                                                                                                          );
                                 else
                                 return("
 Records Not Found for ID " + id);
                }

                public String getStudentGrade()
                {
                                 int id = Integer.parseInt(studentID2.getText());
                                 studentDetails.getStudentDetails(id);
                                 String grade;
                                 if(studentDetails.studentName == null)
                                 {
                                                  System.out.println("
 Records Not Found for ID " + id);
                                                  return null;
                                 }
                                 if(studentDetails.physicsMarks < passMarks ||
studentDetails.biologyMarks < passMarks || studentDetails.mathsMarks <
passMarks)
                                 {
                                                  grade = "Failed";
                                 }
                                 else
                                 {
                                                  int avgMarks = (studentDetails.physicsMarks +
studentDetails.biologyMarks + studentDetails.mathsMarks)/3;
                                                  if(avgMarks >= passMarks && avgMarks < secondClass) grade = "Pass
Class";
                                                  else if(avgMarks >= secondClass && avgMarks < firstClass) grade =
"Second Class";
                                                  else if(avgMarks >= firstClass && avgMarks < topScore) grade = "First
Class";
                                                  else grade = "Distinction";
                                 }
                                 return(line + "Grade For " + studentDetails.studentName + " is " + grade
+ "
" + line);
                }

                public String getNumberPasses()
                {
                                 int lastID = Registration.getNextID() -1;
                                 boolean passed = true;
                                 int numberPassed = 0;
                                 for(int id = 1; id <= lastID; id++)
                                 {
                                                  studentDetails.getStudentDetails(id);
                                                  if(studentDetails.physicsMarks >= passMarks &&
studentDetails.biologyMarks >= passMarks && studentDetails.mathsMarks >=
passMarks) numberPassed++;
                                 }
                                 return(line + "Number of Student Passed: " + numberPassed + "
" +
line);
                }

                public String getClassTopper()
                {
                                 int lastID = Registration.getNextID() -1;
                                 String classTopper;
                                 StringBuffer buffer = new StringBuffer(500);
                                 int topMarks = 0;
                                 for(int id = 1; id <= lastID; id++)
                                 {
                                                  studentDetails.getStudentDetails(id);
                                                  int studentMarks = studentDetails.physicsMarks +
studentDetails.biologyMarks + studentDetails.mathsMarks;
                                                  if(studentMarks > topMarks) topMarks = studentMarks;
                                 }
                                 buffer.append(line + "Student Having Top Marks: 
");
                                 for(int id = 1; id <= lastID; id++)
                                 {
                                                  studentDetails.getStudentDetails(id);
                                                  int studentMarks = studentDetails.physicsMarks +
studentDetails.biologyMarks + studentDetails.mathsMarks;
                                                  if(studentMarks == topMarks)
                                                  {
                                                                   buffer.append(studentDetails.studentName + " Having Total Marks: " +
topMarks + "
");
                                                  }
                                 }
                                 buffer.append(line);
                                 return(buffer.toString());
                }

                public void stateChanged(ChangeEvent e)
                {
                                 switch(tabbedPane.getSelectedIndex())
                                 {
                                                  case 3: studentPassed.setText(getNumberPasses());
                                                                                      break;
                                                  case 4: studentTopper.setText(getClassTopper());
                                                                                      break;
                                 }
                }

                public void actionPerformed(ActionEvent e)
                {
                                 if(e.getSource() == submitID1)
                                 {
                                                  studentInfo.setText(getStudentInfo());
                                 }
                                 else if(e.getSource() == submitID2)
                                 {
                                                  studentGrade.setText(getStudentGrade());
                                 }
                                 if(e.getSource() == submitDetails)
                                 {
                                                  setStudentInfo();
                                 }
                }

}


//Registration Class
class Registration
{
                private int topScore = 90;
                private int passMarks = 35;
                private int firstClass = 65;
                private int secondClass = 45;
                private static String idFile = "id.dat";
                private static String studentFile = "studentfile.dat";

                public int id;
                public String studentName;
                public int physicsMarks;
                public int biologyMarks;
                public int mathsMarks;

                public int addStudent(String studentName, int physicsMarks, int
biologyMarks, int mathsMarks)
                {
                                 int id = 0;
                                 try
                                 {
                                                  FileWriter fileOutput = new FileWriter(Registration.studentFile,true);
                                                  id = Registration.getNextID();
                                                  String buffer = id + "|" + studentName + "|" + physicsMarks + "|" +
biologyMarks + "|" + mathsMarks + "
";
                                                  fileOutput.write(buffer);
                                                  fileOutput.close();
                                                  Registration.setID(id);
                                 }
                                 catch(IOException e)
                                 {
                                                  System.err.println(e.toString());
                                                  System.exit(1);
                                 }
                                 return id;

                }

//Function to get the details of a student given the ID
                public boolean getStudentDetails(int id)
                {
                                 try
                                 {
                                                  FileReader fileInput = new FileReader(Registration.studentFile);
                                                  BufferedReader br = new BufferedReader(fileInput);
                                                  {

                                                                   String str;
                                                                   while((str = br.readLine()) != null)
                                                                   {
                                                                                    StringTokenizer fields = new StringTokenizer(str,"|");
                                                                                    if(Integer.parseInt(fields.nextToken()) == id)
                                                                                    {
                                                                                                     this.id = id;
                                                                                                     this.studentName = fields.nextToken();
                                                                                                     this.physicsMarks = Integer.parseInt(fields.nextToken());
                                                                                                     this.biologyMarks = Integer.parseInt(fields.nextToken());
                                                                                                     this.mathsMarks = Integer.parseInt(fields.nextToken());
                                                                                                     return true;
                                                                                    }
                                                                   }
                                                  }

                                 }

                                 catch(IOException e)
                                 {
                                                  System.err.println(e.toString());
                                                  System.exit(1);
                                 }

                                 return false;
                }

                public int getTopScore()
                {
                                 return topScore;
                }

                public int getPassMarks()
                {
                                 return passMarks;
                }

                public int getFirstClass()
                {
                                 return firstClass;
                }

                public int getSecondClass()
                {
                                 return secondClass;
                }

//Function to get the next ID available
                public static int getNextID()
                {
                                 int id = 0;
                                 try
                                 {
                                                  RandomAccessFile studentIDFile = new
RandomAccessFile(Registration.idFile,"rw");
                                                  if(studentIDFile.length() == 0)
                                                  {
                                                                   id = 0;
                                                  }
                                                  else id = studentIDFile.readInt();
                                                  id++;
                                                  studentIDFile.close();
                                 }

                                 catch(IOException e)
                                 {
                                                  System.err.println(e.toString());
                                                  System.exit(1);
                                 }
                                 return id;
                }

//Function to Store current ID in a file
                public static void setID(int id)
                {
                                 try
                                 {
                                                  RandomAccessFile studentIDFile = new
RandomAccessFile(Registration.idFile,"rw");
                                                  studentIDFile.seek(0);
                                                  studentIDFile.writeInt(id);
                                                  studentIDFile.close();
                                 }

                                 catch(IOException e)
                                 {
                                                  System.err.println(e.toString());
                                                  System.exit(1);
                                 }
                }
}



Set the foreground and background color to the text area

import java.awt.*;
import java.awt.event.*;
import java.applet.*;

class colopat extends Frame
{
	Checkbox r,g,b;
	Checkbox m,y,gr,p,w,bl,c;
	TextArea ta;
	Checkbox r1,g1,b1;
	Checkbox m1,y1,gr1,p1,w1,bl1,c1;
	Label ba,fo;
	Panel pa1,p2,p3;

	colopat()
	{
		setSize(800,600);

		setLayout(new BorderLayout());
		pa1=new Panel(new GridLayout(5,2,10,10));
		p2=new Panel(new GridLayout(5,2,10,10));

		CheckboxGroup cbg=new CheckboxGroup();

		r=new Checkbox("red",cbg,false);
		g=new Checkbox("green",cbg,false);
		b=new Checkbox("blue",cbg,false);
		m=new Checkbox("megenta",cbg,false);
		y=new Checkbox("yellow",cbg,false);
		gr=new Checkbox("grey",cbg,false);
		p=new Checkbox("pink",cbg,false);
		w=new Checkbox("white",cbg,false);
		bl=new Checkbox("black",cbg,true);
		c=new Checkbox("cyan",cbg,false);
		ba=new Label("BACKGROUND COLORS",Label.CENTER);
		ba.setBackground(Color.pink);

		pa1.add(ba);
		pa1.add(r);
		pa1.add(b);
		pa1.add(m);
		pa1.add(y);
		pa1.add(gr);
		pa1.add(p);
		pa1.add(w);
		pa1.add(bl);
		pa1.add(c);
		add("West",pa1);

		ta=new TextArea(5,25);
		p3=new Panel(new GridLayout(3,1));
		p3.add(new Label("Text Area",1));
		p3.add(ta);
		add("Center",p3);

		r.addItemListener(new CheckBoxHandler(this));
		g.addItemListener(new CheckBoxHandler(this));
		b.addItemListener(new CheckBoxHandler(this));
		m.addItemListener(new CheckBoxHandler(this));
		y.addItemListener(new CheckBoxHandler(this));
		gr.addItemListener(new CheckBoxHandler(this));
		p.addItemListener(new CheckBoxHandler(this));
		w.addItemListener(new CheckBoxHandler(this));
		c.addItemListener(new CheckBoxHandler(this));
		bl.addItemListener(new CheckBoxHandler(this));

		CheckboxGroup cbg1=new CheckboxGroup();
		r1=new Checkbox("red",cbg1,false);
		g1=new Checkbox("green",cbg1,false);
		b1=new Checkbox("blue",cbg1,false);
		m1=new Checkbox("megenta",cbg1,false);
		y1=new Checkbox("yellow",cbg1,false);
		gr1=new Checkbox("grey",cbg1,false);
		p1=new Checkbox("pink",cbg1,false);
		w1=new Checkbox("white",cbg1,false);
		bl1=new Checkbox("black",cbg1,true);
		c1=new Checkbox("cyan",cbg1,false);
		fo=new Label("FOREGROUND COLORS");
		fo.setBackground(Color.pink);

		p2.add(fo);
		p2.add(c1);
		p2.add(g1);
		p2.add(b1);
		p2.add(m1);
		p2.add(y1);
		p2.add(gr1);
		p2.add(p1);
		p2.add(w1);
		p2.add(bl1);
		p2.add(c1);
		add("East",p2);

		r1.addItemListener(new CheckBoxHandler(this));
		g1.addItemListener(new CheckBoxHandler(this));
		b1.addItemListener(new CheckBoxHandler(this));
		m1.addItemListener(new CheckBoxHandler(this));
		y1.addItemListener(new CheckBoxHandler(this));
		gr1.addItemListener(new CheckBoxHandler(this));
		p1.addItemListener(new CheckBoxHandler(this));
		w1.addItemListener(new CheckBoxHandler(this));
		c1.addItemListener(new CheckBoxHandler(this));
		bl1.addItemListener(new CheckBoxHandler(this));
		c1.addItemListener(new CheckBoxHandler(this));

		addWindowListener(new mywindowAdapter(this));

		setVisible(true);
	}

	public static void main(String args[])
	{
		new colopat();
	}
}

class CheckBoxHandler implements ItemListener
{
 colopat cp;

CheckBoxHandler(colopat cp)
{
 this.cp=cp;
}
public void itemStateChanged(ItemEvent ie)
{
if(cp.r.getState())
cp.ta.setBackground(Color.red);
else if(cp.g.getState())
cp.ta.setBackground(Color.green);
else if(cp.b.getState())
cp.ta.setBackground(Color.blue);
else if(cp.m.getState())
cp.ta.setBackground(Color.magenta);
else if(cp.y.getState())
cp.ta.setBackground(Color.yellow);
else if(cp.gr.getState())
cp.ta.setBackground(Color.lightGray);
else if(cp.bl.getState())
cp.ta.setBackground(Color.black);
else if(cp.w.getState())
cp.ta.setBackground(Color.white);
else if(cp.p.getState())
cp.ta.setBackground(Color.pink);
else
cp.ta.setBackground(Color.cyan);


if(cp.r1.getState())
cp.ta.setForeground(Color.red);
else if(cp.g1.getState())
cp.ta.setForeground(Color.green);
else if(cp.b1.getState())
cp.ta.setForeground(Color.blue);
else if(cp.m1.getState())
cp.ta.setForeground(Color.magenta);
else if(cp.y1.getState())
cp.ta.setForeground(Color.yellow);
else if(cp.gr1.getState())
cp.ta.setForeground(Color.lightGray);
else if(cp.bl1.getState())
cp.ta.setForeground(Color.black);
else if(cp.w1.getState())
cp.ta.setForeground(Color.white);
else if(cp.p1.getState())
cp.ta.setForeground(Color.pink);
else
cp.ta.setForeground(Color.cyan);
}
}

class mywindowAdapter extends WindowAdapter
{
 colopat cp;

mywindowAdapter(colopat cp)
{
 this.cp=cp;
}
public void windowClosing(WindowEvent e)
{
  System.exit(0);
}
}


Use of Runtime Class

import java.io.*;
class test extends Thread
{
  public void  run()
  {
    Runtime r=Runtime.getRuntime();
		 Process p=null;
		 try
		   {
		 		 for(int i=0;i<=100;i++)
		 		  {
		 		    p=r.exec("net send  vishal how r u!");
		        //p.waitFor();
		        Thread.sleep(5000);
		 		  }
		   }
		 		 catch(Exception e)
		 		 {
		 		  System.out.println(e);
		 		 }
   }

  public static void main(String args[])
      {
      test t=new test();
      t.run();

     }

}



An example of using ByteBuffer

public static void main(String[] args)
    {
     // Create a ByteBuffer using a byte array
     byte[] bytes = new byte[10];
     ByteBuffer buf = ByteBuffer.wrap(bytes);
    
     // Create a non-direct ByteBuffer with a 10 byte capacity
     // The underlying storage is a byte array.
     buf = ByteBuffer.allocate(10);
    
     // Create a direct (memory-mapped) ByteBuffer with a 10 byte capacity.
     buf = ByteBuffer.allocateDirect(10);
    
     // Get the ByteBuffer's capacity
     int capacity = bbuf.capacity(); // 10
    
     // Use the absolute get(). This method does not affect the position.
     byte b = bbuf.get(5); // position=0
    
     // Set the position
     bbuf.position(5);
    
     // Use the relative get()
     b = bbuf.get();
    
     // Get the new position
     int pos = bbuf.position(); // 6
    
     // Get remaining byte count
     int rem = bbuf.remaining(); // 4
    
     // Set the limit
     bbuf.limit(7); // remaining=1
    
     // This convenience method sets the position to 0
     bbuf.rewind(); // remaining=7
    
     // Use the absolute put(). This method does not affect the position.
     bbuf.put((byte)0xFF); // position=0
    
     // Use the relative put()
     bbuf.put((byte)0xFF);
    
     // This convenience method sets the position to 0
     bbuf.rewind(); // remaining=7
    
    
     /*
     Use ByteBuffer to store Strings
     */
     // Create a character ByteBuffer
     CharBuffer cbuf = buf.asCharBuffer();
    
     // Write a string
     cbuf.put("str");
    
     // Convert character ByteBuffer to a string.
     // Uses characters between current position and limit so flip it first
     cbuf.flip();
     String s = cbuf.toString(); // str Does not affect position
    
     // Get a substring
     int start = 2; // start is relative to cbuf's current position
     int end = 5;
     CharSequence sub = cbuf.subSequence(start, end); // str
    
     /*
     Set Byte Ordering for a ByteBuffer
     */
     // Get default byte ordering
     ByteOrder order = buf.order(); // ByteOrder.BIG_ENDIAN
    
     // Put a multibyte value
     buf.putShort(0, (short)123);
     buf.get(0); // 0
     buf.get(1); // 123
    
     // Set to little endian
     buf.order(ByteOrder.LITTLE_ENDIAN);
    
     // Put a multibyte value
     buf.putShort(0, (short)123);
     buf.get(0); // 123
     buf.get(1); // 0
}


Automatically create and delete a file

import java.util.*;
import java.io.*;
public class ab extends TimerTask
    {
     static File file;
     public static void main(String[] args ) throws IOException
         {
         file = new File ("test.dat");
         if (! file.exists() )
             {
             file.createNewFile();
         }
         System.out.println("File Created");
         ab test = new ab();
         Timer t = new Timer ();
         t.schedule(test, 30*1000L);
         try
             {
             while (file.exists())
                 {
                 System.out.print('.');
                 Thread.sleep(1000);
             }
         }
         catch (InterruptedException ie)
             {
             System.out.println("Error");
         }
         System.exit(0);
     } //end of main
     public void run()
         {
         file.delete();
     }
} //end of public class ab


Byte to Binary Conversion

import java.io.*;

/**
* BinCat is a simple class for reading bytes and 
* writting them back out in binary representation.
*/
    public class BinCat {
     BufferedInputStream brIn;
     PrintStream psOut;
    
     public static int BYTES_PER_LINE = 4;
    
         public BinCat() {
         this(System.in,System.out);
     }
    
         public BinCat(InputStream in, OutputStream out) {
         brIn = new BufferedInputStream(in);
         if (out instanceof PrintStream)
         psOut = (PrintStream)out;
         else
         psOut = new PrintStream(out);
     }
    
     
    
         public void doit() {
         int ch, cv, bit, cnt;
             try {
                 for(cnt = 0, ch = brIn.read(); ch >= 0; ch = brIn.read()) {
                 cv = ((int)ch & 0x00ff);
                     for(bit = 7; bit >= 0; bit--) {
                     if ((cv & (2 << bit)) > 0)
                     psOut.print("1");
                     else
                     psOut.print("0");
                 }
                 cnt++;
                 if ((cnt % BYTES_PER_LINE) == 0) 
                 psOut.println("");
             }
         } catch (IOException e) { }
         return;
     }
    
     /**
     * Test main for BinCat 
     */
         public static void main(String args[]) {
         BinCat kitty;
         kitty = new BinCat();
         kitty.doit();
         System.exit(0);
     }
}


Card shuffling and dealing program

import javax.swing.*;
import java.awt.*;
import java.awt.event.*;

public class DeckOfCards extends JFrame 
     {
     private Card deck[];
     private int currentCard;
     private JButton dealButton, shuffleButton;
     private JTextField displayCard;
     private JLabel status;
    
     public DeckOfCards()
         {
         super( "Card Dealing Program" );
        
             String faces[] = { "Ace", "Deuce", "Three", "Four",
         "Five", "Six", "Seven", "Eight", "Nine", "Ten", "Jack", "Queen", "King" };
         String suits[] = { "Hearts", "Diamonds", "Clubs", "Spades" };
        
         deck = new Card[ 52 ];
         currentCard = -1;
        
         for ( int i = 0; i < deck.length; i++ )
         deck[ i ] = new Card( faces[ i % 13 ], suits[ i / 13 ] );
        
         Container c = getContentPane();
         c.setLayout( new FlowLayout() );
        
         dealButton = new JButton( "Deal card" );
         dealButton.addActionListener( new ActionListener() 
             { 
             public void actionPerformed( ActionEvent e )
                 {
                 Card dealt = dealCard();
                
                 if ( dealt != null ) 
                     {
                     displayCard.setText( dealt.toString() );
                     status.setText( "Card #: " + currentCard );
                 }
                 else 
                     {
                     displayCard.setText( "NO MORE CARDS TO DEAL" );
                     status.setText( "Shuffle cards to continue" );
                 }
             }
         } );
         c.add( dealButton );
        
         shuffleButton = new JButton( "Shuffle cards" );
         shuffleButton.addActionListener( new ActionListener() 
             {
             public void actionPerformed( ActionEvent e )
                 {
                 displayCard.setText( "SHUFFLING ..." );
                 shuffle();
                 displayCard.setText( "DECK IS SHUFFLED" );
             }
         });
         c.add( shuffleButton );
        
         displayCard = new JTextField( 20 );
         displayCard.setEditable( false );
         c.add( displayCard );
        
         status = new JLabel();
         c.add( status );
        
         setSize( 275, 120 ); // set the window size
         show(); // show the window
     }
    
     public void shuffle()
         {
         currentCard = -1;
        
         for ( int i = 0; i < deck.length; i++ ) 
             {
             int j = ( int ) ( Math.random() * 52 );
             Card temp = deck[ i ]; // swap
             deck[ i ] = deck[ j ]; // the
             deck[ j ] = temp; // cards
         }
        
         dealButton.setEnabled( true );
     }
    
     public Card dealCard()
         {
         if ( ++currentCard < deck.length )
         return deck[ currentCard ];
         else 
             {
             dealButton.setEnabled( false );
             return null;
         }
     }
    
     public static void main( String args[] )
         {
         DeckOfCards app = new DeckOfCards();
        
         app.addWindowListener( new WindowAdapter() 
             {
             public void windowClosing( WindowEvent e )
                 {
                 System.exit( 0 );
             }
         } );
     }
}

class Card 
     {
     private String face;
     private String suit;
    
     public Card( String f, String s )
         {
         face = f;
         suit = s;
     }
    
     public String toString() 
         { 
         return face + " of " + suit; 
     }
}


Check for Files

import java.io.*;
import java.util.*;

/**
* Create filelist.txt file by your self.
*/
    public class CheckFiles {
         public static void main(String[] argv) {
         CheckFiles cf = new CheckFiles();
         System.out.println("CheckFiles starting.");
         cf.getListFromFile();
         cf.getListFromDirectory();
         cf.reportMissingFiles();
         System.out.println("CheckFiles done.");
     }
     public String FILENAME = "filelist.txt";
    
     protected ArrayList listFromFile;
     protected ArrayList listFromDir = new ArrayList();
    
         protected void getListFromFile() {
         listFromFile = new ArrayList();
         BufferedReader is;
             try {
             is = new BufferedReader(new FileReader(FILENAME));
             String line;
             while ((line = is.readLine()) != null)
             listFromFile.add(line);
             } catch (FileNotFoundException e) {
             System.err.println("Can't open file list file.");
             return;
             } catch (IOException e) {
             System.err.println("Error reading file list");
             return;
         }
     }
    
     /** Get list of names from the directory */
         protected void getListFromDirectory() {
         listFromDir = new ArrayList();
         String[] l = new java.io.File(".").list();
         for (int i=0; i         listFromDir.add(l[i]);
     }
    
         protected void reportMissingFiles() {
         for (int i=0; i         if (!listFromDir.contains(listFromFile.get(i)))
         System.err.println("File " + listFromFile.get(i) + " missing.");
     }
}


Cloning an Object

    class MyClass implements Cloneable {
         public MyClass() {
     }
         public Object clone() {
         Cloneable theClone = new MyClass();
         // Initialize theClone.
         return theClone;
     }
}

//Here's some code to create a clone. 

MyClass myObject = new MyClass();
MyClass myObjectClone = (MyClass)myObject.clone();

//Arrays are automatically cloneable: 
int[] ints = new int[]{123, 234};
int[] intsClone = (int[])ints.clone();


Collection classifier

import java.util.*;

    public class CollectionClassifier2 {
         public static String classify(Collection c) {
         return (c instanceof Set ? "Set" :
         (c instanceof List ? "List" : "Unknown Collection"));
     }
    
         public static void main(String[] args) {
             Collection[] tests = new Collection[] {
             new HashSet(), // A Set
             new ArrayList(), // A List
             new HashMap().values() // Neither Set nor List
         };
        
         for (int i = 0; i < tests.length; i++)
         System.out.println(classify(tests[i]));
     }
}


Computing Fibonacci numbers

import java.io.*;
import java.math.BigInteger;

/**
* BigFib is a simple class for computing Fibonacci
* numbers, using the Java multi-precision integer
* class java.math.BigInteger.
*/
    public class BigFib {
    BigInteger last;
    BigInteger next;
    int n;
    
    /**
    * Create a new BigFib object, initialized to 0 on
    * the Fibonnacci sequence.
    */
        public BigFib () {
        n = 0;
        last = new BigInteger("0");
        next = new BigInteger("1");
    }
    
    /**
    * Compute c more Fibonnacci numbers, returning the
    * last one. Ideally, c should be even and >0.
    * If you want to print the numbers too, pass printTo
    * as non-null.
    */
        public BigInteger getFib(int c, PrintStream printTo) {
        BigInteger tmp;
            for( ; c > 0; c -= 2) {
            last = last.add(next); n++;
            if (printTo != null) printTo.println(" " + n + "\t" + last);
            next = next.add(last); n++;
            if (printTo != null) printTo.println(" " + n + "\t" + next);
        }
        if (c == 0) return next;
        else return last;
    }
    
    /**
    * Default limit for self-test.
    */
    public static final int defaultLimit = 100;
    
    /**
    * Self-test code, accepts an integer from the
    * command line, or uses the default limit.
    */
        public static void main(String args[]) {
        BigInteger answer;
        
        BigFib fib = new BigFib();
        
        System.out.println("\t\t Fibonacci sequence!");
        System.out.println("");
        
        System.out.println();
        int limit = 100;
            if (args.length > 0) {
            try { limit = Integer.parseInt(args[0]); }
                catch (NumberFormatException nfe) {
                System.err.println("Bad number, using default " + limit);
            }
                if (limit < 1) {
                limit = defaultLimit;
                System.err.println("Limit too low, using default " + limit);
            }
        }
        
        answer = fib.getFib(limit, System.out);
    }
}


Converting Between Strings (Unicode) and Other Character Set Encodings

public static void main(String args[])
    {
     // Create the encoder and decoder for ISO-8859-1
     Charset charset = Charset.forName("ISO-8859-1");
     CharsetDecoder decoder = charset.newDecoder();
     CharsetEncoder encoder = charset.newEncoder();
    
         try {
         // Convert a string to ISO-LATIN-1 bytes in a ByteBuffer
         // The new ByteBuffer is ready to be read.
         ByteBuffer bbuf = encoder.encode(CharBuffer.wrap("a string"));
        
         // Convert ISO-LATIN-1 bytes in a ByteBuffer to a character ByteBuffer and then to a string.
         // The new ByteBuffer is ready to be read.
         CharBuffer cbuf = decoder.decode(bbuf);
         String s = cbuf.toString();
         System.out.println(s);
         } catch (CharacterCodingException e) {
     }
}


Converting Non ASCII String to Hex

public static String toHexString(char c)
    {
     String rep;
     String temp;
     int low = c & 0x00FF;
     int high = c & 0xFF00;
     temp = Integer.toHexString(low);
     if( temp.length() == 1 )
     temp = "0" + temp;
    
     rep = temp;
    
     temp = Integer.toHexString(high);
     if( temp.length() == 1 )
     temp = "0" + temp;
    
     rep += temp;
     // If you want a space between bytes
     // rep += " " + temp;
    
     return rep;
}

public static void main(String a[])
    {
     String str = toHexString('b');
     System.out.println(str);
}


Converting String to Hex

public static String stringToHex(String base)
    {
     StringBuffer buffer = new StringBuffer();
     int intValue;
     for(int x = 0; x < base.length(); x++)
         {
         int cursor = 0;
         intValue = base.charAt(x);
         String binaryChar = new String(Integer.toBinaryString(base.charAt(x)));
         for(int i = 0; i < binaryChar.length(); i++)
             {
             if(binaryChar.charAt(i) == '1')
                 {
                 cursor += 1;
             }
         }
         if((cursor % 2) > 0)
             {
             intValue += 128;
         }
         buffer.append(Integer.toHexString(intValue) + " ");
     }
     return buffer.toString();
}

public static void main(String[] args)
    {
     String s = "The cat in the hat";
     System.out.println(s);
     System.out.println(test1.stringToHex(s));
}


Copy a File

import java.io.*;

     public class jCOPY {
         public static void main(String args[]){
             try {
             jCOPY j = new jCOPY();
             j.CopyFile(new File(args[0]),new File(args[1]));
         }
             catch (Exception e) {
             e.printStackTrace();
         }
     }
    
         public void CopyFile(File in, File out) throws Exception {
         FileInputStream fis = new FileInputStream(in);
         FileOutputStream fos = new FileOutputStream(out);
         byte[] buf = new byte[1024];
         int i = 0;
             while((i=fis.read(buf))!=-1) {
             fos.write(buf, 0, i);
         }
         fis.close();
         fos.close();
     }
}


Core java programmer

import java.io.*;
import java.sql.*;
import java.awt.event.*;
import java.awt.*;
import java.util.*;
import java.lang.*;
class History
    {
     
     public static void main(String args[])
         {
         
         
         String dd="asbdjs";
         while(dd.length()>0)
             {
             
                 try{
                 System.out.println("welcome to personal account information");
                 System.out.println("\n"+"enter q to quit");
                 System.out.println("\n");
                 System.out.println("enter account number :");
                 BufferedReader read=new BufferedReader(new InputStreamReader(System.in));
                 String sx=read.readLine();
                 if(sx.equals("q"))
                     {
                     System.exit(0);
                 }
                 else
                     {
                     try
                         {
                         Class.forName("sun.jdbc.odbc.JdbcOdbcDriver");
                     }
                     catch(ClassNotFoundException k)
                         {
                         System.out.println(k);
                     }
                     try
                         {
                         String url="jdbc:odbc:test";
                         int account=Integer.parseInt(sx);
                         String command="select * from Account where account like "+account;
                         Connection con=DriverManager.getConnection(url);
                         Statement s=con.createStatement();
                         ResultSet rs=s.executeQuery(command);
                         
                         
                         
                         while(rs.next())
                             { 
                        
                             String s1=rs.getString(1);
                             String s2=rs.getString(2);
                             int d1=rs.getInt(3);
                             int d2=rs.getInt(4);
                             int s3=rs.getInt(5);
                             
                             String data="account "+s1+"\n"+"date "+s2+" withdrawl "+d1+" deposit "+d2+"\n"+"balance "+s3+"\n";
                            
                             System.out.println(data);
                             System.out.println("\n");
                             
                         }
                         
                     } 
                     catch(SQLException k)
                         {
                         System.out.println(k);
                     }
                 }
                 
             }
                          
             catch(Exception w)
                 {
                 System.out.println(w);
             }
         }
    }
}


Count total number of occurences of a String in a text file

import java.io.File;
import java.io.BufferedReader;
import java.io.FileReader;
import java.util.StringTokenizer;

public class WordCounter {
	public static void main(String args[]) throws Exception {
		if(args.length != 1) {
			System.out.println("Invalid number of arguments!");
			return;
		}
		String sourcefile = args[0];
		String searchFor = "good bye";
		int searchLength=searchFor.length();
		String thisLine;
		try {
			BufferedReader bout = new BufferedReader (new FileReader (sourcefile));
			String ffline = null;
			int lcnt = 0;
			int searchCount = 0;
			while ((ffline = bout.readLine()) != null) {
				lcnt++;
				for(int searchIndex=0;searchIndex<ffline.length();) {
					int index=ffline.indexOf(searchFor,searchIndex);
					if(index!=-1) {
						System.out.println("Line number " + lcnt);
						searchCount++;
						searchIndex+=index+searchLength;
					} else {
						break;
					}
				}
			}
			System.out.println("SearchCount = "+searchCount);
		} catch(Exception e) {
			System.out.println(e);
		}
	}
}


Creating a File Lock on a File

public static void main(String[] args)
     {
         try {
         // Get a file channel for the file
         File file = new File("Test.java");
         FileChannel channel = new RandomAccessFile(file, "rw").getChannel();
        
         // Use the file channel to create a lock on the file.
         // This method blocks until it can retrieve the lock.
         FileLock lock = channel.lock();
        
         // Try acquiring the lock without blocking. This method returns
         // null or throws an exception if the file is already locked.
             try {
             lock = channel.tryLock();
             } catch (OverlappingFileLockException e) {
             // File is already locked in this thread or virtual machine
         }
        
         // Release the lock
         lock.release();
        
         // Close the file
         channel.close();
         } catch (Exception e) {
     }
}


Creating a Log file

import java.io.*;
 import java.text.*;
 import java.util.*;

     public class MsgLog {
     protected static String defaultLogFile = "c:\\msglog.txt";
    
         public static void write(String s) throws IOException {
         write(defaultLogFile, s);
     }
    
         public static void write(String f, String s) throws IOException {
         TimeZone tz = TimeZone.getTimeZone("EST"); // or PST, MID, etc ...
         Date now = new Date();
         DateFormat df = new SimpleDateFormat ("yyyy.mm.dd hh:mm:ss ");
         df.setTimeZone(tz);
         String currentTime = df.format(now);
        
         FileWriter aWriter = new FileWriter(f, true);
         aWriter.write(currentTime + " " + s + "\n");
         aWriter.flush();
         aWriter.close();
     }
 }


Creating a Shared File Lock on a File

public static void main(String[] args)
    {
         try {
         // Obtain a file channel
         File file = new File("filename");
         FileChannel channel = new RandomAccessFile(file, "rw").getChannel();
        
         // Create a shared lock on the file.
         // This method blocks until it can retrieve the lock.
         FileLock lock = channel.lock(0, Long.MAX_VALUE, true);
        
         // Try acquiring a shared lock without blocking. This method returns
         // null or throws an exception if the file is already exclusively locked.
             try {
             lock = channel.tryLock(0, Long.MAX_VALUE, true);
             } catch (OverlappingFileLockException e) {
             // File is already locked in this thread or virtual machine
         }
        
         // Determine the type of the lock
         boolean isShared = lock.isShared();
        
         // Release the lock
         lock.release();
        
         // Close the file
         channel.close();
         } catch (Exception e) {
     }
}


Currency Formatter

import java.text.*;
import java.io.*;

    class CurrencyFormatter{
    public static void main(String[] args)
    throws java.io.IOException, java.text.ParseException
        {
        
        BufferedReader inStream=
         new BufferedReader(new InputStreamReader(System.in));
        
        double currency;
        
        NumberFormat currencyFormatter=
         NumberFormat.getCurrencyInstance();
        
        NumberFormat numberFormatter=
         NumberFormat.getInstance();
        
        String currencyOut;
        
        System.out.println("Please enter a number to be formatted as currency:\n");
        
        currency=numberFormatter.parse(inStream.readLine()).doubleValue();
        
        currencyOut=currencyFormatter.format(currency);
        
        System.out.println("\n\nThe number formatted as currency is:\n");
        System.out.println(currencyOut);
        
    }//close main
    
}//close class


Demonstrating the File class

import java.awt.*;
import java.awt.event.*;
import java.io.*;
import javax.swing.*;

public class FileTest extends JFrame implements ActionListener
     {
     private JTextField enter;
     private JTextArea output;
     public FileTest()
         {
         super( "Testing class File" );
        
         enter = new JTextField( "Enter file or directory name here" );
         enter.addActionListener( this );
         output = new JTextArea();
         Container c = getContentPane();
         ScrollPane p = new ScrollPane();
         p.add( output );
         c.add( enter, BorderLayout.NORTH );
         c.add( p, BorderLayout.CENTER );
        
         setSize( 400, 400 );
         show();
     }
    
     public void actionPerformed( ActionEvent e )
         {
         File name = new File( e.getActionCommand() );
        
         if ( name.exists() )
             {
             output.setText( name.getName() + " exists\n" + ( name.isFile() ? "is a file\n" :
             "is not a file\n" ) +
             ( name.isDirectory() ? "is a directory\n" :
             "is not a directory\n" ) +
             ( name.isAbsolute() ? "is absolute path\n" :
             "is not absolute path\n" ) +
             "Last modified: " + name.lastModified() +
             "\nLength: " + name.length() +
             "\nPath: " + name.getPath() +
             "\nAbsolute path: " + name.getAbsolutePath() +
             "\nParent: " + name.getParent() );
            
             if ( name.isFile() )
                 {
                 try
                     {
                     RandomAccessFile r = new RandomAccessFile( name, "r" );
                     StringBuffer buf = new StringBuffer();
                     String text;
                     output.append( "\n\n" );
                    
                     while( ( text = r.readLine() ) != null )
                     buf.append( text + "\n" );
                    
                     output.append( buf.toString() );
                 }
                 catch( IOException e2 )
                     {
                     JOptionPane.showMessageDialog( this, "FILE ERROR",
                     "FILE ERROR", JOptionPane.ERROR_MESSAGE );
                 }
             }
             else if ( name.isDirectory() )
                 {
                 String directory[] = name.list();
                
                 output.append( "\n\nDirectory contents:\n");
                
                 for ( int i = 0; i < directory.length; i++ )
                 output.append( directory[ i ] + "\n" );
             }
         }
         else
             {
             JOptionPane.showMessageDialog( this, e.getActionCommand() + " Does Not Exist",
             "FILE ERROR", JOptionPane.ERROR_MESSAGE );
         }
     }
    
     public static void main( String args[] )
         {
         FileTest app = new FileTest();
        
         app.addWindowListener( new WindowAdapter()
             {
             public void windowClosing( WindowEvent e )
                 {
                 System.exit( 0 );
             }
         } );
     }
}


Demonstrating the logical operators

import javax.swing.*;

public class LogicalOperators
     {
     public static void main( String args[] )
         {
         JTextArea outputArea = new JTextArea( 17, 20 );
         JScrollPane scroller = new JScrollPane( outputArea );
         String output = "";
        
         output += "Logical AND (&&)" +
         "\nfalse && false: " + ( false && false ) +
         "\nfalse && true: " + ( false && true ) +
         "\ntrue && false: " + ( true && false ) +
         "\ntrue && true: " + ( true && true );
        
         output += "\n\nLogical OR (||)" +
         "\nfalse || false: " + ( false || false ) +
         "\nfalse || true: " + ( false || true ) +
         "\ntrue || false: " + ( true || false ) +
         "\ntrue || true: " + ( true || true );
        
         output += "\n\nBoolean logical AND (&)" +
         "\nfalse & false: " + ( false & false ) +
         "\nfalse & true: " + ( false & true ) +
         "\ntrue & false: " + ( true & false ) +
         "\ntrue & true: " + ( true & true );
        
         output += "\n\nBoolean logical inclusive OR (|)" +
         "\nfalse | false: " + ( false | false ) +
         "\nfalse | true: " + ( false | true ) +
         "\ntrue | false: " + ( true | false ) +
         "\ntrue | true: " + ( true | true );
        
         output += "\n\nBoolean logical exclusive OR (^)" +
         "\nfalse ^ false: " + ( false ^ false ) +
         "\nfalse ^ true: " + ( false ^ true ) +
         "\ntrue ^ false: " + ( true ^ false ) +
         "\ntrue ^ true: " + ( true ^ true );
        
         output += "\n\nLogical NOT (!)" +
         "\n!false: " + ( !false ) +
         "\n!true: " + ( !true );
        
         outputArea.setText( output );
         JOptionPane.showMessageDialog( null, scroller, "Truth Tables", JOptionPane.INFORMATION_MESSAGE );
         System.exit( 0 );
     }
}


Deserializing an Object

     public static void main(String args[]){
         try{
         // Deserialize from a file
         File file = new File("filename.ser");
         ObjectInputStream in = new ObjectInputStream(new FileInputStream(file));
         // Deserialize the object
         javax.swing.JButton button = (javax.swing.JButton) in.readObject();
         in.close();
        
         // Get some byte array data
         byte[] bytes = getBytesFromFile(file);
         // see e36 Reading a File into a Byte Array for the implementation of this method
        
         // Deserialize from a byte array
         in = new ObjectInputStream(new ByteArrayInputStream(bytes));
         button = (javax.swing.JButton) in.readObject();
         in.close();
     }
         catch (Exception ioe){
         ioe.printStackTrace();
     }
}


Detect ASCII values

BufferedReader inStream=new BufferedReader(new InputStreamReader(System.in));
int a;

for(int i=1;i<=26;i++)
     {
    
     System.out.println("please enter a character: ");
     a=(int)System.in.read();
     System.out.println("The integer code for " +(char)a+ " is " +(int)a);
     inStream.readLine();
}


Determining If Two Filename Paths Refer to the Same File

     public static void main(String args[]){
         try{
         File file1 = new File("gg/file.txt");
         File file2 = new File("file.txt");
        
         // Filename paths are not equal
         boolean b = file1.equals(file2); // false
        
         // Normalize the paths
             try {
             file1 = file1.getCanonicalFile(); // c:\almanac1.4\filename
             file2 = file2.getCanonicalFile(); // c:\almanac1.4\filename
             } catch (IOException e) {
         }
        
         // Filename paths are now equal
         b = file1.equals(file2); // true
     }
         catch (Exception ioe){
         ioe.printStackTrace();
     }
}


Determining When an Object Is No Longer Used

// Create the weak reference.
ReferenceQueue rq = new ReferenceQueue();
WeakReference wr = new WeakReference(object, rq);

// Wait for all the references to the object.
     try {
         while (true) {
         Reference r = rq.remove();
             if (r == wr) {
             // Object is no longer referenced.
         }
     }
     } catch (InterruptedException e) {
}


DOS Calculator

public class Calculator {
         public static abstract class Operation {
         private final String name;
        
         Operation(String name) { this.name = name; }
        
         public String toString() { return this.name; }
        
         // Perform arithmetic op represented by this constant
         abstract double eval(double x, double y);
        
         // Doubly nested anonymous classes
             public static final Operation PLUS = new Operation("+") {
             double eval(double x, double y) { return x + y; }
         };
             public static final Operation MINUS = new Operation("-") {
             double eval(double x, double y) { return x - y; }
         };
             public static final Operation TIMES = new Operation("*") {
             double eval(double x, double y) { return x * y; }
         };
             public static final Operation DIVIDE = new Operation("/") {
             double eval(double x, double y) { return x / y; }
         };
     }
    
     // Return the results of the specified calculation
         public double calculate(double x, Operation op, double y) {
         return op.eval(x, y);
     }
}

    public class CalcTest {
         public static void main(String args[]) {
         double x = Double.parseDouble(args[0]);
         double y = Double.parseDouble(args[1]);
        
         operate(x, Calculator.Operation.PLUS, y);
         operate(x, Calculator.Operation.MINUS, y);
         operate(x, Calculator.Operation.TIMES, y);
         operate(x, Calculator.Operation.DIVIDE, y);
     }
    
         static void operate(double x, Calculator.Operation op, double y) {
         Calculator c = new Calculator();
         System.out.println(x + " " + op + " " + y + " = " +
         c.calculate(x, op, y));
     }
}


Double Array

// Double-subscripted array example
import java.awt.*;
import javax.swing.*;

public class DoubleArray extends JApplet 
     {
     int grades[][] = { { 77, 68, 86, 73 }, { 96, 87, 89, 81 }, { 70, 90, 86, 81 } };
    
     int students, exams;
     String output;
     JTextArea outputArea;
    
     // initialize instance variables
     public void init()
         {
         students = grades.length;
         exams = grades[ 0 ].length;
        
         outputArea = new JTextArea();
         Container c = getContentPane();
         c.add( outputArea );
        
         // build the output string
         output = "The array is:\n";
         buildString();
        
         output += "\n\nLowest grade: " + minimum() +
         "\nHighest grade: " + maximum() + "\n";
        
         for ( int i = 0; i < students; i++ )
         output += "\nAverage for student " + i + " is " + average( grades[ i ] );
        
         outputArea.setFont( new Font( "Courier", Font.PLAIN, 12 ) );
         outputArea.setText( output );
     }
    
     // find the minimum grade
     public int minimum()
         {
         int lowGrade = 100;
        
         for ( int i = 0; i < students; i++ )
         for ( int j = 0; j < exams; j++ )
         if ( grades[ i ][ j ] < lowGrade )
         lowGrade = grades[ i ][ j ];
        
         return lowGrade;
     }
    
    
     // find the maximum grade
     public int maximum()
         {
         int highGrade = 0;
        
         for ( int i = 0; i < students; i++ )
         for ( int j = 0; j < exams; j++ )
         if ( grades[ i ][ j ] > highGrade )
         highGrade = grades[ i ][ j ];
        
         return highGrade;
     }
    
     // determine the average grade for a particular
     // student (or set of grades)
     public double average( int setOfGrades[] )
         {
         int total = 0;
        
         for ( int i = 0; i < setOfGrades.length; i++ )
         total += setOfGrades[ i ];
        
         return ( double ) total / setOfGrades.length;
     }
    
     // build output string
     public void buildString()
         {
         output += " "; // used to align column heads
        
         for ( int i = 0; i < exams; i++ )
         output += "[" + i + "] ";
        
         for ( int i = 0; i < students; i++ ) 
             {
             output += "\ngrades[" + i + "] ";
            
             for ( int j = 0; j < exams; j++ )
             output += grades[ i ][ j ] + " ";
         }
     }
}


Empty Directory

import java.io.*;
//DANGEROUS Program to empty a directory

    public class Empty {
         public static void main(String[] argv) {
             if (argv.length != 1) { // no progname in argv[0]
             System.err.println("usage: Empty dirname");
             System.exit(1);
         }
        
         File dir = new File(argv[0]);
             if (!dir.exists()) {
             System.out.println(argv[0] + " does not exist");
             return;
         }
        
         String[] info = dir.list();
             for (int i=0; i             File n = new File(argv[0] + dir.separator + info[i]);
             if (!n.isFile()) // skip ., .., other directories too
             continue;
             System.out.println("removing " + n.getPath());
             if (!n.delete())
             System.err.println("Couldn't remove " + n.getPath());
         }
     }
}


Fibonacci numbers (Right side)

import java.text.*;

    public class TestRight {
        public static void main(String args[]) {
        long f1 = 1;
        long f2 = 1;
        RightFormat rf = new RightFormat(20);
        
        System.out.println("Test of RightFormat(20) on Fibonacci numbers:");
            for(int ix = 0; ix < 32; ix++) {
            System.out.println(rf.format(Long.toString(f1)));
            System.out.println(rf.format(Long.toString(f2)));
            f1 = f1 + f2;
            f2 = f2 + f1;
        }
    }
}


File Input and Output Stream

import java.io.*;

    class FileIO {
    
         public static void main(String[] args) {
        
         System.out.println("Enter some numbers.");
         StreamTokenizer st = new StreamTokenizer(
         new BufferedReader(new InputStreamReader(System.in)));
         File f = new File("temp.out");
         int numberCount = 0;
             try {
             DataOutputStream dos = new DataOutputStream(
             new BufferedOutputStream(new FileOutputStream(f)));
                 while (st.nextToken() != st.TT_EOF) {
                     if (st.ttype == st.TT_NUMBER) {
                     dos.writeDouble(st.nval);
                     numberCount++;
                 }
             }
             System.out.println("numberCount=" + numberCount);
             dos.flush();
             dos.close();
             DataInputStream dis = new DataInputStream(
             new BufferedInputStream(new FileInputStream(f)));
                 for (int i = 0; i < numberCount; i++) {
                 System.out.println("number=" + dis.readDouble());
             }
             dis.close();
             } catch (IOException e) {
             System.err.println("FileIO: " + e);
             } finally {
             f.delete();
         }
     }
}

/* ............... Example compile and run(s)

% javac file.java

% java FileIO
Enter some numbers.
1 2 3
4.4 5.5
6.67
^D
numberCount=6
number=1.0
number=2.0
number=3.0
number=4.4
number=5.5
number=6.67
... end of example run(s) */


Find Numeric filter

class FindNumFilter {
     /** The value of this filter */
     int num;
     /** Constants for the comparison operators. */
     final int LE = -2, LT = -1, EQ = 0, GT = +1, GE = +2;
     /** The current comparison operator */
     int mode = EQ;
    
     /** Constructor */
         FindNumFilter(String input) {
             switch(input.charAt(0)) {
             case '+': mode = GT; break;
             case '-': mode = LT; break;
             case '=': mode = EQ; break;
             // No syntax for LE or GE yet.
         }
         num = Math.abs(Integer.parseInt(input));
     }
    
     /** Construct a NumFilter when you know its mode and value */
         FindNumFilter(int mode, int value) {
         this.mode = mode;
         num = value;
     }
         boolean accept(int n) {
             switch(mode) {
             case GT: return n > num;
             case EQ: return n == num;
             case LT: return n < num;
             default:
             System.err.println("UNEX CASE " + mode );
             return false;
         }
     }
}


Finding the maximum of three doubles

import java.awt.Container;
import javax.swing.*;
public class DoubleMax extends JApplet
     {
     public void init()
         {
         JTextArea outputArea = new JTextArea();
        
         String s1 = JOptionPane.showInputDialog( "Enter first floating-point value" );
         String s2 = JOptionPane.showInputDialog( "Enter second floating-point value" );
         String s3 = JOptionPane.showInputDialog( "Enter third floating-point value" );
        
         double number1 = Double.parseDouble( s1 );
         double number2 = Double.parseDouble( s2 );
         double number3 = Double.parseDouble( s3 );
        
         double max = maximum( number1, number2, number3 );
        
         outputArea.setText( "number1: " + number1 + "\nnumber2: " + number2 + "\nnumber3: " + number3 +
         "\nmaximum is: " + max );
        
         // get the applet's GUI component display area
         Container c = getContentPane();
        
         // attach outputArea to Container c
         c.add( outputArea );
     }
    
     // maximum method definition
     public double maximum( double x, double y, double z )
         {
         return Math.max( x, Math.max( y, z ) );
     }
}


Float datatype

// Static factory version of complex class
    public class Complex1 {
     private final float re;
     private final float im;
    
         private Complex1(float re, float im) {
         this.re = re;
         this.im = im;
     }
    
         public static Complex1 valueOf(float re, float im) {
         return new Complex1(re, im);
     }
    
         public static Complex1 valueOfPolar(float r, float theta) {
         return new Complex1((float) (r * Math.cos(theta)),
         (float) (r * Math.sin(theta)));
     }
    
     // Accessors with no corresponding mutators
     public float realPart() { return re; }
     public float imaginaryPart() { return im; }
    
         public Complex1 add(Complex1 c) {
         return new Complex1(re + c.re, im + c.im);
     }
    
         public Complex1 subtract(Complex1 c) {
         return new Complex1(re - c.re, im - c.im);
     }
    
         public Complex1 multiply(Complex1 c) {
         return new Complex1(re*c.re - im*c.im,
         re*c.im + im*c.re);
     }
    
         public Complex1 divide(Complex1 c) {
         float tmp = c.re*c.re + c.im*c.im;
         return new Complex1((re*c.re + im*c.im)/tmp,
         (im*c.re - re*c.im)/tmp);
     }
    
         public boolean equals(Object o) {
         if (o == this)
         return true;
         if (!(o instanceof Complex1))
         return false;
         Complex1 c = (Complex1)o;
         return (Float.floatToIntBits(re) ==
         Float.floatToIntBits(c.re)) &&
         (Float.floatToIntBits(im) ==
         Float.floatToIntBits(im));
     }
         public int hashCode() {
         int result = 17 + Float.floatToIntBits(re);
         result = 37*result + Float.floatToIntBits(im);
         return result;
     }
    
         public String toString() {
         return "(" + re + " + " + im + "i)";
     }
    
     // Public constants
     public static final Complex1 ZERO = new Complex1(0, 0);
     public static final Complex1 ONE = new Complex1(1, 0);
     public static final Complex1 I = new Complex1(0, 1);
    
         public static void main(String args[]) {
         Complex1 x = Complex1.valueOf(2, 3);
         Complex1 y = Complex1.valueOf(2,-3);
         System.out.println(x + " + " + y + " = " + x.add(y));
         System.out.println(x + " - " + y + " = " + x.subtract(y));
         System.out.println(x + " * " + y + " = " + x.multiply(y));
         System.out.println(x + " / " + y + " = " + x.divide(y));
         System.out.println(x.divide(y).multiply(y));
        
         Complex1 z = Complex1.valueOfPolar(1, (float) (Math.PI/4));
         Complex1 w = Complex1.valueOf(z.realPart(), -z.imaginaryPart());
         System.out.println(z + " * " + w + " = " + z.multiply(w));
     }
}


Formatting real number with Decimal

import java.text.*;
    public class NumFormat {
         public static void main (String[] args) {
         DecimalFormat science = new DecimalFormat("0.000E0");
         DecimalFormat plain = new DecimalFormat("0.0000");
        
             for(double d=100.0; d<140.0; d*=1.10) {
             System.out.println("Scientific: " + science.format(d) +
             " and Plain: " + plain.format(d));
         }
     }
}


Get hashtable keys from value

class keyhash
    {
     ResultSet rs;
     Hashtable hash;
     Vector v;
     static int i;
     Enumeration e;
     
    public static void main(String[] args) 
        { 
         keyhash gs = new keyhash();
         System.out.println("Hello World!");
         gs.getresultset();
    }
    
    public void getresultset()
        {
         Hashtable hash = new Hashtable();
         Vector v = new Vector();
         boolean connected = dbConnect();
        // Establish database connection here
         
         if(connected == true)
             { 
                 try{
                 PreparedStatement getArticles = db.con.prepareStatement
                 ("select * from xx where id = ?" 
                // sample query
                 
                 )
                 
                 
                 String artid;
                 getArticles.setInt(1, 4); 
                //This passes integer 4 as a parameter in 
                //the sql query
                 
                 
                 rs = getArticles.executeQuery();
                 
                 while (rs.next() == true)
                 
                     {
                     key = rs.getString(1);
                     
                     value = rs.getString(2);
                     
                     hash.put(key,value); 
                    //Hashtable populated
                     
                 }
                 
                 fillvector(hash,v);
                 getkeys(v); 
                 rs.close();
             }
                 catch(Exception ex){
                 
                 ex.printStackTrace();
             }
         }
         
     }
    public void fillvector(Hashtable hash,Vector v)
         {
         int j=0;
         boolean success;
         Enumeration e = hash.keys();
         while(e.hasMoreElements())
             { 
             String key = (String)(e.nextElement());
             String value = (String)hash.get(key);
             
             
             if(value.matches("*****"))
             //Put the value here to retrieve the
            // corresponding keys
                 {
                 v.addElement(key); 
                //Add the corresponding keys to the vector
             } 
         } 
         
     }
    public void getkeys(Vector v)
         {
         Enumeration ev= v.elements();
         while (ev.hasMoreElements())
             {
             System.out.println(ev.nextElement()); 
            // Print the keys related to a single value
         }
        
     }
    
}


Getting and Setting the Modification Time of a File or Directory

     public static void main(String args[]){
         try{
         File file = new File("file.txt");
        
         // Get the last modified time
         long modifiedTime = file.lastModified();
         // 0L is returned if the file does not exist
        
         // Set the last modified time
         long newModifiedTime = System.currentTimeMillis();
         boolean success = file.setLastModified(newModifiedTime);
             if (!success) {
             System.out.println("Operation failed");
         }
     }
         catch (Exception ioe){
         ioe.printStackTrace();
     }
}


Hash table

import java.util.*;


    public class SortHashtabledesc {
    
         public static void main(String[] args) {
         // Create and populate hashtable
         Hashtable ht = new Hashtable();
         ht.put("abc",new Double(3445.23));
         ht.put("xyz",new Double(2333.56));
         ht.put("pqr",new Double(3900.88));
         ht.put("mno",new Double(2449.00));
        
         // Sort hashtable.
         Vector v = new Vector(ht.keySet());
         Collections.sort(v, Collections.reverseOrder());
         
         // Display (sorted) hashtable.
             for (Enumeration e = v.elements(); e.hasMoreElements();) {
             String key = (String)e.nextElement();
             System.out.println(key+":"+ht.get(key));
             
             
             System.out.println();
         }
     }
}


Histogram printing program

import javax.swing.*;

public class Histogram
     {
     public static void main( String args[] )
         {
         int n[] = { 19, 3, 15, 7, 11, 9, 13, 5, 17, 1 };
         String output = "";
        
         output += "Element\tValue\tHistogram";
        
         for ( int i = 0; i < n.length; i++ )
             {
             output += "\n" + i + "\t" + n[ i ] + "\t";
            
             for ( int j = 1; j <= n[ i ]; j++ ) // print a bar
             output += "*";
         }
        
         JTextArea outputArea = new JTextArea( 11, 30 );
         outputArea.setText( output );
        
         JOptionPane.showMessageDialog( null, outputArea,"Histogram Printing Program",JOptionPane.INFORMATION_MESSAGE );
        
         System.exit( 0 );
     }
}


Information Servlet

// Import standard networking I/O packages
import java.net.*;
import java.io.*;

// Enumeration from util
import java.util.Enumeration;

// Import servlet packages
import javax.servlet.*;
import javax.servlet.http.*;

//
//
// InfoServlet
//
//
public class InfoServlet extends HttpServlet
{

	// Get method of servlet
	public void doGet (HttpServletRequest request, HttpServletResponse response) throws IOException
	{
		// Define content type
		response.setContentType("text/html");

		// Get information about client and server
		String clientBrowser = request.getHeader("User-Agent");
		String clientReferer = request.getHeader("Referer");
		String clientIP = request.getRemoteAddr();
		String serverOS = System.getProperty("os.name");
		String serverOSVersion = System.getProperty("os.version");
		String serverOSArch = System.getProperty("os.arch");
		
		// Get a servlet output stream for the response
		ServletOutputStream sout = response.getOutputStream();

		// Print header information
		sout.println ("<HTML><HEAD><TITLE>InfoServlet Response</TITLE></HEAD>");

		// Print body information
		sout.println ("<BODY BGCOLOR='white' COLOR='black'>");
		sout.println ("<H2>InfoServlet</H2><HR>");

		// Print information about client
		sout.println ("<H3>Client :-</H3>");

		// Check for presence of user-agent header field
		if (clientBrowser != null)
			sout.println ("User-Agent : " + clientBrowser + "<BR>");

		// Print IP address
		sout.println ("IP Address : " + clientIP + "<BR>");

		// Check for presence of referer header field
		if (clientReferer != null)
			sout.println ("Last page : " + clientReferer + "<BR>");

		// Print information about server
		sout.println ("<H3>Server</H3>");

		// Check to see if each property is valid, and if so, output it
		if ( (serverOS != null) & (serverOSVersion != null) )
			sout.println ("Server O/S : " + serverOS + " v" + serverOSVersion + "<BR>");
		
		if ( serverOSArch != null)
			sout.println ("Server CPU : " + serverOSArch + "<BR>");

		// Obtain a reference to the server context
		ServletContext context = getServletContext();

		if (context != null)
		{
			// Display information about servlets
			sout.println ("<h3> Servlet information </h3>");

			// Table for servlet info
			sout.println ("<table border='1' width=70%>");
			sout.println ("<tr><td><b>Servlet Name</b></td></tr>");
			for (Enumeration e = context.getServletNames(); e.hasMoreElements();)
			{
				// Get name of servlet
				String name = (String) e.nextElement();

				sout.println ("<tr> <td>");
				sout.println (name);
				sout.println ("</td> </tr>");
			}

			sout.println ("</table>");
		}
		else
			sout.println ("Could not determine servlet context");
		// Write footer information
		sout.println ("</BODY></HTML>");

		// Flush
		sout.flush();
	}

	// Post method of servlet
	public void doPost (HttpServletRequest request, HttpServletResponse response) throws IOException
	{
		// Perform same action as get method
		doGet(request, response);
	}

	public String getServletInfo()
	{
		return new String (
			"InfoServlet - reports information on client connection and server state"
		);
	}
}


Java Script Trim() function

    function fnTrim() {
     for(var L=0; L     if(this.charAt(L)!=" ")break;
     for(R=this.length-1; R>=0;R--)
     if(this.charAt(R)!=" ")break; 
     if(L==this.length)return ""; 
     return this.substring(L,R+1);
}
String.prototype.trim=fnTrim;
//**** For trim the crtl 

    if ((document.frm.crtlName.value).trim()=="") { 
    //*** Here ur code 
    
}


Kill - Remove files by name

import java.io.*;
//DANGEROUS Program to remove files matching a name in a directory
    public class KillFilesByName {
         public static void main(String[] argv) {
             if (argv.length != 2) {
             System.err.println("usage: KillFilesByName dirname pattern");
             System.exit(1);
         }
        
         File dir = new File(argv[0]);
             if (!dir.exists()) {
             System.out.println(argv[0] + " does not exist");
             return;
         }
         String patt = argv[1];
        
         String[] info = dir.list();
             for (int i=0; i             File n = new File(argv[0] + dir.separator + info[i]);
                 if (!n.isFile()) { // skip ., .., other directories, etc.
                 continue;
             }
                 if (info[i].indexOf(patt) == -1) { // name doesn't match
                 continue;
             }
             System.out.println("removing " + n.getPath());
             if (!n.delete())
             System.err.println("Couldn't remove " + n.getPath());
         }
     }
}


Linear Search of an Array

import java.awt.*;
import java.awt.event.*;
import javax.swing.*;

public class LinearSearch extends JApplet implements ActionListener 
     {
     JLabel enterLabel, resultLabel;
     JTextField enter, result;
     int a[];
    
     public void init()
         {
         Container c = getContentPane();
         c.setLayout( new FlowLayout() );
        
         enterLabel = new JLabel( "Enter integer search key" );
         c.add( enterLabel );
        
         enter = new JTextField( 10 );
         enter.addActionListener( this );
         c.add( enter );
        
         resultLabel = new JLabel( "Result" );
         c.add( resultLabel );
        
         result = new JTextField( 20 );
         result.setEditable( false );
         c.add( result );
        
         // create array and populate with even integers 0 to 198
         a = new int[ 100 ];
        
         for ( int i = 0; i < a.length; i++ )
         a[ i ] = 2 * i;
        
     }
    
     // Search "array" for the specified "key" value
     public int linearSearch( int array[], int key )
         {
         for ( int n = 0; n < a.length; n++ )
         if ( array[ n ] == key )
         return n;
        
         return -1;
     }
    
     public void actionPerformed( ActionEvent e )
         {
         String searchKey = e.getActionCommand();
        
         // Array a is passed to linearSearch even though it
         // is an instance variable. Normally an array will
         // be passed to a method for searching.
         int element = linearSearch( a, Integer.parseInt( searchKey ) );
        
         if ( element != -1 )
         result.setText( "Found value in element " + element );
         else
         result.setText( "Value not found" );
     }
}


List all '.java' files present in a directory.

import java.io.*;

public class FileExt
    {
     public static void main(String args[])
         {
         try
             {
             String[] filesList;
             File dir = new File(".");
             filesList= dir.list(new FileFilter());
            
             for (int i=0;i                 {
                 System.out.println(filesList[i]);
             }
         }
         catch(Exception e){}
     }
}

class FileFilter implements FilenameFilter
    {
     public boolean accept(File dir, String name)
         {
         return (name.endsWith(".java"));
     }
}


List of users in the network

import java.io.*;

public class NetworkUsers
    {
     public static void main(java.lang.String[] args)
         {
         StringBuffer strBuffer= new StringBuffer();
         String line= null;
         try
             {
             Process process= Runtime.getRuntime().exec("cmd");
             BufferedReader b=
             new BufferedReader(new InputStreamReader(process.getInputStream()));
             PrintWriter to= new PrintWriter(process.getOutputStream());
             to.println("net view");
             to.println("exit");
             to.close();
            
             try
                 {
                 // we need the process to end, else we'll get an
                 // illegal Thread State Exception
                 line= b.readLine();
                 while (line != null)
                     {
                     strBuffer.append(line+"
                    ");
                     line= b.readLine();
                 }
                 process.waitFor();
             }
             catch (InterruptedException inte)
                 {
                 System.out.println("InterruptedException Caught");
             }
            
             if (process.exitValue() == 0)
                 {
                 System.out.println(strBuffer.toString());
             }
            
             process.destroy();
            
         }
         catch (IOException ioe)
             {
             System.out.println(
             "IO Exception Occured While Messing aruond with Processes! -> " + ioe);
         }
     }
}


Listing All Available Unicode to Character Set Converters

public static void main(String args[])
    {
     Map map = Charset.availableCharsets();
     Iterator it = map.keySet().iterator();
         while (it.hasNext()) {
         // Get charset name
         String charsetName = (String)it.next();
         System.out.println("Charset Name "+charsetName);
        
         // Get charset
         Charset charset = Charset.forName(charsetName);
         System.out.println("Charset "+charset);
     }
}


Listing the File System Roots

     public static void main(String args[]){
         try{
         File[] roots = File.listRoots();
             for (int i=0; i             System.out.println((roots[i]));
         }
     }
         catch (Exception ioe){
         ioe.printStackTrace();
     }
}


Listing the Files or Subdirectories in a Directory

     public static void main(String args[]){
         try{
         File dir = new File("d:\\temp");
        
         String[] children = dir.list();
             if (children == null) {
             System.out.println("Directory does not exist or is not a Directory");
             } else {
                 for (int i=0; i                 // Get filename of file or directory
                 String filename = children[i];
                 System.out.println(filename);
             }
         }
        
         // It is also possible to filter the list of returned files.
         // This example does not return any files that start with `.'.
             FilenameFilter filter = new FilenameFilter() {
                 public boolean accept(File dir, String name) {
                 return !name.startsWith(".");
             }
         };
         children = dir.list(filter);
        
        
         // The list of files can also be retrieved as File objects
         File[] files = dir.listFiles();
        
         // This filter only returns directories
             FileFilter fileFilter = new FileFilter() {
                 public boolean accept(File file) {
                 return file.isDirectory();
             }
         };
         files = dir.listFiles(fileFilter);
     }
         catch (Exception ioe){
         ioe.printStackTrace();
     }
}


Making the application wait for some given time

import java.util.*;

public class WaitForSomeTime
    {
     public static void main(String args[])
         {
         WaitForSomeTime waitForSomeTime = new WaitForSomeTime();
         waitForSomeTime.myMethod();
     }
    
     public void myMethod()
         {
         System.out.println("Starting......");
        
         // pause for a while
         Thread thisThread = Thread.currentThread();
         try
             {
             thisThread.sleep(10000);
         }
         catch (Throwable t)
             {
             throw new OutOfMemoryError("An Error has occured");
         }
         System.out.println("Ending......");
        
     }
}


Method Overloading

import java.awt.Container;
import javax.swing.*;
public class MethodOverload extends JApplet
     {
     JTextArea outputArea;
     public void init()
         {
         outputArea = new JTextArea( 2, 20 );
         Container c = getContentPane();
         c.add( outputArea );
        
         outputArea.setText(
         "The square of integer 7 is " + square( 7 ) +
         "\nThe square of double 7.5 is " + square( 7.5 ) );
     }
    
     public int square( int x )
         {
         return x * x;
     }
    
     public double square( double y )
         {
         return y * y;
     }
}


Method Overriding

class A {
     String name() { return "A"; }
}

    class B extends A {
     String name() { return "B"; }
}

    class C extends A {
     String name() { return "C"; }
}

    public class Overriding {
         public static void main(String[] args) {
         A[] tests = new A[] { new A(), new B(), new C() };
        
         for (int i = 0; i < tests.length; i++)
         System.out.print(tests[i].name());
     }
}


Moving a File or Directory to Another Directory

     public static void main(String args[]){
         try{
         // File (or directory) to be moved
         File file = new File("file.txt");
        
         // Destination directory
         File dir = new File("gg");
        
         // Move file to new directory
         boolean success = file.renameTo(new File(dir, file.getName()));
             if (!success) {
             System.out.println("File moved");
         }
     }
         catch (Exception ioe){
         ioe.printStackTrace();
     }
}


NegativeLength Exception

import java.io.*;
    public class NegativeLengthException extends Exception {
    
     /** Test NegativeLengthException */
    
         public static void main(String[] args) {
             try {
             int lineLength = readLength();
                 for(int i=0; i                 System.out.print("*");
             }
             System.out.println();
             } catch (NegativeLengthException nle) {
             System.out.println("NegativeLengthException: " +
             nle.getMessage());
         }
     }
    
         public NegativeLengthException() {
         super("Negative dimensions not permitted.");
     }
    
         public NegativeLengthException(String message) {
         super(message);
     }
    
     // readLength catches IOExceptions locally but lets the
     // calling method handle NegativeLengthExceptions.
         private static int readLength() throws NegativeLengthException {
         BufferedReader in = new BufferedReader(
         new InputStreamReader(System.in));
         System.out.print("Enter length: ");
         System.out.flush();
         int len = 0;
             try {
             String line = in.readLine();
             len = Integer.parseInt(line);
                 if (len < 0) {
                 throw new NegativeLengthException();
             }
             } catch (IOException ioe) {
             System.out.println("Problem reading from keyboard");
         }
         return(len);
     }
}


Notepad

import java.awt.*;
import java.awt.event.*;
import java.awt.datatransfer.*;
import java.io.*;
public class Editor extends Frame
    {
     String filename;
     TextArea tx;
     Clipboard clip = getToolkit().getSystemClipboard();
     Editor()
         {
         setLayout(new GridLayout(1,1));
         tx = new TextArea();
         add(tx);
         MenuBar mb = new MenuBar();
         Menu F = new Menu("file");
         MenuItem n = new MenuItem("New");
         MenuItem o = new MenuItem("Open");
         MenuItem s = new MenuItem("Save");
         MenuItem e = new MenuItem("Exit");
         n.addActionListener(new New());
         F.add(n);
         o.addActionListener(new Open());
         F.add(o);
         s.addActionListener(new Save());
         F.add(s);
         e.addActionListener(new Exit());
         F.add(e);
         mb.add(F);
         Menu E = new Menu("Edit");
         MenuItem cut = new MenuItem("Cut");
         MenuItem copy = new MenuItem("Copy");
         MenuItem paste = new MenuItem("Paste");
         cut.addActionListener(new Cut());
         E.add(cut);
         copy.addActionListener(new Copy());
         E.add(copy);
         paste.addActionListener(new Paste());
         E.add(paste);
         mb.add(E);
         setMenuBar(mb);
        
         mylistener mylist = new mylistener();
         addWindowListener(mylist);
     }
     
     class mylistener extends WindowAdapter
         {
         public void windowClosing (WindowEvent e)
             {
             System.exit(0);
         }
     }
    
     class New implements ActionListener
         {
         public void actionPerformed(ActionEvent e)
             {
             tx.setText(" ");
             setTitle(filename);
         }
     }
     
     class Open implements ActionListener
         {
         public void actionPerformed(ActionEvent e)
             {
             FileDialog fd = new FileDialog(Editor.this, "select File",FileDialog.LOAD);
             fd.show();
             if (fd.getFile()!=null)
                 {
                 filename = fd.getDirectory() + fd.getFile();
                 setTitle(filename);
                 ReadFile();
             }
             tx.requestFocus();
         }
     }
     
     class Save implements ActionListener
         {
         public void actionPerformed(ActionEvent e)
             {
             FileDialog fd = new FileDialog(Editor.this,"Save File",FileDialog.SAVE);
             fd.show();
             if (fd.getFile()!=null)
                 {
                 filename = fd.getDirectory() + fd.getFile();
                 setTitle(filename);
                 try
                     {
                     DataOutputStream d = new DataOutputStream(new FileOutputStream(filename));
                     String line = tx.getText();
                     BufferedReader br = new BufferedReader(new StringReader(line));
                     while((line = br.readLine())!=null)
                         {
                         d.writeBytes(line + "\r\n");
                         d.close();
                     }
                 }
                 catch(Exception ex)
                     {
                     System.out.println("File not found");
                 }
                 tx.requestFocus();
             }
         }
     }
     
     class Exit implements ActionListener
         {
         public void actionPerformed(ActionEvent e)
             {
             System.exit(0);
         }
     }
     void ReadFile()
         {
         BufferedReader d;
         StringBuffer sb = new StringBuffer();
         try
             {
             d = new BufferedReader(new FileReader(filename));
             String line;
             while((line=d.readLine())!=null)
             sb.append(line + "\n");
             tx.setText(sb.toString());
             d.close();
         }
         catch(FileNotFoundException fe)
             {
             System.out.println("File not Found");
         }
         catch(IOException ioe){}
     }
    
     class Cut implements ActionListener
         {
         public void actionPerformed(ActionEvent e)
             {
             String sel = tx.getSelectedText();
             StringSelection ss = new StringSelection(sel);
             clip.setContents(ss,ss);
             tx.replaceRange(" ",tx.getSelectionStart(),tx.getSelectionEnd());
         }
     }
     
     class Copy implements ActionListener
         {
         public void actionPerformed(ActionEvent e)
             {
             String sel = tx.getSelectedText();
             StringSelection clipString = new StringSelection(sel);
             clip.setContents(clipString,clipString);
         }
     }
     
     class Paste implements ActionListener
         {
         public void actionPerformed(ActionEvent e)
             {
             Transferable cliptran = clip.getContents(Editor.this);
             try
                 {
                 String sel = (String) cliptran.getTransferData(DataFlavor.stringFlavor);
                 tx.replaceRange(sel,tx.getSelectionStart(),tx.getSelectionEnd());
             }
             catch(Exception exc)
                 {
                 System.out.println("not string flavour");
             }
         }
     }
     
     public static void main(String args[])
         {
         Frame f = new Editor();
         f.setSize(500,400);
         f.setVisible(true);
         f.show();
     }
}


NQueens Problem

class nQueens {
     static int N = 8;
     static int numSolutions = 0;
    
         static boolean safe(int row, int column, int[] board) {
        // Check whether it is safe to place a queen at row, column;
        // i.e., is board[column]=row a safe configuration?
             for (int j=1; j             if (board[column-j] == row ||
             board[column-j] == row-j ||
                 board[column-j] == row+j) {
                 return false;
             }
         }
         return true;
     }
    
         static void place(int column, int[] board) {
        // Place a queen in all safe positions of column c,
        // then try placing a queen in the next column.
        // If a position in column N is safe, print the board.
             for (int row = 1; row <= N; row++) {
             board[column] = row;
                 if (safe(row, column, board)) {
                 if (column==N) numSolutions++; // we have a solution
                 else place(column+1, board); // try next column
             }
             board[column] = 0; // unrecord that a queen was placed
         }
     }
    
         public static void main(String[] args) {
         System.out.println("nQueens loaded");
             try { // override default from command line argument if any
             N = Integer.parseInt(args[0]);
             } catch (ArrayIndexOutOfBoundsException e) {
             } catch (NumberFormatException e) {
         }
         System.out.println("nQueens: N=" + N);
         int[] board = new int[N+1]; // N+1 since we need board[1]...board[N]
         place(1, board);
         System.out.println("nQueens: numSolutions=" + numSolutions);
         System.out.println("nQueens done");
     }
}

/* ............... Example compile and run(s)

D:\>javac nque.java

D:\>java nQueens
nQueens loaded
nQueens: N=8
nQueens: numSolutions=92
nQueens done

D:\>java nQueens 10
nQueens loaded
nQueens: N=10
nQueens: numSolutions=724
nQueens done
... end of example run(s) */


Parsing and Formatting a Number into Binary, Octal, and Hexadecimal

int i = 1023;

// Parse and format to binary
i = Integer.parseInt("1111111111", 2); // 1023
String s = Integer.toString(i, 2); // 1111111111

// Parse and format to octal
i = Integer.parseInt("1777", 8); // 1023
s = Integer.toString(i, 8); // 1777

// Parse and format to decimal
i = Integer.parseInt("1023"); // 1023
s = Integer.toString(i); // 1023

// Parse and format to hexadecimal
i = Integer.parseInt("3ff", 16); // 1023
s = Integer.toString(i, 16); // 3ff

// Parse and format to arbitrary radix <= Character.MAX_RADIX
int radix = 32;
i = Integer.parseInt("vv", radix); // 1023
s = Integer.toString(i, radix); // vv


Passing arrays and individual array elements to methods

import java.awt.Container;
import javax.swing.*;

public class PassArray extends JApplet 
     {
     JTextArea outputArea;
     String output;
    
     public void init()
         {
         outputArea = new JTextArea();
         Container c = getContentPane();
         c.add( outputArea );
        
         int a[] = { 1, 2, 3, 4, 5 };
        
         output = "Effects of passing entire " + "array call-by-reference:\n" +
         "The values of the original array are:\n";
        
         for ( int i = 0; i < a.length; i++ )
         output += " " + a[ i ];
        
         modifyArray( a ); // array a passed call-by-reference
        
         output += "\n\nThe values of the modified array are:\n";
        
         for ( int i = 0; i < a.length; i++ )
         output += " " + a[ i ];
        
         output += "\n\nEffects of passing array " + "element call-by-value:\n" +
         "a[3] before modifyElement: " + a[ 3 ];
        
         modifyElement( a[ 3 ] );
        
         output += "\na[3] after modifyElement: " + a[ 3 ];
         outputArea.setText( output );
     }
    
     public void modifyArray( int b[] )
         {
         for ( int j = 0; j < b.length; j++ )
         b[ j ] *= 2;
     }
    
     public void modifyElement( int e )
         {
         e *= 2;
     }
}


Password Encryption class

/**
Usage: PasswordEncryption pe = new PasswordEncryption();
String pwd = pe.getEncriptedData(string_to_encrypt);
*/
    public class PasswordEncryption{
     public PasswordEncryption(){}
    
     /**
     This Method returns encripted String data
     */
         public String getEncriptedData(String str){
         str=str.substring(4)+str.substring(2,3)+str.substring(1,4)+str.substring(0,1);
         str=""+str.hashCode();
         String retString = "";
         int a=0;
             for(int i=0;i             retString = retString + str.valueOf(str.charAt(i));
                 if(i == 0){
                 retString=retString+(a+i);
                 a=a+25;
             }
                 else if(i == 1){
                 retString=retString+(a-i+7);
             }
                 else if(i == 3){
                 retString=retString+a+(i*10);
             }
         }
         return retString.trim();
     }
}


Print a calander

import java.io.*;

    class cal{
        public boolean isLeapYear(int y){
            if (y%4==0){
                 if(y%100==0) {
             if(y%400==0)return true;else return false;}
         else return true;}else
    return false;}
    public int startingDayOfYear(int y)
        {
        int ly,oy,rem;
        y%=400;
        ly=y/4;
        oy=y-ly;
        rem=(ly * 2)+oy+1;
        rem%=7;
        return rem;
        
    }
}
    class calander{
        public static void main(String args[]){
        String week[]={"sun","mon","tue","wed","thu","fri","sat"};
        String mon[]={"January","Febuary","March","April","May","June","July","August","September","October","November","December"};
        int md[]={31,28,31,30,31,30,31,31,30,31,30,31};
        int year[][][]=new int[12][7][6],m,i,j,q;
        cal c=new cal();
        System.out.println("ok");
        q=c.startingDayOfYear(Integer.parseInt(args[0])-1);
        if(c.isLeapYear(Integer.parseInt(args[0])))md[1]=29;
        //System.out.println(week[c.startingDayOfYear(Integer.parseInt(args[0])-1)]);
        for(m=0;m<=11;m++)
            {
            j=0;
            for(i=1;i<=md[m];i++)
                {
                year[m][q][j]=i;
                q++;if(q==7){q=0;j++;}
            }
        }
        
        for(m=0;m<=11;m++)
            {
            
            System.out.println(args[0]+", "+mon[m]);
            System.out.println("--------------------");
            for(i=0;i<=6;i++)
                {
                for(j=0;j<=5;j++)
                    {
                    if (year[m][i][j]==0)
                    System.out.print(" ");
                    else
                    System.out.print(year[m][i][j]+" ");
                }
                System.out.println();
            }
            System.out.println("--------------------");
            System.out.println();
        }
    }
}


Print total number of lines in a file

import java.io.*;

public class LineCount
{
	static public void main(String args[]) throws Exception
	{

		//Change the directory where the count files are existing
		File di   = new File("c:/count");
		File fl[] = di.listFiles();
		int j;
		int count=0;
		String str="";
		String totalinfo="";


		for (j=0; j < fl.length; j++)
		{
			System.out.println(""+fl[j]);
			FileInputStream fis = new FileInputStream(fl[j].getCanonicalFile());
			LineNumberReader l = new LineNumberReader(new BufferedReader(new InputStreamReader(fis)));
			while ((str=l.readLine())!=null)
			{
				count = l.getLineNumber();
			}
			System.out.println(count);

			String filename = fl[j].getName().toString();
			totalinfo = filename+"-------------"+count;

			FileOutputStream file = new FileOutputStream("c:/one.txt",true); //append
			PrintStream printtofile = new PrintStream(file);
			printtofile.println(totalinfo);
			printtofile.close();
			file.close();



			//BufferedWriter bw = new BufferedWriter(new FileWriter("c:/one.txt", false));
			//bw.write(totalinfo);
			//bw.newLine();
			//bw.close();


		}
	}
}


Printing an unsigned integer in bits

import java.awt.*;
import java.awt.event.*;
import javax.swing.*;

public class PrintBits extends JFrame 
     {
    
     public PrintBits()
         {
         super( "Printing bit representations for numbers" );
        
         Container c = getContentPane();
         c.setLayout( new FlowLayout() );
         c.add( new JLabel( "Enter an integer " ) );
         final JTextField output = new JTextField( 33 );
         JTextField input = new JTextField( 10 );
         input.addActionListener( new ActionListener() 
             {
             public void actionPerformed( ActionEvent e )
                 {
                 int val = Integer.parseInt( e.getActionCommand() );
                 output.setText( getBits( val ) );
             }
         });
         c.add( input );
        
         c.add( new JLabel( "The integer in bits is" ) );
         output.setEditable( false );
         c.add( output );
        
         setSize( 720, 70 );
         show();
     }
    
     private String getBits( int value )
         {
         int displayMask = 1 << 31;
         StringBuffer buf = new StringBuffer( 35 );
        
         for ( int c = 1; c <= 32; c++ ) 
             {
             buf.append( ( value & displayMask ) == 0 ? '0' : '1' );
             value <<= 1;
            
             if ( c % 8 == 0 )
             buf.append( ' ' );
         }
        
         return buf.toString();
     }
    
     public static void main( String args[] )
         {
         PrintBits app = new PrintBits();
         app.addWindowListener( new WindowAdapter() 
             {
             public void windowClosing( WindowEvent e )
                 {
                 System.exit( 0 );
             }
         } );
     }
}


Pullareddy janapana

import java.util.*;

    public class SortHashtable {
    
         public static void main(String[] args) {
         // Create and populate hashtable
         Hashtable ht = new Hashtable();
         ht.put("abc",new Double(3445.23));
         ht.put("xyz",new Double(2333.56));
         ht.put("pqr",new Double(3900.88));
         ht.put("mno",new Double(2449.00));
        
         // Sort hashtable.
         Vector v = new Vector(ht.keySet());
         Collections.sort(v);
         
         // Display (sorted) hashtable.
             for (Enumeration e = v.elements(); e.hasMoreElements();) {
             String key = (String)e.nextElement();
             System.out.println(key+":"+ht.get(key));
             System.out.println();
         }
     }
}


RandomFileTest

import java.io.*;
import java.util.*;

public class RandomFileTest
    { 
     public static void main(String[] args)
         {
         Employee[] staff = new Employee[3];
        
         staff[0] = new Employee("Carl Cracker", 75000,
         1987, 12, 15);
         staff[1] = new Employee("Harry Hacker", 50000,
         1989, 10, 1);
         staff[2] = new Employee("Tony Tester", 40000,
         1990, 3, 15);
        
         try
             { 
             // save all employee records to the file employee.dat
             DataOutputStream out = new DataOutputStream(new 
             FileOutputStream("employee.dat"));
             for (int i = 0; i < staff.length; i++)
             staff[i].writeData(out);
             out.close();
             
             // retrieve all records into a new array
             RandomAccessFile in 
             = new RandomAccessFile("employee.dat", "r"); 
             // compute the array size
             int n = (int)(in.length() / Employee.RECORD_SIZE);
             Employee[] newStaff = new Employee[n];
            
             // read employees in reverse order
             for (int i = n - 1; i >= 0; i--)
                 { 
                 newStaff[i] = new Employee();
                 in.seek(i * Employee.RECORD_SIZE);
                 newStaff[i].readData(in);
             }
             in.close();
             
             // print the newly read employee records
             for (int i = 0; i < newStaff.length; i++) 
             System.out.println(newStaff[i]);
         }
         catch(IOException e)
             { 
             e.printStackTrace(); 
         }
     }
}

class Employee
    {
     public Employee() {}
    
     public Employee(String n, double s, 
     int year, int month, int day)
         { 
         name = n;
         salary = s;
         GregorianCalendar calendar
         = new GregorianCalendar(year, month - 1, day);
         // GregorianCalendar uses 0 for January
         hireDay = calendar.getTime();
     }
    
     public String getName()
         {
         return name;
     }
    
     public double getSalary()
         {
         return salary;
     }
    
     public Date getHireDay()
         { 
         return hireDay;
     }
    
     public void raiseSalary(double byPercent)
         {
         double raise = salary * byPercent / 100;
         salary += raise;
     }
    
     public String toString()
         {
         return getClass().getName()
         + "[name=" + name
         + ",salary=" + salary
         + ",hireDay=" + hireDay
         + "]";
     }
    
     /**
     Writes employee data to a data output
     @param out the data output
     */
     public void raiseSalary(double byPercent)
         { 
         double raise = salary * byPercent / 100;
         salary += raise;
     }
    
     public String toString()
         { 
         return getClass().getName()
         + "[name=" + name
         + ",salary=" + salary
         + ",hireDay=" + hireDay
         + "]";
     }
    
     /**
     Writes employee data to a data output
     @param out the data output
     */
     public void writeData(DataOutput out) throws IOException
         {
         DataIO.writeFixedString(name, NAME_SIZE, out);
         out.writeDouble(salary);
        
         GregorianCalendar calendar = new GregorianCalendar();
         calendar.setTime(hireDay);
         out.writeInt(calendar.get(Calendar.YEAR));
         out.writeInt(calendar.get(Calendar.MONTH) + 1);
         out.writeInt(calendar.get(Calendar.DAY_OF_MONTH));
     }
    
     /**
     Reads employee data from a data input
     @param in the data input
     */
     public void readData(DataInput in) throws IOException
         {
         name = DataIO.readFixedString(NAME_SIZE, in);
         salary = in.readDouble();
         int y = in.readInt();
         int m = in.readInt();
         int d = in.readInt();
         GregorianCalendar calendar
         = new GregorianCalendar(y, m - 1, d);
         // GregorianCalendar uses 0 = January
         hireDay = calendar.getTime();
     }
    
     public static final int NAME_SIZE = 40;
     public static final int RECORD_SIZE
     = 2 * NAME_SIZE + 8 + 4 + 4 + 4;
    
     private String name;
     private double salary;
     private Date hireDay;
}

class DataIO
    {
     public static String readFixedString(int size,
     DataInput in) throws IOException
         { 
         StringBuffer b = new StringBuffer(size);
         int i = 0;
         boolean more = true;
         while (more && i < size)
             { 
             char ch = in.readChar();
             i++;
             if (ch == 0) more = false;
             else b.append(ch);
         }
         in.skipBytes(2 * (size - i));
         return b.toString();
     }
    
     public static void writeFixedString(String s, int size,
     DataOutput out) throws IOException
         {
         int i;
         for (i = 0; i < size; i++)
             { 
             char ch = 0;
             if (i < s.length()) ch = s.charAt(i);
             out.writeChar(ch);
         }
     }
}


Read Only file

import java.io.*;

    public class ReadOnly {
         public static void main(String[] a) throws IOException {
        
         File f = new File("f");
        
             if (!f.createNewFile()) {
             System.out.println("Can't create new file.");
             return;
         }
        
             if (!f.canWrite()) {
             System.out.println("Can't write new file!");
             return;
         }
        
             if (!f.setReadOnly()) {
             System.out.println("Grrr! Can't set file read-only.");
             return;
         }
        
             if (f.canWrite()) {
             System.out.println("Most immutable, captain!");
             System.out.println("But it still says canWrite() after setReadOnly");
             return;
             } else {
             System.out.println("Logical, captain!");
             System.out.println("canWrite() correctly returns false after setReadOnly");
         }
     }
}


Reading Key board Input

import java.io.*;

    class Tokenize {
    
         public static void main(String[] args) {
        
         System.out.println("Enter some numbers and words.");
         StreamTokenizer st = new StreamTokenizer(
         new BufferedReader(new InputStreamReader(System.in)));
             try { // case TT_EOL occurs only if execute st.eolIsSignificant(true);
                 while (st.nextToken() != st.TT_EOF) {
                     switch(st.ttype) {
                     case st.TT_NUMBER:
                     System.out.println("double number=" + st.nval);
                     break;
                     case st.TT_WORD:
                     System.out.println("word=" + st.sval);
                     break;
                     case st.TT_EOL:
                     System.out.println("end of line");
                     break;
                     default:
                     System.out.println("unrecognized character");
                     break;
                 }
             }
             System.out.println("end of file");
             } catch (IOException e) {
             System.err.println("Tokenize: " + e);
         }
     }
}

/* ............... Example compile and run(s)

% javac tokn.java

% java Tokenize
Enter some numbers and words.
1 2 3
double number=1.0
double number=2.0
double number=3.0
4.0 5.5 6.667
double number=4.0
double number=5.5
double number=6.667
1 abc def,ghi (jkl) !@#
double number=1.0
word=abc
word=def
unrecognized character
word=ghi
unrecognized character
word=jkl
unrecognized character
unrecognized character
unrecognized character
unrecognized character
^D
end of file
... end of example run(s) */


Reading UTF-8 Encoded Data

     public static void main(String args[]){
         try{
         BufferedReader in = new BufferedReader(
         new InputStreamReader(new FileInputStream("file.txt"), "UTF8"));
         String str = in.readLine();
         System.out.println(str);
     }
         catch (Exception ioe){
         ioe.printStackTrace();
     }
}


Recursive factorial method

import java.awt.*;
import javax.swing.*;
public class FactorialTest extends JApplet
     {
     JTextArea outputArea;
     public void init()
         {
         outputArea = new JTextArea();
        
         Container c = getContentPane();
         c.add( outputArea );
        
         // calculate the factorials of 0 through 10
         for ( long i = 0; i <= 10; i++ )
         outputArea.append( i + "! = " + factorial( i ) + "\n" );
     }
    
    
     // Recursive definition of method factorial
     public long factorial( long number )
         {
         if ( number <= 1 ) // base case
         return 1;
         else
         return number * factorial( number - 1 );
     }
}


Remove last line from file

import java.io.*;

    public class DelLstLine{
         public static void main(String[] arg){
             try{
             RandomAccessFile raf = new RandomAccessFile("RandFile.txt", "rw");
             long length = raf.length();
             System.out.println("File Length="+raf.length());
             //supposing that last line is of 8 
             raf.setLength(length - 8);
             System.out.println("File Length="+raf.length());
             raf.close();
             }catch(Exception ex){
             ex.printStackTrace();
         }
     }//end of psvm
}//class ends


Renaming a file

import java.io.*;

    public class Rename {
         public static void main(String[] argv) throws IOException {
        
         // Construct the file object. Does NOT create a file on disk!
         File f = new File("Rename.java'"); // backup of this source file.
        
         // Rename the backup file to "junk.dat"
         // Renaming requires a File object for the target.
         f.renameTo(new File("junk.dat"));
     }
}


Repeat a char for the specified number of times

public class Test1
    {
     public static void main(String args[])
         {
         String ht = repeat('X',7);
         System.out.println(ht);
     }
    
     public static String repeat(char c,int i)
         {
         String tst = "";
         for(int j = 0; j < i; j++)
             {
             tst = tst+c;
         }
         return tst;
     }
}


Replace a line or word in a file

import java.io.*;

public class BTest
    {
     public static void main(String args[])
         {
         try
             {
             File file = new File("file.txt");
             BufferedReader reader = new BufferedReader(new FileReader(file));
             String line = "", oldtext = "";
             while((line = reader.readLine()) != null)
                 {
                 oldtext += line + "\r\n";
             }
             reader.close();
             // replace a word in a file
             //String newtext = oldtext.replaceAll("drink", "Love");
            
             //To replace a line in a file
             String newtext = oldtext.replaceAll("This is test string 20000", "blah blah blah");
            
             FileWriter writer = new FileWriter("file.txt");
             writer.write(newtext);writer.close();
         }
         catch (IOException ioe)
             {
             ioe.printStackTrace();
         }
     }
}

file.txt
I drink Java
I sleep Java
This is test string 1
This is test string 20000


Report File Status in Java

import java.io.*;
import java.util.*;

//Report on a file's status in Java

    public class FileStatus {
         public static void main(String[] argv) throws IOException {
        
         // Ensure that a filename (or something) was given in argv[0]
             if (argv.length == 0) {
             System.err.println("Usage: Status filename");
             System.exit(1);
         }
             for (int i = 0; i< argv.length; i++) {
             status(argv[i]);
         }
     }
    
         public static void status(String fileName) throws IOException {
         System.out.println("---" + fileName + "---");
        
         // Construct a File object for the given file.
         File f = new File(fileName);
        
         // See if it actually exists
             if (!f.exists()) {
             System.out.println("file not found");
             System.out.println(); // Blank line
             return;
         }
         // Print full name
         System.out.println("Canonical name " + f.getCanonicalPath());
         // Print parent directory if possible
         String p = f.getParent();
             if (p != null) {
             System.out.println("Parent directory: " + p);
         }
         // Check if the file is readable
             if (f.canRead()) {
             System.out.println("File is readable.");
         }
         // Check if the file is writable
             if (f.canWrite()) {
             System.out.println("File is writable.");
         }
         // Report on the modification time.
         Date d = new Date();
         d.setTime(f.lastModified());
         System.out.println("Last modified " + d);
        
         // See if file, directory, or other. If file, print size.
             if (f.isFile()) {
             // Report on the file's size
             System.out.println("File size is " + f.length() + " bytes.");
             } else if (f.isDirectory()) {
             System.out.println("It's a directory");
             } else {
             System.out.println("I dunno! Neither a file nor a directory!");
         }
        
         System.out.println(); // blank line between entries
     }
}


Reverse, Fill, Copy, Min and Max

import java.util.*;

public class FCMM
     {
     private String letters[] = { "P", "C", "M" }, lettersCopy[];
     private List theList, copyList;
    
     public FCMM()
         {
         theList = Arrays.asList( letters ); // get List
         lettersCopy = new String[ 3 ];
         copyList = Arrays.asList( lettersCopy );
        
         System.out.println( "Printing initial statistics: " );
         printStatistics( theList );
        
         Collections.reverse( theList ); // reverse order
         System.out.println( "\nPrinting statistics after " + "calling reverse: " );
         printStatistics( theList );
        
         Collections.copy( copyList, theList ); // copy List
         System.out.println( "\nPrinting statistics after " + "copying: " );
         printStatistics( copyList );
        
         System.out.println( "\nPrinting statistics after " + "calling fill: " );
         Collections.fill( theList, "R" );
         printStatistics( theList );
     }
    
     private void printStatistics( List listRef )
         {
         System.out.print( "The list is: " );
         for ( int k = 0; k < listRef.size(); k++ )
         System.out.print( listRef.get( k ) + " " );
        
         System.out.print( "\nMax: " + Collections.max( listRef ) );
         System.out.println( " Min: " +
         Collections.min( listRef ) );
     }
    
     public static void main( String args[] )
         {
         new FCMM();
     }
}


Run external application in java

//This is main program

import java.io.*;

    public class MainPro{
    
     public static runExtApp runapp =new runExtApp();
     
         public static void main(String[]args){
         
         runapp.runfunc();
         
     }//end void main
    
     
}//end inheritancetest


//this class is called from main program
import java.io.*;

    public class runExtApp{
     
         public void runfunc(){
         
             try{
             Runtime.getRuntime().exec("notepad");
             }catch(IOException e){ //end try 5
             System.err.println(e);
         }//end try catch block 7
    }//end runfunc
    
}//end main class runExtApp


Serialize an Object to a File

import java.util.Vector;
import java.io.*;

     public class Queue extends Vector {
     /*
     ** FIFO, first in first out
     */
         Queue() {
         super();
     }
     
         void put(Object o) {
         addElement(o);
     }
    
         Object get() {
         if (isEmpty()) return null;
         Object o = firstElement();
         removeElement(o);
         return o;
     }
    
         Object peek() {
         if (isEmpty()) return null;
         return firstElement();
     }
 }

//To serialize (save the Queue state to a file) :

     public static void main(String args[]) {
     Queue theQueue;
      
     theQueue = new Queue();
     theQueue.put("element 1");
     theQueue.put("element 2");
     theQueue.put("element 3");
     theQueue.put("element 4");
     System.out.println(theQueue.toString());
      
     // serialize the Queue
     System.out.println("serializing theQueue");
         try {
         FileOutputStream fout = new FileOutputStream("thequeue.dat");
         ObjectOutputStream oos = new ObjectOutputStream(fout);
         oos.writeObject(theQueue);
         oos.close();
     }
     catch (Exception e) { e.printStackTrace(); }
}

//To unserialize (to load a previously saved Queue) :

     public static void main(String args[]) {
     Queue theQueue;
        
     theQueue = new Queue();
        
     // unserialize the Queue
     System.out.println("unserializing theQueue");
         try {
         FileInputStream fin = new FileInputStream("thequeue.dat");
         ObjectInputStream ois = new ObjectInputStream(fin);
         theQueue = (Queue) ois.readObject();
         ois.close();
     }
     catch (Exception e) { e.printStackTrace(); }
         
     System.out.println(theQueue.toString());    
}


Serializing an Object

     public static void main(String args[]){
         try{
         Object object = new javax.swing.JButton("push me");
        
         // Serialize to a file
         ObjectOutput out = new ObjectOutputStream(new FileOutputStream("filename.ser"));
         out.writeObject(object);
         out.close();
        
         // Serialize to a byte array
         ByteArrayOutputStream bos = new ByteArrayOutputStream() ;
         out = new ObjectOutputStream(bos) ;
         out.writeObject(object);
         out.close();
        
         // Get the bytes of the serialized object
         byte[] buf = bos.toByteArray();
     }
         catch (Exception ioe){
         ioe.printStackTrace();
     }
}


Shifted, scaled random integers

import javax.swing.JOptionPane;
public class RandomInt 
     {
     public static void main( String args[] )
         {
         int value;
         String output = "";
        
         for ( int i = 1; i <= 20; i++ ) 
             {
             value = 1 + (int) ( Math.random() * 6 );
             output += value + " ";
            
             if ( i % 5 == 0 )
             output += "\n";
         }
        
         JOptionPane.showMessageDialog( null, output, "20 Random Numbers from 1 to 6", JOptionPane.INFORMATION_MESSAGE );
         
         System.exit( 0 );
     }
}


Sort an Array

import java.awt.*;
import javax.swing.*;

public class BubbleSort extends JApplet 
    {
     public void init()
         {
         JTextArea outputArea = new JTextArea();
         Container c = getContentPane();
         c.add( outputArea );
        
         int a[] = { 2, 6, 4, 8, 10, 12, 89, 68, 45, 37 };
        
         String output = "Data items in original order\n";
        
         for ( int i = 0; i < a.length; i++ )
         output += " " + a[ i ];
        
         bubbleSort( a );
        
         output += "\n\nData items in ascending order\n";
        
         for ( int i = 0; i < a.length; i++ )
         output += " " + a[ i ];
        
         outputArea.setText( output );
     }
    
     // sort the elements of an array with bubble sort
     public void bubbleSort( int b[] )
         {
         for ( int pass = 1; pass < b.length; pass++ ) // passes
         for ( int i = 0; i < b.length - 1; i++ ) // one pass
         if ( b[ i ] > b[ i + 1 ] ) // one comparison
         swap( b, i, i + 1 ); // one swap
     }
     // swap two elements of an array
     public void swap( int c[], int first, int second )
         {
         int hold; // temporary holding area for swap
        
         hold = c[ first ];
         c[ first ] = c[ second ];
         c[ second ] = hold;
     }
}


Sorting Numbers

class Sorter
    {
    
     static void printArray(int[] a)
         {
         for (int i = 0; i < a.length; i++) System.out.print(" " + a[i]);
         System.out.print("\n");
     }
    
     static void sortArray(int[] a)
         {
         for (int i = 0; i < a.length - 1; i++)
         for (int j = i + 1; j < a.length; j++)
         if (a[i] > a[j])
             {
             int temp = a[i]; a[i] = a[j]; a[j] = temp;
         }
     }
    
     public static void main(String[] args)
         {
         int n;
         n = Integer.parseInt(args[0]);
         int[] nums = new int[n];
         for (int i = 0; i < n; i++) nums[i] = Integer.parseInt(args[i+1]);
         System.out.println("Original numbers:");
         printArray(nums);
         sortArray(nums);
         System.out.println("Sorted numbers:");
         printArray(nums);
     }
}

/* How to use this Example

D:\>javac sort.java

D:\>java Sorter 5 -10 2 0 100 -77
Original numbers:
-10 2 0 100 -77
Sorted numbers:
-77 -10 0 2 100

D:\>java Sorter 5 5 4 typo 2 1
java.lang.NumberFormatException: typo
at java.lang.Integer.parseInt(Integer.java:229)
at java.lang.Integer.parseInt(Integer.java:276)
at Sorter.main(sort.java:20)
... end of example run(s) */


Sorting

import java.io.*;
class A
    {
     public static void main(String args[])throws Exception
         {
         DataInputStream dis=new DataInputStream(System.in);
         System.out.println("Enter How many numbers to sort ");
         String s=dis.readLine();
         int l=Integer.valueOf(s).intValue();
         System.out.println("Please Enter "+l+" integers to sort");
         int a[]=new int[l];
         for (int i=0;i             {
             s=dis.readLine();
             int m=Integer.valueOf(s).intValue();
             a[i]=m;
         }
         System.out.println("Here is the sorted numbers ");
         for(int j=0;j         for(int k=j+1;k             {
             if(a[j]                 {
                 int t;
                 t=a[j];
                 a[j]=a[k];
                 a[k]=t;
             }
         }
         for(int x=0;x         System.out.println(a[x]);
        
     }
}


String class

public final class StringEx
    {
     public static void main(String[] args)
         {
         String s1 = "java";
         String s2 = "JAVA";
         char charArray[] = { 'b', 'i', 'r', 't', 'h', ' ', 'd', 'a', 'y' };
         byte byteArray[] = { (byte) 'n', (byte) 'e', (byte) 'w', (byte) ' ', (byte) 'y', (byte) 'e', (byte) 'a', (byte) 'r' };
         StringBuffer buffer;
         String s11, s22, s3, s4, s5, s6;
        
         //comparings
         System.out.println(s1.equals(s2));
         System.out.println(s1.equalsIgnoreCase(s2));
        
         //concating
         System.out.println(s1.concat(s2));
        
         //Constructors
         s11 = new String();
         s22 = new String( s1 );
         s3 = new String( charArray );
         s4 = new String( charArray, 6, 3 );
         s5 = new String( byteArray, 4, 4 );
         s6 = new String( byteArray );
        
         //print hash code for string
         System.out.println(s1.hashCode());
         System.out.println(s2.hashCode());
        
         //indexOf methods
         System.out.println(s1.indexOf('g'));
         System.out.println(s1.indexOf('a',1));
         System.out.println(s1.indexOf('$'));
         System.out.println(s1.lastIndexOf('a'));
         System.out.println(s1.indexOf("ja"));
         System.out.println(s1.lastIndexOf("ja"));
        
         //using intern()
         System.out.println(s1.intern());
         System.out.println(s2.intern());
        
         //length of a string
         System.out.println(s1.length());
        
         //chatAt of a string
         System.out.println(s1.charAt(1));
        
         //getChars() method
         char charArrays[] = new char[5];
         s1.getChars(0,5,charArrays,0);
         System.out.println(charArrays);
        
         //using replace method
         System.out.println(s1.replace('j','J'));
         System.out.println(s1.replaceAll("a","A"));
        
         //toLower and toUpper case conversion
         System.out.println(s2.toLowerCase());
         System.out.println(s1.toUpperCase());
        
         //trim() method
         System.out.println(s1.trim());
        
         //toString()
         System.out.println(s2.toString());
        
         //toCharArray()
         char charArrays1[] = s1.toCharArray();
         System.out.println(charArrays1);
        
         //String starts with and ends with
         System.out.println(s1.startsWith("j"));
         System.out.println(s1.endsWith("a"));
        
         //valueOf() method
         char charAr[] = { 'a', 'b', 'c', 'd', 'e', 'f' };
         boolean b = true;
         char c = 'Z';
         int i = 7;
         long l = 10000000;
         float f = 2.5f;
         double d = 33.333;
         Object o = "hello"; // Assign to an Object reference
         String output;
        
         output = "char array = " + String.valueOf( charAr ) + "\npart of char array = " +
         String.valueOf( charAr, 3, 3 ) +
         "\nboolean = " + String.valueOf( b ) +
         "\nchar = " + String.valueOf( c ) +
         "\nint = " + String.valueOf( i ) +
         "\nlong = " + String.valueOf( l ) +
         "\nfloat = " + String.valueOf( f ) +
         "\ndouble = " + String.valueOf( d ) +
         "\nObject = " + String.valueOf( o );
        
         //String substring() method
         System.out.println(s1.substring(2));
         System.out.println(s1.substring(2,5));
     }
}


StringBuffer class

public class StringBufferAppend
     {
     public static void main( String args[] )
         {
         Object o = "hello";
         String s = "good bye";
         char charArray[] = { 'a', 'b', 'c', 'd', 'e', 'f' };
         boolean b = true;
         char c = 'Z';
         int i = 7;
         long l = 10000000;
         float f = 2.5f;
         double d = 33.333;
         StringBuffer buf = new StringBuffer();
        
         buf.append( o );
         buf.append( " " );
         buf.append( s );
         buf.append( " " );
         buf.append( charArray );
         buf.append( " " );
         buf.append( charArray, 0, 3 );
         buf.append( " " );
         buf.append( b );
         buf.append( " " );
         buf.append( c );
         buf.append( " " );
         buf.append( i );
         buf.append( " " );
         buf.append( l );
         buf.append( " " );
         buf.append( f );
         buf.append( " " );
         buf.append( d );
        
         //capacity
         buf.ensureCapacity( 75 );
         buf.capacity();
        
         //length
         buf.setLength( 10 );
         buf.length();
        
         //char methods
         char charArr[] = new char[ buf.length() ];
         buf.getChars( 0, buf.length(), charArr, 0 );
         buf.setCharAt( 0, 'H' );
         buf.setCharAt( 6, 'T' );
        
         //reverse
         buf.reverse();
        
         //constructors
         StringBuffer buf1, buf2, buf3;
        
         buf1 = new StringBuffer();
         buf2 = new StringBuffer( 10 );
         buf3 = new StringBuffer( "hello" );
        
         //insert and delete
         buf.insert( 0, o );
         buf.insert( 0, " " );
         buf.deleteCharAt( 10 ); // delete 5 in 2.5
         buf.delete( 2, 6 ); // delete .333 in 33.333
     }
}


StringTokenizer class

import javax.swing.*;
import java.util.*;
import java.awt.*;
import java.awt.event.*;

public class TokenTest extends JFrame
     {
     private JLabel prompt;
     private JTextField input;
     private JTextArea output;
    
     public TokenTest()
         {
         super( "Testing Class StringTokenizer" );
        
         Container c = getContentPane();
         c.setLayout( new FlowLayout() );
        
         prompt = new JLabel( "Enter a sentence and press Enter" );
         c.add( prompt );
        
         input = new JTextField( 20 );
         input.addActionListener( new ActionListener()
             {
             public void actionPerformed( ActionEvent e )
                 {
                 String stringToTokenize = e.getActionCommand();
                 StringTokenizer tokens = new StringTokenizer( stringToTokenize );
                
                 output.setText( "Number of elements: " + tokens.countTokens() + "\nThe tokens are:\n" );
                
                 while ( tokens.hasMoreTokens() )
                 output.append( tokens.nextToken() + "\n" );
             }
         });
         c.add( input );
        
         output = new JTextArea( 10, 20 );
         output.setEditable( false );
         c.add( new JScrollPane( output ) );
        
         setSize( 275, 260 ); // set the window size
         show(); // show the window
     }
    
     public static void main( String args[] )
         {
         TokenTest app = new TokenTest();
        
         app.addWindowListener( new WindowAdapter()
             {
             public void windowClosing( WindowEvent e )
                 {
                 System.exit( 0 );
             }
         });
     }
}


Testing a code

import javax.swing.*;
public class abc extends JFrame implements ActionListener
    {
    JPanel p;
    JButton b;
    JTextField t;
    JLabel l,i;
    
    public abc()
        {
        p=new JPanel();
        b=new JButton("click");
        t=new JTextField(15);
        l=new JLabel("enter ur id");
        
        
        p.add(l);
        p.add(t);
        p.add(b);
        getContentPane().add(p);
        setSize(400,400);
        setVisible(true);
        b.addActionListener(this);
    }
    
    public static void main(String []aa)
        {
        abc a= new abc();
    }
    
    public void actionPerformed(ActionEvent e)
        {
        Object o= e.getSource();
        if(o==b)
            {
            i=new JLabel("U Have Entered Wrong Value");
        }
    }
}


Throwing User defined Exception

public class MyException extends Exception
    {
     String msg = "";
     int marks;
     public MyException()
         {
     }
     public MyException(String str)
         {
         super(str);
     }
     public String toString()
         {
         if(marks <= 40)
         msg = "You have failed";
         if(marks > 40)
         msg = "You have Passed";
        
         return msg;
        
     }
}


public class test
    {
     public static void main(String args[])
         {
         test t = new test();
         t.dd();
     }
     public void dd()
         {
         try
             {
             int i=0;
             if( i < 40)
             throw new MyException();
         }
         catch(MyException ee1)
             {
             System.out.println("my ex"+ee1);
         }
     }
}


Tokenizing Java Source Code

     public static void main(String args[]){
         try{
         // Create the tokenizer to read from a file
         FileReader rd = new FileReader("dd.java");
         StreamTokenizer st = new StreamTokenizer(rd);
        
         // Prepare the tokenizer for Java-style tokenizing rules
         st.parseNumbers();
         st.wordChars('_', '_');
         st.eolIsSignificant(true);
        
         // If whitespace is not to be discarded, make this call
         st.ordinaryChars(0, ' ');
        
         // These calls caused comments to be discarded
         st.slashSlashComments(true);
         st.slashStarComments(true);
        
         // Parse the file
         int token = st.nextToken();
             while (token != StreamTokenizer.TT_EOF) {
             token = st.nextToken();
             System.out.println("----"+st);
                 switch (token) {
                 case StreamTokenizer.TT_NUMBER:
                 // A number was found; the value is in nval
                 double num = st.nval;
                 break;
                 case StreamTokenizer.TT_WORD:
                 // A word was found; the value is in sval
                 String word = st.sval;
                 break;
                 case '"':
                 // A double-quoted string was found; sval contains the contents
                 String dquoteVal = st.sval;
                 break;
                 case '\'':
                 // A single-quoted string was found; sval contains the contents
                 String squoteVal = st.sval;
                 break;
                 case StreamTokenizer.TT_EOL:
                 // End of line character found
                 break;
                 case StreamTokenizer.TT_EOF:
                 // End of file has been reached
                 break;
                 default:
                 // A regular character was found; the value is the token itself
                 char ch = (char)st.ttype;
                 break;
             }
         }
         rd.close();
         System.out.println(st);
     }
         catch (Exception ioe){
         ioe.printStackTrace();
     }
}


Type casting or conversion of data types

import java.text.*;

public class CastingsORConversions
    {
     public static void main(String a[])
         {
         String str = "java";
         int i = 10;
         //byte byteInt;
        
         //String to Bytes
         byte[] str_bytes = str.getBytes();
        
         //Bytes to String
         String bytes_str = new String(str_bytes);
        
         //int to Bytes
         byte int_bytes = (byte)i;
        
         //Bytes to int
         int bytes_int1 = int_bytes;
        
         //int to String
         String int_str = String.valueOf(i);
        
         //String to int
         int str_int1 = Integer.parseInt(str);
        
         //String to Float
         String str_flt1 = "3.14159";
         Float str_flt2 = Float.valueOf(str_flt1);
        
         //int to float
         int int1_float1 = 10;
         Integer int_one = new Integer(int1_float1);
         float int2_float2 = int_one.floatValue();
        
         //int to double
         int int_dble = 10;
         double int1_dble = (double)int_dble;
        
         //int to double for wrapper classes
         Integer int2_dble = new Integer(10);
         Double int3_dble = new Double(int2_dble.doubleValue());
        
         //int to char
         char int1_char = (char)65;
        
         //double to string
         double dble_str1 = 10.10;
         String dble_str2 = Double.toString(dble_str1);
        
         //double to string with only 2 decimals after the dot
         double dble_str3 = 10.0;
         DecimalFormat fmt = new DecimalFormat( "0.00;-0.00" );
         String stringVal = fmt.format( dble_str3 );
        
         //double to int 1st method
         double dble_int1 = 10.309414484580145;
         int dble_int2 = (int)dble_int1;
        
         //Double to int 2st method
         //if dble_int3 is an instance of Double, use intValue();
         Double dble_int3 = new Double(10.309414484580145);
         int dble_int4 = (int)(dble_int3).intValue();
        
         //Double to Integer
         Double dble_Int1 = new Double(2.0);
         Integer dble_Int2 = new Integer(dble_Int1.intValue());
        
         //double to float
         float dble_flt = (float)2.70;
        
         //Float to float
         Float flt_flt1 = new Float(2.31);
         float flt_flt2 = flt_flt1.floatValue();
        
         //Float to String
         Float flt_str1 = new Float(123456789f);
         System.out.println(new DecimalFormat("0").format(flt_str1));
        
         //flotat to int
         float flt_int1 = 30.0F;
         int flt_int2 = (int)flt_int1;
        
         //float to Float
         float flt_Flt1 = 3.456789012f;
         Float flt_Flt2 = new Float(flt_Flt1);
         float flt_Flt3 = flt_Flt2.floatValue();// convert back to float and check value
        
         //float to double
         float f = 3.12f;
         double d = (float)f;
     }
}


Using Exceptions

public class UsingExceptions 
     {
     public static void main( String args[] )
         {
         try 
             {
             throwException();
         }
         catch ( Exception e )
             {
             System.err.println( "Exception handled in main" );
         }
        
         doesNotThrowException();
     }
    
     public static void throwException() throws Exception
         {
         // Throw an exception and immediately catch it.
         try 
             {
             System.out.println( "Method throwException" );
             throw new Exception(); // generate exception
         }
         catch( Exception e )
             {
             System.err.println( "Exception handled in method throwException" );
             throw e; // rethrow e for further processing
             
             // any code here would not be reached
         }
         finally 
             {
             System.err.println( "Finally executed in throwException" );
         }
        
         // any code here would not be reached
     }
    
     public static void doesNotThrowException()
         {
         try 
             {
             System.out.println( "Method doesNotThrowException" );
         }
         catch( Exception e )
             {
             System.err.println( e.toString() );
         }
         finally 
             {
             System.err.println( "Finally executed in doesNotThrowException" );
         }
        
         System.out.println( "End of method doesNotThrowException" );
     }
}


Using the bitwise shift operators

import java.awt.*;
import java.awt.event.*;
import javax.swing.*;

public class BitShift extends JFrame
     {
    
     public BitShift()
         {
         super( "Shifting bits" );
        
         Container c = getContentPane();
         c.setLayout( new FlowLayout() );
         final JTextField bits = new JTextField( 33 );
         c.add( new JLabel( "Integer to shift " ) );
        
         final JTextField value = new JTextField( 12 );
         value.addActionListener( new ActionListener()
             {
             public void actionPerformed( ActionEvent e )
                 {
                 int val = Integer.parseInt( value.getText() );
                 bits.setText( getBits( val ) );
             }
         } );
         c.add( value );
        
         bits.setEditable( false );
         c.add( bits );
        
         JButton left = new JButton( "<<" );
         left.addActionListener( new ActionListener()
             {
             public void actionPerformed( ActionEvent e )
                 {
                 int val = Integer.parseInt( value.getText() );
                 val <<= 1;
                 value.setText( Integer.toString( val ) );
                 bits.setText( getBits( val ) );
             }
         } );
         c.add( left );
        
         JButton rightSign = new JButton( ">>" );
         rightSign.addActionListener( new ActionListener()
             {
             public void actionPerformed( ActionEvent e )
                 {
                 int val = Integer.parseInt( value.getText() );
                 val >>= 1;
                 value.setText( Integer.toString( val ) );
                 bits.setText( getBits( val ) );
             }
         } );
         c.add( rightSign );
        
         JButton rightZero = new JButton( ">>>" );
         rightZero.addActionListener( new ActionListener()
             {
             public void actionPerformed( ActionEvent e )
                 {
                 int val = Integer.parseInt( value.getText() );
                 val >>>= 1;
                 value.setText( Integer.toString( val ) );
                 bits.setText( getBits( val ) );
             }
         } );
         c.add( rightZero );
        
         setSize( 400, 120 );
         show();
     }
    
     private String getBits( int value )
         {
         int displayMask = 1 << 31;
         StringBuffer buf = new StringBuffer( 35 );
        
         for ( int c = 1; c <= 32; c++ )
             {
             buf.append( ( value & displayMask ) == 0 ? '0' : '1' );
             value <<= 1;
            
             if ( c % 8 == 0 )
             buf.append( ' ' );
         }
        
         return buf.toString();
     }
    
     public static void main( String args[] )
         {
         BitShift app = new BitShift();
         app.addWindowListener( new WindowAdapter()
             {
             public void windowClosing( WindowEvent e )
                 {
                 System.exit( 0 );
             }
         } );
     }
}


Working with Temporary files

import java.io.*;

//Work with temporary files in Java.

    public class TempFiles {
         public static void main(String[] argv) throws IOException {
        
         // 1. Make an existing file temporary
        
         // Construct a File object for the backup created by editing
         // this source file. The file probably already exists.
         // My editor creates backups by putting ' at the end of the name.
         File bkup = new File("Rename.java'");
         // Arrange to have it deleted when the program ends.
         bkup.deleteOnExit();
        
         // 2. Create a new temporary file.
        
         // Make a file object for foo.tmp, in the default temp directory
         File tmp = File.createTempFile("foo", "tmp");
         // Report on the filename that it made up for us.
         System.out.println("Your temp file is " + tmp.getCanonicalPath());
         // Arrange for it to be deleted at exit.
         tmp.deleteOnExit();
         // Now do something with the temporary file, without having to
         // worry about deleting it later.
         writeDataInTemp(tmp.getCanonicalPath());
     }
    
         public static void writeDataInTemp(String tempnam) {
         // This version is dummy. Use your imagination.
     }
}


Write 'real' ASCII File

import java.io.*;
 import java.awt.*;

     public class j {
     myFrame f;
         public static void main(String args[]){
         j aj = new j();
         aj.doit();
     }
    
         public void doit(){  
         f = new myFrame();
     }
}

     class myFrame extends Frame {
     TextField tf;
     Button b;
    
         myFrame(){
         setLayout(new FlowLayout());
         tf = new TextField(20);
         b = new Button("Write");
         add(tf);
         add(b);
         setSize(200,200);
         setVisible(true);
     }
    
         public boolean action(Event e, Object o) {
             if (e.target == b) {  
             // TextField content
             String s = tf.getText();
             // JAVA string
             String t = " \u0082";
                 try {
                 /*
                 ** Deals with TextField content
                 ** we use CodePage850 because this the
                 ** multilingual character set used on the PC.
                 */
                 // output is ASCII (codepage 850)
                 FileOutputStream f = new FileOutputStream("out.dat");
                 f.write(s.getBytes("Cp850"));
                 f.write("\n\r".getBytes());
                 // output is Windows ANSI (if under Win)
                 f.write(s.getBytes());
                 f.write("\n\r".getBytes());
                 /*
                 ** Deals with a JAVA String
                 */
                 // first character stays the same
                 // Unicode escape sequence is translated to ascii
                 f.write(t.getBytes());
                 f.write("\n\r".getBytes());
                 // first char translated
                 // Unicode escape code garbage!
                 f.write(t.getBytes("Cp850"));
                 f.write("\n".getBytes());
                 f.close(); 
                 /*
                 ** the conclusion for String is that you
                 ** can't use both Unicode and converter.
                 */
             }
                 catch (Exception e) {
                 e.printStackTrace();
             }
             return true;
         }
         return false;
     }
 }


Writing a Thread-Safe Singleton

public class JGKSingleton 
    {
     /* Here is the instance of the Singleton */
     private static JGKSingleton instance_;
     /* Need the following object to synchronize */
     /* a block */
     private static Object syncObject_;
     /* Prevent direct access to the constructor*/
     private JGKSingleton() 
         {
         super();
     }
     public static JGKSingleton getInstance() 
         {
         /* in a non-thread-safe version of a Singleton the following line could be executed, and the */ 
         /* thread could be immediately swapped out */
         if (instance_ == null) 
             {
             synchronized(syncObject_) 
                 {
                 if (instance_ == null) 
                     {
                     instance_ = new JGKSingleton();
                 }
             }
         }
         return instance_;
     }
}


Writing UTF-8 Encoded Data

     public static void main(String args[]){
         try{
         Writer out = new BufferedWriter(new OutputStreamWriter(
         new FileOutputStream("outfilename"), "UTF8"));
         out.write(aString);
         out.close();
     }
         catch (Exception ioe){
         ioe.printStackTrace();
     }
}


import java.util.Random;
import javax.swing.*;	//JFrame,JComponent,Timer
import java.awt.*;		//Dimension,Image,Toolkit,Graphics,Container,Color,Graphics2D
						//RenderingHints,GradientPaint,Font,Rectangle,AlphaComposite
import java.awt.event.*;//ActionEvent,ActionListener,KeyAdapter,KeyEvent
import java.applet.*;	//Applet,AudioClip
import java.net.*;		//URL,MalformedURLException

public class Puyo_Puyo extends JFrame
{
	GamePane gp;			//GamePane is subclass of JComponent on which the puyos are moved		
	int width,height;
	int rows,cols;		
	int puyo_len;			//holds the length of the each puyo(because it is a square piece)
	Dimension screenSize;	//holds the dimension of the screen interms of resolution
	public Puyo_Puyo() 
	{
		super("Puyo_Puyo");
		cols=6;			// Can be set to any value, game rows*cols depends on this value	
		rows=cols*2;
		screenSize= Toolkit.getDefaultToolkit().getScreenSize();
		width=screenSize.width;
		height=screenSize.height;
		//Width and Height holds the screen resolution.
		//Different computers may have set with different resolutions.
		//If the Window size is static then it is differ to see from one computer to another.
		//To place the window at the middle of the screen at any resolution and 
		//to adjust the window size and puyo size some calculations are taken here.
		//Normally resolution(for pc) is windth*height format with 8:6 ratio.
		//For puyo game(rows=12,colums=6) window take 1:2(wd*ht) ratio in screen resolution.
		//So in 8 parts of width(of screen) 2 parts is assigned to window widht and
		//and in 6 parts of height(of screen) 4 parts is assigned to window height to place
		//window at the middle of the screen.
		//for puyo(cell size) width and height are same
		//puyo size for 12 rows 6 colums puyo game
		puyo_len=(width/8)*2/cols;			//or (height/6)*4/12 
		gp=new GamePane(puyo_len,rows,cols);
		Container c=getContentPane();
		c.add(gp);
		setResizable(false);
		//placing window(added score board size) at the middle of the screen
		//3 puyos width is added to the window for score board display
		setBounds ((width/8)*3-puyo_len*3/2,(height/6)*1-puyo_len,(width/8)*2+puyo_len*3+6,(height/6)*4+25+puyo_len);
		setVisible(true);
		setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
	}
	public static void main(String args[]) {
		System.out.println("Starting Puyo_Puyo...");
		JFrame.setDefaultLookAndFeelDecorated(true); //to set the look and feel for frame as defined int Java
		new Puyo_Puyo();
	}
}
class GamePane extends JComponent implements ActionListener
{
	static int rows,cols;	
	static int scr[][];			//scr or(screen) array holds the information about puyos to display
	Node tetris;				//Formation of Tetris is checked using this object
	Timer timer,timer1,timer2,anim_timer;	//different timers used for animation of puyos
	Image img[]=new Image[4];	//holds 4 puyo images
	Image fpipe,bpipe;			//holds the front and back part of pipe image
								//2 images of pipe used to get the experience of puyos coming out from pipe
	String files[]={"intro.mid","enter.wav","sound735.wav","blip.wav","sound65.wav","sound136.wav","tada.wav","sound713.wav"};
	AudioClip clips[]=new AudioClip[8];//Array of audio clips to load the sound files
	Toolkit tk;			//used to load the images		
	Random rand;		//this object used to generate puyos randomly in color.
	int rot;			//used for the rotation of the puyos
	int len;			//length of the puyo ie. width and height
	boolean reached;	//generated puyo reached the bottom or in movement
	int count;			//count of puyos when formed tetris to delete
	boolean started;	//Game is started or not
	boolean gameOver,paused; 
	int a,b;			//The two puyos generate to be next are stored in a and b
	int level,score,pieces,removed_puyos;//pieces is number of joint puyos(single piece) generated
					//number of removed puyos by forming tetris
	int minscore;	
	int anim;		//to build the pixel by pixel animation (movement of generated puyos)
	float alpha,alpha1;
	boolean levelflag;
	public GamePane(int l,int r,int c)
	{
		len=l;		//length of puyos is set by the Puyo_Puyo class where it is calculated and sent here
		rows=r+1;	//number of rows is taken 12+1 for the easyness of generating puyos from pipe.
					//extra one row is occupied by pipe at the top. Only 12 rows are used for puyos.
		cols=c;	    //6 columns
		init();		//initializing game data
		//puyo images are selected depending on the length of puyos
		//length of puyo is calculated depending on the resolution of screen
		//In this game i used two types of puyos for 
		//(i)800*600 and below resolutions
		//(ii)1024*768 and above resolutions
		//So images are loaded ofter length of puyos is calculated
		loadImages();
		loadSounds();		
		generatePuyos();				//to start the generating puyos
		clips[0].loop();
		addKeyListener(new KeyAdapter()
		{
			public void keyPressed(KeyEvent e)
			{
				if(e.getKeyCode()==KeyEvent.VK_ENTER)
				{
					//if game is not started then start the game by starting timer when enter is pressed
					//ig game is over then initialize the variables and start generating puyos also
					if(!started)		
					{
						clips[0].stop();
						clips[1].play();
						setDelays();
						timer.start();
						started=true;
					}
					if(gameOver)		
					{
						init();
						generatePuyos();
						clips[0].loop();
						started=false;
					}
					if(paused)
					{
						init();
						generatePuyos();
						clips[0].loop();
						started=false;
					}
					repaint();
				}
				else
				if(e.getKeyCode()==KeyEvent.VK_LEFT && !reached && !paused)//move puyos left if each puyo not reached to ground
				{
					clips[3].play();
					moveLeft();
				}
				else
				if(e.getKeyCode()==KeyEvent.VK_RIGHT && !reached && !paused)
				{
					clips[3].play();
					moveRight();
				}
				else
				if(e.getKeyCode()==KeyEvent.VK_UP && !paused )
				{
					clips[3].play();
					if(!reached)
					rotate();
					if(!started && level<19)	//Before strting the game 
						level++;
				}
				else
				if(e.getKeyCode()==KeyEvent.VK_DOWN && !paused)
				{
					clips[3].play();
					moveDown();
					if(!started && level>0) 	//Before strting the game 
					level--;
				}
				else
				if(e.getKeyCode()==KeyEvent.VK_P && started && !gameOver)
				{
					//if game is already paused then resume it, other wise pause the game
					if(paused)
					{
						clips[1].play();
						paused=false;
						alpha1=0.0f;
						timer.start();		//game is resumed
					}
					else
					{
						clips[2].play();
						timer.stop();
						paused=true;		//game is paused
					}
				}
				else
				if(e.getKeyCode()==KeyEvent.VK_ESCAPE)
				{
					clips[2].play();
					//if game is already paused then exit the game, other wise pause the game
					if( started && !gameOver)
					{
						if(paused)
						System.exit(0);		//exit the game
						else
						{
							timer.stop();
							paused=true;		//game is paused
						}
					}
					else
					System.exit(0);
				}
			}
		});
		setFocusable(true);			//to set the keyboard focus on this game pane
	}
	public void init()//all variables declared above are initialized here
	{
		scr=new int[rows][cols];
		rot=1;
		reached=true;
		count=0;
		started=false;
		gameOver=false;
		paused=false;
		a=0;
		b=0;
		level=0;
		score=0;
		pieces=-1;
		removed_puyos=0;
		minscore=50;
		anim=0;
		alpha=0.0f;
		alpha1=0.0f;
		levelflag=true;
		tk= Toolkit.getDefaultToolkit();
		rand=new Random();
		timer=new Timer(1000,this);	//generates action event for each 1075 milli seconds when timer is started
		timer.setInitialDelay(0);	//generates first event ofter 0 ms when timer starts
		timer1=new Timer(1000,this);
		timer2=new Timer(500,this);
		anim_timer=new Timer(50,this);
		anim_timer.start();			//starting the timer
	}
	public void loadImages()//loading images into the image array and pipe objects
	{
		String s="";
		if(len>=42)
		s="_";
		for(int i=0;i<img.length;i++)
		img[i]=tk.getImage("images\\puyo_"+s+(i+1)+".png");
		fpipe=tk.getImage("images\\pipe"+s+"1.png");
		bpipe=tk.getImage("images\\pipe"+s+".png");
	}
	public void loadSounds()//loading souds into the AudioClip array
	{
		try{
			for(int i=0;i<clips.length;i++)	//Loading all the sound clips
			clips[i]=Applet.newAudioClip(new URL("file:"+System.getProperty("user.dir")+"\\sounds\\"+files[i]));
			
		}
		catch (MalformedURLException e) {
            System.err.println(e.getMessage());
        }
    }
	public void setDelays()
	{
		int delay=0,delay1=0;
		for(int i=0;i<=level;i++)//to set the delays depending on the level
		{
			delay+=20*(4-i/5);	
			delay1+=4-i/5;
		}
		if(level==20)
		{
			delay+=25;
			delay1+=1;
		}
		timer.setDelay(1075-delay);
		anim_timer.setDelay(52-delay1);
		anim_timer.restart();
	}
	public void generatePuyos()//To generate Puyos at the top of the game window
	{
		
		//Checking Top of the game window is occupied by any puyos 
		//if occupied then game is over
		int p;
		if(cols%2==0)
		p=cols/2-1;
		else
		p=cols/2;
		if(scr[0][p]==0 && scr[1][p]==0)
		{
			clips[4].play();
			scr[0][p]=a;		//a and b are randomly generated Puyos
			scr[1][p]=b;
		}
		else
		{
			clips[2].play();
			timer.stop();		
			gameOver=true;		//game is over
			return;
		}
		int r;					//Generating puyos randomly for the next fall which are viewed at the right side of window
		//Odd numbers 1,3,5,7(for 4 colors) are used for generating puyos which are in movement
		//Even numbers 2,4,6,6 are used for fallen puyos on bottom of the window
		while((r=rand.nextInt(8))%2==0);
		a=r;
		while((r=rand.nextInt(8))%2==0);
		b=r;
		pieces++;
		rot=1;
	}
	public void actionPerformed(ActionEvent e)
	{
		if(e.getSource()==timer)	//If Event is generated by the timer object
		{
			clips[5].play();
			movePuyos();
		}
		else if(e.getSource()==timer1) //If Event is generated by the timer1 object
		{
			clips[6].play();
			erase_puyos();
		}
		else if(e.getSource()==timer2)
		{
			clips[7].play();
			fillVacated();			
			timer2.stop();
		}
		//timer1 and timer2 are used for make delay b/w erasing puyos and filling vacated places by puyos
		repaint();
	}
	public void movePuyos()//Moving generated puyos Downword
	{
		int flag=0;
		for(int i=rows-1;i>=0;i--)
		for(int j=0;j<cols;j++)
		if(scr[i][j]%2==1)
		{
			if(i==rows-1)	//for each moving puyo ie. on last row 12
			{
				scr[i][j]+=1;		//When generated puyo reached the ground ie. 12 row
				reached=true;		//then make it as fallen puyo by making it as even number
									//reached the ground
			}
			else if(scr[i+1][j]==0)		//if the next row is empty
			{
				scr[i+1][j]=scr[i][j];	//for each generated puyo in moment increase the row number 
				scr[i][j]=0;
				flag=1;			//to build the movement for that puyo
			}
			else
			{
				scr[i][j]+=1;		//If the next row contain any puyo then stop the movement	
				reached=true;		//of puyo by making it even
			}
			anim=0;			//for pixel by pixel animation of puyos here animation starts
		}
		if(flag==0)			//if flag is not set mean that there is no puyo is in moment
		erase_puyos();		//so erase puyo which form tetris
	}
	public void erase_puyos()
	{
		int flag=0;
		for(int i=0;i<rows;i++)
		for(int j=0;j<cols;j++)
		if(scr[i][j]>0)			//for all color puyos
		{
			count=1;
			tetris=new Node(i,j);//create a node for puyo 
			chkForTetris(i,j);	//check that node attached to the tetris puyos of same color
			if(count>=4)		//if tetris forms 
			{
				removeAllTetris();//remove the puyos which form tetris
				flag=1;
				///////////////////////////////////////
				//I made change here to remove the bug in this revised game (by moving 4 lines of code to the below if block) 
				//ie. erasing all the chain combos formed at a time will be removed at a time.
				///////////////////////////////////////
			}
		}
		if(flag==1)
		{
			timer.stop();	  //stop the generating puyos
			timer1.start();	 //erase puyos if there is any other form tetris with delay
			timer2.start();	 //fill vacated places of erased puyos with remain by the law of gravity with delay
			return;
		}	
		timer1.stop();			//If there is no puyos form tetris then stop timer for erasing puyos
		minscore=50;			//min score for each puyo is initiated
		generatePuyos();		//start generating puyos
		if(!timer.isRunning())
		timer.start();
	}
	public void chkForTetris(int x,int y)
	{
		if(y<cols-1 && scr[x][y]==scr[x][y+1] && !existsInTetris(x,y+1))
		{							//check for the same color puyo at the right side of 
			count++;				//current puyo which is not already added to the current tetris
			addToTetris(x,y+1);		//If there is then add that to the current tetris
			chkForTetris(x,y+1);	//Then check this node can connected to any same color puyo
		}
		if(x<rows-1 && scr[x][y]==scr[x+1][y] && !existsInTetris(x+1,y))
		{
			count++;
			addToTetris(x+1,y);		//check at the down side
			chkForTetris(x+1,y);
		}
		if(y>0 && scr[x][y]==scr[x][y-1] && !existsInTetris(x,y-1))
		{
			count++;
			addToTetris(x,y-1);		//check at the left side
			chkForTetris(x,y-1);
		}
		//I found a bug here and i rectified it by adding below if block
		//Before iam not checked up side
		//but if below type of chain combo formed by puyos
		//			* *
		//          ***
		//then up right puyo cannot be added to the tetris to remove
		if(x>0 && scr[x][y]==scr[x-1][y] && !existsInTetris(x-1,y))
		{
			count++;
			addToTetris(x-1,y);		//check at the up side
			chkForTetris(x-1,y);
		}
	}
	public void addToTetris(int x,int y)//adding another node to the present tetris
	{
		tetris.setNext(new Node(x,y));
		tetris.getNext().setPrev(tetris);//It is totally the linked list concept used here
		tetris=tetris.getNext();
	}
	public boolean existsInTetris(int x,int y)//comparing with the all the nodes in present tetris 
	{										//that it is already exists or not
		Node n=tetris;
		while(n!=null)
		{
			if(n.getX()==x && n.getY()==y)
			return true;
			n=n.getPrev();
		}
		return false;
	}
	public void removeAllTetris()
	{
		Node n=tetris;
		while(n!=null)
		{
			scr[n.getX()][n.getY()]=0;	//removing puyos which are in tetris
			n=n.getPrev();				
		}
		removed_puyos+=count;
		if(removed_puyos>=50)		//Change the level of the game depending on
		{								//number of removed puyos.
			if(levelflag)
			level+=1;
			else
			level-=1;				//Ofter playing the final level(here 20) the level decreased by 1
			if(level==20)			//It is decreased up to 15 and then it increases 20
			levelflag=false;		//So The Game is endlessly continued if player can play all levels perfectly without any minstake at any level.
			if(level==15 && !levelflag)
			levelflag=true;
			setDelays();
			removed_puyos=0;
		}	
		score+=minscore*(count-3)*count;//Score is calculated by using this formula
		minscore=minscore*count;		//minscore in formula depends on the number of puyos formed in last tetris
										//Scoring is totally depends on the length of the chain and 
										//number of chains formed by puyos at a single time
	}
	public void fillVacated()	//vacated places formed by removed puyos are filled with the other puyos by the law of gravity
	{
		for(int i=rows-2;i>=0;i--)
		for(int j=0;j<cols;j++)
		if(scr[i][j]>0)				//for all puyos
		{
			int k;
			for(k=i+1;k<=rows-1;k++)
			if(scr[k][j]>0)			//any puyo exist below the current puyo up to the ground
			{
				scr[k-1][j]=scr[i][j]; //then move on to it
				if(i!=k-1)
				scr[i][j]=0;
				break;
			}
			else if(k==rows-1)		//if no puyo exist below the current puyo up to the ground
			{
				scr[rows-1][j]=scr[i][j];	//then move on to the ground
				if(i!=rows-1)
				scr[i][j]=0;
			}
		}
	}
	public void moveLeft()	//to move the coming down puyos one step left 
	{					
		for(int i=0;i<rows;i++)
		for(int j=0;j<cols;j++)
		if(scr[i][j]>0 && scr[i][j]%2==1 && j>0 )//for all the coming down puyos which are not in first column(or left column)
		{
			
			if(j<cols-1 && scr[i][j+1]%2==1 && scr[i][j-1]==0)	//if two puyo are in horizontal
			{													//if there is no puyo in left
					scr[i][j-1]=scr[i][j];		//move two puyo to one step left
					scr[i][j]=scr[i][j+1];
					scr[i][j+1]=0;
			}
			else
			if(scr[i][j-1]==0 && scr[i+1][j-1]==0 )//if two puyo are in vertical & there is no puyos in left
			{
				scr[i][j-1]=scr[i][j];
				scr[i+1][j-1]=scr[i+1][j];		//move two puyo to one step left
				scr[i][j]=0;
				scr[i+1][j]=0;
			}
			return;
		}
	}
	public void moveRight()	//to move the coming down puyos one step right
	{
		for(int i=0;i<rows;i++)
		for(int j=cols-1;j>=0;j--)
		if(scr[i][j]>0 && scr[i][j]%2==1 && j<cols-1)//for all the coming down puyos which are not in last column(or right column)
		{
			if(j>0 && scr[i][j-1]%2==1 && scr[i][j+1]==0)//if two puyo are in horizontal
			{											//if there is no puyo in right
					scr[i][j+1]=scr[i][j];
					scr[i][j]=scr[i][j-1];				//move two puyo to one step right
					scr[i][j-1]=0;
			}
			else
			if(scr[i][j+1]==0 && scr[i+1][j+1]==0 )//if two puyo are in vertical & there is no puyos in right
			{
				scr[i][j+1]=scr[i][j];
				scr[i+1][j+1]=scr[i+1][j];			//move two puyo to one step right
				scr[i][j]=0;
				scr[i+1][j]=0;
			}
			return;			
		}
	}
	public void rotate()	//to rotate the coming down puyos in clock wise direction by 90 degrees
	{
		for(int i=0;i<rows;i++)
		for(int j=0;j<cols;j++)
		if(scr[i][j]>0 && scr[i][j]%2==1)//for all the coming down puyos 
		{
			//alway consider the puyo left and top for horizontal and vertical positions as present
			//because checking is taking from top to bottom
			//Two puyos can make only four different positions rotating 90 degrees each time
			if(rot==1)	//first postion=vertical
			{			//moving down puyo to the left of first puyo makes 90 degrees rotaion to get second postion
				if(j>0 && scr[i][j-1]==0)//is left side is empty or not
				{
					scr[i][j-1]=scr[i+1][j];
					scr[i+1][j]=0;		//If it is empty location move there
					rot=2;				//change to second position
				}
				else if(j<cols-1 && scr[i][j+1]==0)//is left side is not empty, chk for right position
				{
					scr[i][j+1]=scr[i][j];//move present puyo to the right
					scr[i][j]=scr[i+1][j];//move down puyo to the present location
					scr[i+1][j]=0;
					rot=2;				//change to second position
				}
			}//second postion=horizontal
			else if(rot==2 && i>1)//moving present puyo to the up of right puyo makes 90 degrees rotaion to get third position
			{
				scr[i-1][j+1]=scr[i][j];//move present puyo to the up of the right puyo
				scr[i][j]=0;
				rot=3;					//change to third position
			}//third postion=vertcal (invert to the first postion in two puyos positions)
			else if(rot==3)			//moving present puyo to the up of right puyo makes 90 degrees rotaion to get fourth position
			{
				if(j<cols-1 && scr[i+1][j+1]==0)//is right side of the down puyo is empty or not
				{
					scr[i+1][j+1]=scr[i][j];	//If it is empty location move there
					scr[i][j]=0;				
					rot=4;						//change to fourth position
				}
				else if(j>0 && scr[i+1][j-1]==0)//is left side of the down puyo is empty or not
				{
					scr[i+1][j-1]=scr[i+1][j];	//move down puyo to the left
					scr[i+1][j]=scr[i][j];		//move present puyo to the down
					scr[i][j]=0;
					rot=4;						//change to fourth position
				}
			}//fourth position=horizontal (invert to the second postion in two puyos positions)
			else if(rot==4 && i<rows-1)//moving right puyo to the down of the current puyo makes 90 degrees rotaion to get first position
			{
				if(scr[i+1][j]==0)//is down position is empty or not
				{
					scr[i+1][j]=scr[i][j+1];//move right puyo to the down of the present puyo
					scr[i][j+1]=0;
					rot=1;					//change to first position
				}
			}
			return;
		}
	}
	public void moveDown()//Moving generated moving puyos by one step down
	{
		for(int i=rows-1;i>=0;i--)
		for(int j=0;j<cols;j++)
		if(scr[i][j]%2==1)//For all moving puyos
		{
			if(i==rows-1)	//if puyo is in last row
			{
				scr[i][j]=scr[i][j]+1;//making it as grounded
				reached=true;
			}
			else if(scr[i+1][j]>0 && scr[i+1][j]%2==0)//if next row of puyo contains another puyo
			{
				scr[i][j]=scr[i][j]+1;//then stop the current puyo at the current postion
				reached=true;
			}
			else 
			{
				scr[i+1][j]=scr[i][j];//Move present puyo one step down
				scr[i][j]=0;
			}
		}
		repaint();
	}
	public void paint(Graphics g)
	{
		g.setColor(Color.white);
		g.fillRect(0,0,len*cols,len*rows);//background fill with white color
		g.setColor(Color.black);
		g.fillRect(len*cols,0,len*3,len*rows);//Score board is filled with black color
		Graphics2D g2=(Graphics2D)g;
		g2.setRenderingHint( RenderingHints.KEY_ANTIALIASING,RenderingHints.VALUE_ANTIALIAS_ON );
		//designing score board with gradient colors as borders
		g2.setPaint(new GradientPaint(cols*len,0,new Color(50,50,50),cols*len+len/2,0,new Color(200,200,200),false));
		g2.fill(new Rectangle(cols*len,0,len/2,rows*len));
		g2.setPaint(new GradientPaint((cols+2)*len+len/2,0,new Color(200,200,200),(cols+3)*len,0,new Color(50,50,50),false));
		g2.fill(new Rectangle((cols+2)*len+len/2,0,len/2,rows*len));
		g2.setPaint(Color.white);
		//white background for next coming puyos display
		g.fill3DRect((cols+3/2)*len,len,len,len*2,true);
		//The next coming puyos showned or drawn here
		g.drawImage(img[a/2],(cols+3/2)*len,len,len,len,null);
		g.drawImage(img[b/2],(cols+3/2)*len,len*2,len,len,null);
		//Score board designed with 3 rectangled as backgrounds for
		//Level and Number of pices and Total Score
		g.fill3DRect((cols)*len+len/2,(rows+1)*len/2-5,len*2,len-2,true);
		g.fill3DRect((cols)*len+len/2,(rows+1)*len/2+len-5,len*2,len-2,true);
		g.fill3DRect((cols)*len+len/2,(rows+1)*len/2+2*len-5,len*2,len,true);
		g2.setPaint(Color.black);
		//Font for the text to be display
		g2.setFont(new Font("Ariel",Font.PLAIN,len/3));
		g2.drawString("Level: "+level,(cols)*len+len/2,rows*len/2+len);
		g2.drawString("pieces: "+pieces,(cols)*len+len/2,rows*len/2+2*len);
		g2.drawString("Score:"+score,(cols)*len+len/2,rows*len/2+3*len);
		//back part of pipe is drawn as image 
		int p;
		if(cols%2==0)
		p=cols/2;
		else
		p=cols/2+1;
		g.drawImage(bpipe,p*len-len,0,len,len,null);
		for(int i=0;i<rows;i++)
		for(int j=0;j<cols;j++)
		if(scr[i][j]>0)//For all the puyos exists presently
		{
			int k=scr[i][j];
			if(k%2==0)//if puyo value is even then simply display it
			{
				k=(int)k/2;
				g.drawImage(img[k-1],j*len,i*len,len,len,null);
			}
			else
			{		//if puyo value is odd then add animation to it
				k=(int)k/2+1;
				g.drawImage(img[k-1],j*len,(i-1)*len+anim,len,len,null);
				anim+=2;
				if(anim>=len)
				anim=len;			
				if(reached && i==2)
				reached=false;
			}
			
		}
		//front part of pipe is drawn as image 
		g.drawImage(fpipe,p*len-len,0,len,len,null);
		//so when the puyo are at the postion of generation we get experience of puyo coming from the pipe
		
		if(!started)//if game is not started display the information
		{
			g2.setPaint(Color.yellow);
			g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,0.8f));
			g2.fill(new Rectangle(0,rows*len/4,(cols+3)*len,(rows+1)*len/2));
			g2.setPaint(Color.blue);
			g2.setFont(new Font("Ariel",Font.PLAIN,len/2));
			g2.drawString("  Level: "+level,len*3,rows*len/3);
			g2.setFont(new Font("Ariel",Font.PLAIN,len/3));
			g2.drawString("Use the <up> and <down> arrow keys to change level now",len/4,(rows+2)*len/3); 
			g2.setFont(new Font("Ariel",Font.PLAIN,len/2));
			g2.drawString(" Press <Enter> to start the Game",len,rows*len/2);
			g2.setFont(new Font("Ariel",Font.PLAIN,len/3));
			g2.drawString("   Use the left,right and down arrow keys to move the puyos.",0,(rows+1)*len/2); 
			g2.drawString("   Pressing the up arrow key rotates the piece.",len,(rows+2)*len/2);
			g2.drawString("  When 4 or more puyos of the same colour are touching",len/3,(rows+3)*len/2);
			g2.drawString("                       they disappear. ",len,(rows+4)*len/2);
			g2.drawString("              Press <p> to pause the Game",len,(rows+5)*len/2);
			g2.drawString("            Press <Escape> to exit the Game",len,(rows+6)*len/2);
		}
		if(gameOver)//if game is over dim the game by using alpha composite and display the information
		{
			g2.setPaint(Color.white);
			g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,alpha));
			if(alpha<0.9f)
			alpha=alpha+0.02f;//to build the animation of alpha blending
			g2.fill(new Rectangle(0,0,len*cols,len*rows));
			g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,1.0f));
			g2.setPaint(Color.red);
			g2.setFont(new Font("Ariel",Font.PLAIN,len/2));
			g2.drawString("Game Over",len*3/2,rows*len/2);
			g2.setPaint(Color.blue);
			g2.setFont(new Font("Ariel",Font.PLAIN,len/3));
			g2.drawString("Press <Enter> to restart the Game",len/2,(rows+1)*len/2);
		}
		if(paused)//if game is paused dim the game by using alpha composite and display the information
		{
			g2.setPaint(Color.white);
			g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,alpha1));
			if(alpha1<0.9f)
			alpha1=alpha1+0.02f;
			g2.fill(new Rectangle(0,0,len*cols,len*rows));
			g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,1.0f));
			g2.setPaint(Color.blue);
			g2.setFont(new Font("Ariel",Font.PLAIN,len/2));
			g2.drawString("Game Paused",len*3/2,rows*len/2);
			g2.setFont(new Font("Ariel",Font.PLAIN,len/3));
			g2.drawString("   Press <p> to resume the Game",len/2,(rows+1)*len/2);
			g2.drawString("  Press <Escape> to exit the Game",len/2,(rows+2)*len/2);
			g2.drawString(" Press <Enter> to restart the Game",len/2,(rows+3)*len/2);
		}
	}		
}
class Node
{
	//linked list is bulilt for the tetris of puyos to store their positions
	int x,y;
	Node nextnode;
	Node prevnode;
	public Node(int x,int y)
	{
		this.x=x;
		this.y=y;
		nextnode=null;
		prevnode=null;
	}
	public Node(Node p)
	{
		x=p.x;
		y=p.y;
		nextnode=null;
		prevnode=null;
	
	}
	public void setNext(Node lnode)
	{
		nextnode=lnode;
	}
	public Node getNext()
	{
		return nextnode;
	}
	public void setPrev(Node lnode)
	{
		prevnode=lnode;
	}
	public Node getPrev()
	{
		return prevnode;
	}
	public int getX()
	{
		return x;
	}
	public int getY()
	{
		return y;
	}
}

BasicDateFormatting

package com.ack.j2se.date;

import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;

public class BasicDateFormatting {
  public static void main( String[] args ) throws Exception {
    // get today's date
    Date today = Calendar.getInstance().getTime();

    // create a short version date formatter
    DateFormat shortFormatter
        = SimpleDateFormat.getDateInstance( SimpleDateFormat.SHORT );

    // create a long version date formatter
    DateFormat longFormatter
        = SimpleDateFormat.getDateInstance( SimpleDateFormat.LONG );

    // create date time formatter, medium for day, long for time
    DateFormat mediumFormatter
        = SimpleDateFormat.getDateTimeInstance( SimpleDateFormat.MEDIUM,
                                                SimpleDateFormat.LONG );

    // use the formatters to output the dates
    System.out.println( shortFormatter.format( today ) );
    System.out.println( longFormatter.format( today ) );
    System.out.println( mediumFormatter.format( today ) );

    // convert form date -> text, and text -> date
    String dateAsText = shortFormatter.format( today );
    Date textAsDate = shortFormatter.parse( dateAsText );
    System.out.println( textAsDate );
  }
}


GetTheCurrentTime

package com.ack.j2se.date;

import java.util.Calendar;
import java.util.Date;

public class GetTheCurrentTime {
  public static void main( String[] args ) {
    // one way
    long currentTimeInMillis = System.currentTimeMillis();
    Date today = new Date( currentTimeInMillis );
    System.out.println( today );

    // another way
    Calendar cal = Calendar.getInstance();
    today = cal.getTime();
    System.out.println( today );
  }
}


This is a simple text clock. See

javax.swing.Timer for an explanation of how use this simple timer class. 




import java.awt.*;
import java.awt.event.*;
import javax.swing.*;
import javax.swing.event.*;
import java.util.Calendar;      // only need this one class

/// TextClock
public class TextClock {
    
main
    public static void main(String[] args) {
        JFrame clock = new TextClockWindow();
        clock.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        clock.setVisible(true);
    }//end main
}//endclass TextClock


////// TextClockWindow
class TextClockWindow extends JFrame {
    
instance variables
    private JTextField timeField;  // set by timer listener

    
constructor
    public TextClockWindow() {
        // Build the GUI - only one panel
        timeField = new JTextField(6);
        timeField.setFont(new Font("sansserif", Font.PLAIN, 48));

        Container content = this.getContentPane();
        content.setLayout(new FlowLayout());
        content.add(timeField); 
        
        this.setTitle("Text Clock");
        this.pack();

        // Create a 1-second timer and action listener for it.
        // Specify package because there are two Timer classes
        javax.swing.Timer t = new javax.swing.Timer(1000,
              new ActionListener() {
                  public void actionPerformed(ActionEvent e) {
                      Calendar now = Calendar.getInstance();
                      int h = now.get(Calendar.HOUR_OF_DAY);
                      int m = now.get(Calendar.MINUTE);
                      int s = now.get(Calendar.SECOND);
                      timeField.setText("" + h + ":" + m + ":" + s);
                  }
              });
        t.start();  // Start the timer
    }//end constructor
}//endclass TextClock



TimeQuery



import java.io.*;
import java.net.*;
import java.nio.*;
import java.nio.channels.*;
import java.nio.charset.*;
import java.util.regex.*;


public class TimeQuery {

    // The standard daytime port
    private static int DAYTIME_PORT = 13;

    // The port we'll actually use
    private static int port = DAYTIME_PORT;

    // Charset and decoder for US-ASCII
    private static Charset charset = Charset.forName("US-ASCII");
    private static CharsetDecoder decoder = charset.newDecoder();

    // Direct byte buffer for reading
    private static ByteBuffer dbuf = ByteBuffer.allocateDirect(1024);

    // Ask the given host what time it is
    //
    private static void query(String host) throws IOException {
    InetSocketAddress isa
        = new InetSocketAddress(InetAddress.getByName(host), port);
    SocketChannel sc = null;

    try {

        // Connect
        sc = SocketChannel.open();
        sc.connect(isa);

        // Read the time from the remote host.  For simplicity we assume
        // that the time comes back to us in a single packet, so that we
        // only need to read once.
        dbuf.clear();
        sc.read(dbuf);

        // Print the remote address and the received time
        dbuf.flip();
        CharBuffer cb = decoder.decode(dbuf);
        System.out.print(isa + " : " + cb);

    } finally {
        // Make sure we close the channel (and hence the socket)
        if (sc != null)
        sc.close();
    }
    }

    public static void main(String[] args) {
    if (args.length < 1) {
        System.err.println("Usage: java TimeQuery [port] host...");
        return;
    }
    int firstArg = 0;

    // If the first argument is a string of digits then we take that
    // to be the port number
    if (Pattern.matches("[0-9]+", args[0])) {
        port = Integer.parseInt(args[0]);
        firstArg = 1;
    }

    for (int i = firstArg; i < args.length; i++) {
        String host = args[i];
        try {
        query(host);
        } catch (IOException x) {
        System.err.println(host + ": " + x);
        }
    }
    }

}


TimeServer



import java.io.*;
import java.net.*;
import java.nio.*;
import java.nio.channels.*;
import java.nio.charset.*;
import java.util.*;
import java.util.regex.*;


public class TimeServer {

    // We can't use the normal daytime port (unless we're running as root,
    // which is unlikely), so we use this one instead
    private static int PORT = 8013;

    // The port we'll actually use
    private static int port = PORT;

    // Charset and encoder for US-ASCII
    private static Charset charset = Charset.forName("US-ASCII");
    private static CharsetEncoder encoder = charset.newEncoder();

    // Direct byte buffer for writing
    private static ByteBuffer dbuf = ByteBuffer.allocateDirect(1024);


    // Open and bind the server-socket channel
    //
    private static ServerSocketChannel setup() throws IOException {
    ServerSocketChannel ssc = ServerSocketChannel.open();
    InetSocketAddress isa
        = new InetSocketAddress(InetAddress.getLocalHost(), port);
    ssc.socket().bind(isa);
    return ssc;
    }

    // Service the next request to come in on the given channel
    //
    private static void serve(ServerSocketChannel ssc) throws IOException {
    SocketChannel sc = ssc.accept();
    try {
        String now = new Date().toString();
        sc.write(encoder.encode(CharBuffer.wrap(now + "
")));
        System.out.println(sc.socket().getInetAddress() + " : " + now);
        sc.close();
    } finally {
        // Make sure we close the channel (and hence the socket)
        sc.close();
    }
    }

    public static void main(String[] args) throws IOException {
    if (args.length > 1) {
        System.err.println("Usage: java TimeServer [port]");
        return;
    }

    // If the first argument is a string of digits then we take that
    // to be the port number
    if ((args.length == 1) && Pattern.matches("[0-9]+", args[0]))
        port = Integer.parseInt(args[0]);

    ServerSocketChannel ssc = setup();
    for (;;)
        serve(ssc);

    }

}


TimerClient
  
 

package com.ack.webservices.soap.examples.handlers;

import java.util.Calendar;
import java.util.Date;

import org.apache.axis.client.Call;
import org.apache.axis.client.Service;

public class TimerClient {
  public static void main( String[] args ) throws Exception {
    String endpoint = "http://localhost:8080/axis/services/TimerService";

    /**
     * call the getTime to find out the time on the server
     */

    // calls are created our a service, that is typically associated,
    // but not necessarily, with a WSDL file
    Service service = new Service();
    Call call = (Call) service.createCall();

    // set in the target endpoint, operation name, and request intent
    call.setTargetEndpointAddress( new java.net.URL( endpoint ) );
    call.setOperationName( "getTime" );

    // Axis provides a nicely overloaded invoke that delivered the return value
    Date ret = (Date) call.invoke( new Object[]{} );

    // then just print it out
    System.out.println( "time on server: " + ret );

    /**
     * call the sendTime to pass the time on the client to the server
     * note: check the soap server's console for the output.
     *
     * note: Be sure to check what is returned to the client from the server
     * when an invokeOneWay() is called.  Do this be uses the TraceMessageHandler
     * in the <responseFlow> of the TimeService.
     */

    call = (Call) service.createCall();

    // set in the target endpoint, operation name, and request intent
    call.setTargetEndpointAddress( new java.net.URL( endpoint ) );
    call.setOperationName( "sendTime" );

    // send the time on the client to the server, in a one way method call
    Date clientDate = Calendar.getInstance().getTime();
    call.invokeOneWay( new Object[]{clientDate} );
  }
}


Timer
  
 

package com.ack.webservices.soap.examples.handlers;

import java.util.Calendar;
import java.util.Date;

public class Timer {
  public void sendTime( Date theTime ) {
    System.out.println( "time on client: " + theTime );
  }

  public Date getTime() {
    // return time on server
    return Calendar.getInstance().getInstance().getTime();
  }
}


Affine transformations with images

package com.ack.gui.awt.geometry;

import java.awt.*;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.geom.AffineTransform;

public class AffineTransformationsWithImages extends Frame {

  Dimension size = new Dimension( 600, 600 );
  Image image;
  Point origin = new Point( size.width / 2, size.height / 2 );
  AffineTransform tx = new AffineTransform();
  float scalingFactor = 1.0f;

  public AffineTransformationsWithImages( String title ) {
    super( title );
    setSize( size );
    addWindowListener( new WindowAdapter() {
      public void windowClosing( WindowEvent we ) {
        dispose();
        System.exit( 0 );
      }
    } );
    setVisible( true );
    image = Toolkit.getDefaultToolkit().getImage( "3.gif" );
    tx.translate( origin.x, origin.y );
    for( int x = 0; x < 100; x++ ) {
      scalingFactor += 0.0003;
      pause( 50 );
      tx.scale( scalingFactor, scalingFactor );
      tx.rotate( scalingFactor );
      repaint();
    }
  }

  public static void main( String[] args ) {
    AffineTransformationsWithImages affineTransformationsWithImages1 =
        new AffineTransformationsWithImages( "Affine Transformations With Images Example" );
  }

  public void update( Graphics g ) {
    paint( g );
  }

  public void paint( Graphics g ) {
    Graphics2D g2d = (Graphics2D) g;
    g2d.drawImage( image, tx, this );
  }

  private void pause( int mil ) {
    try {
      Thread.currentThread().sleep( mil );
    }
    catch( Exception ex ) {
      ex.printStackTrace();
    }
  }

}


Applet that demonstrates a Java2D GeneralPath

import java.applet.*;
import java.awt.event.*;
import java.awt.*;
import java.awt.geom.*;
import javax.swing.*;

    public class ShapesApplet extends JApplet {
    
     // initialize the applet
     public void init()
         {
         // obtain color parameters from XHTML file
             try {
             int red = Integer.parseInt( getParameter( "red" ) );
             int green = Integer.parseInt( getParameter( "green" ) );
             int blue = Integer.parseInt( getParameter( "blue" ) );
            
             Color backgroundColor = new Color( red, green, blue );
            
             setBackground( backgroundColor );
         }
        
         // if there is an exception while processing the color
         // parameters, catch it and ignore it
             catch ( Exception exception ) {
             // do nothing
         }
     }
    
     public void paint( Graphics g )
         {
         // create arrays of x and y coordinates
         int xPoints[] =
         { 55, 67, 109, 73, 83, 55, 27, 37, 1, 43 };
         int yPoints[] =
         { 0, 36, 36, 54, 96, 72, 96, 54, 36, 36 };
        
         // obtain reference to a Graphics2D object
         Graphics2D g2d = ( Graphics2D ) g;
        
         // create a star from a series of points
         GeneralPath star = new GeneralPath();
        
         // set the initial coordinate of the GeneralPath
         star.moveTo( xPoints[ 0 ], yPoints[ 0 ] );
        
         // create the star--this does not draw the star
         for ( int k = 1; k < xPoints.length; k++ )
         star.lineTo( xPoints[ k ], yPoints[ k ] );
        
         // close the shape
         star.closePath();
        
         // translate the origin to (200, 200)
         g2d.translate( 200, 200 );
        
         // rotate around origin and draw stars in random colors
             for ( int j = 1; j <= 20; j++ ) {
             g2d.rotate( Math.PI / 10.0 );
            
             g2d.setColor(
             new Color( ( int ) ( Math.random() * 256 ),
             ( int ) ( Math.random() * 256 ),
             ( int ) ( Math.random() * 256 ) ) );
            
             g2d.fill( star ); // draw a filled star
         }
     }
}


Compositing

package com.ack.gui.awt.geometry;

import java.awt.*;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.geom.Rectangle2D;
import java.awt.image.BufferedImage;

public class Compositing extends Frame {
  public static void main( String[] argv ) {
    Compositing myExample = new Compositing( "Compositing Shapes" );
  }

  public Compositing( String title ) {
    super( title );
    setSize( 300, 180 );
    addWindowListener( new WindowAdapter() {
      public void windowClosing( WindowEvent we ) {
        dispose();
        System.exit( 0 );
      }
    } );
    setVisible( true );
  }

  public void paint( Graphics g ) {
    Graphics2D g2d = (Graphics2D) g;
    Rectangle2D rect1 = new Rectangle2D.Double( 32, 42, 200, 130 );
    Rectangle2D rect2 = new Rectangle2D.Double( 164, 42, 100, 100 );
    g2d.setColor( Color.cyan );
    g2d.fill( rect1 );
    g2d.setPaint( loadTextureResource( "1.gif" ) );
    g2d.setComposite( AlphaComposite.getInstance( AlphaComposite.SRC_OVER, .5f ) );
    g2d.fill( rect2 );

  }

  public TexturePaint loadTextureResource( String absfilename ) {
    MediaTracker tracker = new MediaTracker( this );
    Image imtexture = Toolkit.getDefaultToolkit().getImage( absfilename );
    tracker.addImage( imtexture, 0 );
    try {
      tracker.waitForID( 0 );
      int width = imtexture.getWidth( this );
      int height = imtexture.getHeight( this );
      System.out.println( "width" + width + " height =" + height );
      BufferedImage buffImg = new
          BufferedImage( width, height, BufferedImage.TYPE_INT_ARGB );
      Graphics g = buffImg.getGraphics();
      g.drawImage( imtexture, 0, 0, this );
      return new TexturePaint( buffImg, new Rectangle2D.Double( 0, 0, width, height ) );
    }
    catch( Exception e ) {
      System.out.println( "Exception on Image-Texture Loading" );
    }
    return null;
  }
}


Draw or Delete lines from JPanel

import java.awt.*;
import java.awt.event.*;
import java.awt.geom.Line2D;
import javax.swing.*;

public class LineUnder extends JFrame
    {
     LinePanel linePanel = new LinePanel();
     LineUnder()
         {
         setDefaultCloseOperation(EXIT_ON_CLOSE);
         initContentPane();
         pack();
         setLocationRelativeTo(null);
         setVisible(true);
     }
     private void initContentPane()
         {
         linePanel.line.setLine(0d, 0d, 300d, 300d);
         getContentPane().add(linePanel);
     }
    
     class LinePanel extends JPanel
         {
         Point lineStart = new Point(0, 0);
         Point lineEnd = new Point(0, 0);
         Line2D line = new Line2D.Double(lineStart, lineEnd);
         //width of line
         private Stroke stroke = new BasicStroke(2.0f);
         private LineListener lis = null;
         LinePanel()
             {
             super();
             addMouseListener(lis = new LineListener(this, line));
         }
         //draw and delete line
         public void paintComponent(Graphics g)
             {
             super.paintComponent(g);
             Graphics2D g2 = (Graphics2D) g;
             g2.setStroke(stroke);
             if (lis.deleteLine)
                 {
                 g2.setColor(getBackground());
                 lis.deleteLine = false;
             }
             else
             g2.setColor(Color.RED);
             //draw shape of line
             g2.draw(line);
         }
         //define panel's size
        
         public Dimension getPreferredSize()
             {
             return new Dimension(400, 350);
         }
     }
    
     class LineListener extends MouseAdapter
         {
         private Line2D line = null;
         private JComponent parent = null;
         boolean deleteLine = false;
         LineListener(JComponent parent, Line2D line)
             {
             this.parent = parent;
             this.line = line;
         }
         public void mouseClicked(MouseEvent e)
             {
             Point p = e.getPoint();
             //this does it!
             if (line.ptSegDist(p) == 0.0)
                 {
                 System.out.println("Hit!");
                 deleteLine = true;
             }
             else
             System.out.println("Point: " + p + "\nDistance: " + line.ptSegDist(p));
             parent.repaint();
         }
     }
    
     public static void main(String[] args)
         {
         new LineUnder();
     }
}


Drawing Shapes in Java 2D

// Demonstrating some Java2D shapes
import javax.swing.*;
import java.awt.event.*;
import java.awt.*;
import java.awt.geom.*;
import java.awt.image.*;

public class Shapes extends JFrame 
     {
     public Shapes()
         {
         super( "Drawing 2D shapes" );
        
         setSize( 425, 160 );
         show();
     }
    
     public void paint( Graphics g )
         {
         // create 2D by casting g to Graphics2D
         Graphics2D g2d = ( Graphics2D ) g;
        
         // draw 2D ellipse filled with a blue-yellow gradient
         g2d.setPaint( new GradientPaint( 5, 30, // x1, y1
         Color.blue, // initial Color
         35, 100, // x2, y2
         Color.yellow, // end Color
         true ) ); // cyclic
         g2d.fill( new Ellipse2D.Double( 5, 30, 65, 100 ) );
        
         // draw 2D rectangle in red
         g2d.setPaint( Color.red );
         g2d.setStroke( new BasicStroke( 10.0f ) );
         g2d.draw( new Rectangle2D.Double( 80, 30, 65, 100 ) );
        
         // draw 2D rounded rectangle with a buffered background
         BufferedImage buffImage = new BufferedImage( 10, 10, BufferedImage.TYPE_INT_RGB );
        
         Graphics2D gg = buffImage.createGraphics();
         gg.setColor( Color.yellow ); // draw in yellow
         gg.fillRect( 0, 0, 10, 10 ); // draw a filled rectangle
         gg.setColor( Color.black ); // draw in black
         gg.drawRect( 1, 1, 6, 6 ); // draw a rectangle
         gg.setColor( Color.blue ); // draw in blue
         gg.fillRect( 1, 1, 3, 3 ); // draw a filled rectangle
         gg.setColor( Color.red ); // draw in red
         gg.fillRect( 4, 4, 3, 3 ); // draw a filled rectangle
        
         // paint buffImage onto the JFrame
         g2d.setPaint( new TexturePaint( buffImage, new Rectangle( 10, 10 ) ) );
         g2d.fill( new RoundRectangle2D.Double( 155, 30, 75, 100, 50, 50 ) );
        
         // draw 2D pie-shaped arc in white
         g2d.setPaint( Color.white );
         g2d.setStroke( new BasicStroke( 6.0f ) );
         g2d.draw( new Arc2D.Double( 240, 30, 75, 100, 0, 270, Arc2D.PIE ) );
        
         // draw 2D lines in green and yellow
         g2d.setPaint( Color.green );
         g2d.draw( new Line2D.Double( 395, 30, 320, 150 ) );
        
         float dashes[] = { 10 };
        
         g2d.setPaint( Color.yellow );
         g2d.setStroke( new BasicStroke( 4, BasicStroke.CAP_ROUND, BasicStroke.JOIN_ROUND, 10, dashes, 0 ) );
         g2d.draw( new Line2D.Double( 320, 30, 395, 150 ) );
     }
    
     public static void main( String args[] )
         {
         Shapes app = new Shapes();
        
         app.addWindowListener( new WindowAdapter() 
             {
             public void windowClosing( WindowEvent e )
                 {
                 System.exit( 0 );
             }
         });
     }
}


Drawing Shapes in Java

import javax.swing.*;
import java.awt.event.*;
import java.awt.*;
import java.awt.geom.*;

public class Shapes2 extends JFrame 
    {
     public Shapes2()
         {
         super( "Drawing 2D Shapes" );
         setBackground( Color.yellow );
         setSize( 400, 400 );
         show();
     }
    
     public void paint( Graphics g )
         {
         int xPoints[] = { 55, 67, 109, 73, 83, 55, 27, 37, 1, 43 };
         int yPoints[] = { 0, 36, 36, 54, 96, 72, 96, 54, 36, 36 };
        
         Graphics2D g2d = ( Graphics2D ) g;
        
         // create a star from a series of points
         GeneralPath star = new GeneralPath();
        
         // set the initial coordinate of the General Path
         star.moveTo( xPoints[ 0 ], yPoints[ 0 ] );
        
         // create the star--this does not draw the star
         for ( int k = 1; k < xPoints.length; k++ )
         star.lineTo( xPoints[ k ], yPoints[ k ] );
        
         // close the shape
         star.closePath();
        
         // translate the origin to (200, 200)
         g2d.translate( 200, 200 );
        
         // rotate around origin and draw stars in random colors
         for ( int j = 1; j <= 20; j++ ) 
             {
             g2d.rotate( Math.PI / 10.0 );
             g2d.setColor(new Color( ( int ) ( Math.random() * 256 ),( int ) ( Math.random() * 256 ), 
             ( int ) ( Math.random() * 256 ) ) );
             g2d.fill( star ); // draw a filled star
         }
     }
    
     public static void main( String args[] )
         {
         Shapes2 app = new Shapes2();
        
         app.addWindowListener(new WindowAdapter() 
             {
             public void windowClosing( WindowEvent e )
                 {
                 System.exit( 0 );
             }
         });
     }
}


Drawing two rectangles

package com.ack.gui.awt.geometry;

import java.awt.*;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.geom.Rectangle2D;

public class DrawingTwoRectangles extends Frame {
  public static void main( String[] argv ) {
    DrawingTwoRectangles myExample = new DrawingTwoRectangles( "Drawing rectangles using the 2D api" );
  }

  public DrawingTwoRectangles( String title ) {
    super( title );
    setSize( 300, 180 );
    addWindowListener( new WindowAdapter() {
      public void windowClosing( WindowEvent we ) {
        dispose();
        System.exit( 0 );
      }
    } );
    setVisible( true );
  }

  public void paint( Graphics g ) {
    Graphics2D g2d = (Graphics2D) g;
    g2d.setColor( Color.red );
    Rectangle2D rect1 = new Rectangle2D.Double( 32, 42, 100, 100 );
    Rectangle2D rect2 = new Rectangle2D.Double( 164, 42, 100, 100 );
    g2d.fill( rect1 );
    g2d.draw( rect2 );
  }
}


FontLister

package com.ack.gui.awt.geometry;

import java.awt.*;

public class FontLister {

  public static void main( String[] argv ) {
    Font fonts[] = GraphicsEnvironment.getLocalGraphicsEnvironment().getAllFonts();
    for( int i = 0; i < fonts.length; i++ ) {
      System.out.println( i + " font=" + fonts[i] );
    }
    Font myFont = fonts[2].deriveFont( Font.BOLD, 32 );
  }
}


GeneralPaths

package com.ack.gui.awt.geometry;

import java.awt.*;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.geom.GeneralPath;
import java.awt.geom.Rectangle2D;
import java.awt.image.BufferedImage;

public class GeneralPaths extends Frame {
  public static void main( String[] argv ) {
    GeneralPaths myExample = new GeneralPaths( "General Paths" );
  }

  public GeneralPaths( String title ) {
    super( title );
    setSize( 300, 180 );
    addWindowListener( new WindowAdapter() {
      public void windowClosing( WindowEvent we ) {
        dispose();
        System.exit( 0 );
      }
    } );
    setVisible( true );
  }

  public void paint( Graphics g ) {
    Graphics2D g2d = (Graphics2D) g;
    GeneralPath gp1 = new GeneralPath( GeneralPath.WIND_EVEN_ODD );
    GeneralPath gp2 = new GeneralPath( GeneralPath.WIND_EVEN_ODD );
    gp1.moveTo( 20, 30 );
    gp1.lineTo( 150, 30 );
    gp1.lineTo( 150, 130 );
    gp1.closePath();
    gp2.moveTo( 180, 30 );
    gp2.lineTo( 290, 30 );
    gp2.quadTo( 200, 75, 180, 130 );
    gp2.curveTo( 110, 50, 220, 100, 180, 30 );
    g2d.setPaint( loadTextureResource( "1.gif" ) );
    g2d.fill( gp1 );
    g2d.fill( gp2 );

  }


  public TexturePaint loadTextureResource( String absfilename ) {
    MediaTracker tracker = new MediaTracker( this );
    Image imtexture = Toolkit.getDefaultToolkit().getImage( absfilename );
    tracker.addImage( imtexture, 0 );
    try {
      tracker.waitForID( 0 );
      int width = imtexture.getWidth( this );
      int height = imtexture.getHeight( this );
      System.out.println( "width" + width + " height =" + height );
      BufferedImage buffImg = new
          BufferedImage( width, height, BufferedImage.TYPE_INT_ARGB );
      Graphics g = buffImg.getGraphics();
      g.drawImage( imtexture, 0, 0, this );
      return new TexturePaint( buffImg, new Rectangle2D.Double( 0, 0, width, height ) );
    }
    catch( Exception e ) {
      System.out.println( "Exception on Image-Texture Loading" );
    }
    return null;
  }
}


Paints and strokes
  

package com.ack.gui.awt.geometry;

import java.awt.*;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.geom.Rectangle2D;

public class PaintsAndStrokes extends Frame {
  public static void main( String[] argv ) {
    PaintsAndStrokes myExample = new PaintsAndStrokes( "Paints and strokes" );
  }

  public PaintsAndStrokes( String title ) {
    super( title );
    setSize( 300, 180 );
    addWindowListener( new WindowAdapter() {
      public void windowClosing( WindowEvent we ) {
        dispose();
        System.exit( 0 );
      }
    } );
    setVisible( true );
  }

  public void paint( Graphics g ) {
    Graphics2D g2d = (Graphics2D) g;
    g2d.setColor( Color.red );
    Rectangle2D rect1 = new Rectangle2D.Double( 32, 42, 100, 100 );
    Rectangle2D rect2 = new Rectangle2D.Double( 164, 42, 100, 100 );
    Paint gp = g2d.getPaint();
    g2d.setPaint( new GradientPaint( 32, 42, Color.red, 100, 100, Color.white, true ) );
    g2d.fill( rect1 );
    g2d.setPaint( gp );
    g2d.setStroke( new BasicStroke( 2f, BasicStroke.CAP_ROUND,
                                    BasicStroke.JOIN_ROUND, 3f, new float[]{10f}, 0f ) );
    g2d.draw( rect2 );
  }

}


Text on Circle border

import java.awt.*;
import java.awt.event.*;
import java.awt.geom.*;

    public class CircleTextDemo extends Canvas {
    Frame myframe;
    TextField text;
    Font myfont;
    Color textcolor;
    Color circlecolor;
    
        public CircleTextDemo() {
        this("Serif", Font.PLAIN, 18, Color.pink, Color.black);
    }
    
        public CircleTextDemo(String ff, int fs, int fz, Color bg, Color fg) {
        setBackground(bg);
        circlecolor = bg.brighter();
        textcolor = fg;
        myfont = new Font(ff, fs, fz);
        
        text = new TextField("Text on a circle using Java 2D Graphics!");
        myframe = new Frame("CircleTextDemo");
        myframe.add(text, BorderLayout.NORTH);
        myframe.add(this, BorderLayout.CENTER);
        myframe.setSize(new Dimension(300,340));
        myframe.setLocation(150,140);
            myframe.addWindowListener(new WindowAdapter() {
                public void windowClosing(WindowEvent we) {
                System.exit(0);
            }
        });
            text.addActionListener(new ActionListener() {
                public void actionPerformed(ActionEvent ae) {
                repaint();
            }
        });
        myframe.setVisible(true);
    }
    
        public void paint(Graphics g) {
        String st = text.getText();
        if (st.length() == 0) return;
            if (g instanceof Graphics2D) {
            Dimension cd = getSize();
            Point pt = new Point(cd.width / 2, cd.height / 2);
            int radius = (int)(pt.x * 0.84);
            g.setColor(circlecolor);
            g.drawArc(pt.x - radius, pt.y - radius, 
            radius*2-1, radius*2-1, 
            0, 360);
            g.setColor(textcolor);
            g.setFont(myfont);
            drawCircleText((Graphics2D)g, st, pt, radius, -Math.PI/2, 1.0);
        }
            else {
            System.out.println("Cannot draw curved text without a Graphics2D");
        }
    }
    
    /**
    * Draw a piece of text on a circular curve, one
    * character at a time. This is harder than it looks.
    */
    static void drawCircleText(Graphics2D g, String st, Point center,
    double r, double a1, double af)
        {
        double curangle = a1;
        Point2D c = new Point2D.Double(center.x, center.y);
        char ch[] = st.toCharArray();
        FontMetrics fm = g.getFontMetrics();
        AffineTransform xform1, cxform;
        xform1 = AffineTransform.getTranslateInstance(c.getX(),c.getY());
            for(int i = 0; i < ch.length; i++) {
            double cwid = (double)(getWidth(ch[i],fm));
                if (!(ch[i] == ' ' || Character.isSpaceChar(ch[i]))) {
                cwid = (double)(fm.charWidth(ch[i]));
                cxform = new AffineTransform(xform1);
                cxform.rotate(curangle, 0.0, 0.0);
                String chstr = new String(ch, i, 1);
                g.setTransform(cxform);
                g.drawString(chstr, (float)(-cwid/2), (float)(-r));
            }
            
            // compute advance of angle assuming cwid<
                if (i < (ch.length - 1)) {
                double adv = cwid/2.0 + fm.getLeading() + getWidth(ch[i + 1],fm)/2.0;
                curangle += Math.sin(adv / r);
            }
        }
    }
    
        static int getWidth(char c, FontMetrics fm) {
            if (c == ' ' || Character.isSpaceChar(c)) {
            return fm.charWidth('n');
        }
            else {
            return fm.charWidth(c);
        }
    }
    
        public static void main(String args[]) {
        CircleTextDemo ctd;
        ctd = new CircleTextDemo();
    }
}


TexturedText
  
 

package com.ack.gui.awt.geometry;

import java.awt.*;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.font.FontRenderContext;
import java.awt.font.TextLayout;
import java.awt.geom.AffineTransform;
import java.awt.geom.Rectangle2D;
import java.awt.image.BufferedImage;

public class TexturedText extends Frame {
  public static void main( String[] argv ) {
    TexturedText myExample = new TexturedText( "Using Text Textures" );
  }

  public TexturedText( String title ) {
    super( title );
    setSize( 450, 180 );
    addWindowListener( new WindowAdapter() {
      public void windowClosing( WindowEvent we ) {
        dispose();
        System.exit( 0 );
      }
    } );
    setVisible( true );
  }

  public void paint( Graphics g ) {
    Graphics2D g2d = (Graphics2D) g;
    FontRenderContext frc = g2d.getFontRenderContext();
    Font font = new Font( "Helvetica", Font.ITALIC | Font.BOLD, 72 );
    TextLayout tl = new TextLayout( "Excellent!", font, frc );
    Shape myShape =
        tl.getOutline( AffineTransform.getTranslateInstance( 50, 100 ) );
    Paint myPaint = loadTextureResource( "1.gif" );
    g2d.setPaint( myPaint );
    g2d.fill( myShape );
  }


  public TexturePaint loadTextureResource( String absfilename ) {
    MediaTracker tracker = new MediaTracker( this );
    Image imtexture = Toolkit.getDefaultToolkit().getImage( absfilename );
    tracker.addImage( imtexture, 0 );
    try {
      tracker.waitForID( 0 );
      int width = imtexture.getWidth( this );
      int height = imtexture.getHeight( this );
      System.out.println( "width" + width + " height =" + height );
      BufferedImage buffImg = new
          BufferedImage( width, height, BufferedImage.TYPE_INT_ARGB );
      Graphics g = buffImg.getGraphics();
      g.drawImage( imtexture, 0, 0, this );
      return new TexturePaint( buffImg, new Rectangle2D.Double( 0, 0, width, height ) );
    }
    catch( Exception e ) {
      System.out.println( "Exception on Image-Texture Loading" );
    }
    return null;
  }

}


Transformations
  
 

package com.ack.gui.awt.geometry;

import java.awt.*;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.geom.AffineTransform;
import java.awt.geom.Rectangle2D;

public class Transformations extends Frame {
  public static void main( String[] argv ) {
    Transformations myExample = new Transformations( "Transformations" );
  }

  public Transformations( String title ) {
    super( title );
    setSize( 600, 600 );
    addWindowListener( new WindowAdapter() {
      public void windowClosing( WindowEvent we ) {
        dispose();
        System.exit( 0 );
      }
    } );
    setVisible( true );
  }

  public void paint( Graphics g ) {
    Graphics2D g2d = (Graphics2D) g;
    Rectangle2D rect1 = new Rectangle2D.Double( 132, 42, 100, 100 );
    AffineTransform at = AffineTransform.getRotateInstance( ( 10 * Math.PI ) / 180 );
    at.concatenate( AffineTransform.getScaleInstance( 2, 2 ) );
    at.concatenate( AffineTransform.getShearInstance( 1, 0 ) );
    at.concatenate( AffineTransform.getTranslateInstance( -100, 0 ) );
    g2d.setTransform( at );
    g2d.setColor( Color.red );
    g2d.fill( rect1 );
  }

}


UsingTextures
  
 

package com.ack.gui.awt.geometry;

import java.awt.*;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.geom.Rectangle2D;
import java.awt.image.BufferedImage;

public class UsingTextures extends Frame {
  public static void main( String[] argv ) {
    UsingTextures myExample = new UsingTextures( "Using Textures" );
  }

  public UsingTextures( String title ) {
    super( title );
    setSize( 300, 180 );
    addWindowListener( new WindowAdapter() {
      public void windowClosing( WindowEvent we ) {
        dispose();
        System.exit( 0 );
      }
    } );
    setVisible( true );
  }

  public void paint( Graphics g ) {
    Graphics2D g2d = (Graphics2D) g;
    Rectangle2D rect1 = new Rectangle2D.Double( 32, 42, 100, 100 );
    Rectangle2D rect2 = new Rectangle2D.Double( 164, 42, 100, 100 );
    g2d.setPaint( loadTextureResource( "1.gif" ) );
    g2d.fill( rect1 );
    g2d.setStroke( new BasicStroke( 10f, BasicStroke.CAP_ROUND,
                                    BasicStroke.JOIN_MITER, 2f, new float[]{12f}, 0f ) );
    g2d.draw( rect2 );
  }

  public TexturePaint loadTextureResource( String absfilename ) {
    MediaTracker tracker = new MediaTracker( this );
    Image imtexture = Toolkit.getDefaultToolkit().getImage( absfilename );
    tracker.addImage( imtexture, 0 );
    try {
      tracker.waitForID( 0 );
      int width = imtexture.getWidth( this );
      int height = imtexture.getHeight( this );
      System.out.println( "width" + width + " height =" + height );
      BufferedImage buffImg = new
          BufferedImage( width, height, BufferedImage.TYPE_INT_ARGB );
      Graphics g = buffImg.getGraphics();
      g.drawImage( imtexture, 0, 0, this );
      return new TexturePaint( buffImg, new Rectangle2D.Double( 0, 0, width, height ) );
    }
    catch( Exception e ) {
      System.out.println( "Exception on Image-Texture Loading" );
    }
    return null;
  }


}


Ad Banner Rotator

import java.applet.Applet;
import java.applet.AppletContext;
import java.awt.*;
import java.io.PrintStream;
import java.net.MalformedURLException;
import java.net.URL;
import java.util.StringTokenizer;
import java.util.Vector;

public class BhuBanner extends Applet
    implements Runnable {

    Thread A;
    int B;
    int C;
    int D;
    int E;
    int F;
    int G;
    int H;
    int I;
    int J;
    int K;
    int L;
    int M;
    int N;
    int O;
    int P;
    int Q;
    int R;
    int S;
    int T;
    int U;
    Font V;
    String W;
    String X;
    String Y;
    String Z;
    FontMetrics a;
    Color b;
    Color c;
    Color d;
    Image e;
    Graphics f;
    char g[];
    Vector h;
    Vector i;
    Vector j;
    int k;
    int l;
    int m;
    int n;
    int o;
    int p;
    int q;
    boolean r;
    final int s = 0;
    final int t = 1;
    int u;
    int v[];

    public void init() {
        B = 0;
        h = new Vector(10, 10);
        i = new Vector(10, 10);
        j = new Vector(10, 10);
        B();
        W = (String)h.elementAt(0);
        setBackground(b);
        E = size().width;
        F = size().height;
        v = new int[Q];
        V = new Font(Y, S, I);
        a = getFontMetrics(V);
        J = a.getHeight();
        H = a.stringWidth(W);
        G = (F - a.getHeight()) / 2 + a.getAscent();
        e = createImage(E, F);
        f = e.getGraphics();
        f.setFont(V);
        g = W.toCharArray();
        L = g.length;
        K = (E - H) / 2;
        P = K;
        k = b.getRed();
        l = b.getGreen();
        m = b.getBlue();
        d = c;
        n = c.getRed();
        p = c.getGreen();
        o = c.getBlue();
        for(int i1 = 0; i1 < Q; i1++) {
            String s1 = (String)j.elementAt(i1);
            if(s1.equalsIgnoreCase("DROP"))
                v[i1] = 1;
            else
            if(s1.equalsIgnoreCase("SCROLL"))
                v[i1] = 0;
            else
                v[i1] = 0;
        }

        u = v[0];
    }

    public void B() {
        W = getParameter("TextToDisplay");
        if(W == null)
            W = "String not defined;";
        Q = D(W, h);
        W = getParameter("URLtoDisplay");
        if(W == null)
            W = "";
        D(W, i);
        W = getParameter("Effect");
        if(W == null)
            W = "DROP;SCROLL;DROP";
        D(W, j);
        X = getParameter("FontSize");
        if(X == null)
            I = 24;
        else
            I = Integer.parseInt(X);
        Y = getParameter("FontName");
        if(Y == null)
            Y = "TimesRoman";
        String s1 = getParameter("FontStyle");
        if(s1 == null)
            S = 1;
        else
        if(s1.equalsIgnoreCase("PLAIN"))
            S = 0;
        else
        if(s1.equalsIgnoreCase("BOLD"))
            S = 1;
        else
        if(s1.equalsIgnoreCase("ITALIC"))
            S = 2;
        else
        if(s1.equalsIgnoreCase("BOLDandITALIC"))
            S = 3;
        else
            S = 1;
        Z = getParameter("target");
        if(Z == null)
            Z = "_blank";
        String s2 = getParameter("speed");
        if(s2 == null)
            O = 5;
        else
            O = Integer.parseInt(s2);
        String s3 = getParameter("xStep");
        if(s3 == null)
            T = 20;
        else
            T = Integer.parseInt(s3);
        String s4 = getParameter("yStep");
        if(s4 == null)
            U = 10;
        else
            U = Integer.parseInt(s4);
        String s5 = getParameter("Delay");
        if(s5 == null)
            R = 3000;
        else
            R = Integer.parseInt(s5);
        String s6 = getParameter("bgCOLOR");
        if(s6 == null)
            b = Color.white;
        else
        if((b = C(s6)) == null)
            b = Color.white;
        String s7 = getParameter("textCOLOR");
        if(s7 == null)
            c = Color.black;
        else
        if((c = C(s7)) == null)
            c = Color.black;
        String s8 = getParameter("Author");
        if(s8 == null || !s8.equals("www")) {
            c = Color.black;
            b = Color.black;
        }
        String s9 = getParameter("Email");
        if(s9 == null || !s9.equals("x@xxx")) {
            c = Color.black;
            b = Color.black;
        }
    }

    public int D(String s1, Vector vector) {
        StringTokenizer stringtokenizer = new StringTokenizer(s1, ";", false);
        int i1;
        for(i1 = 0; stringtokenizer.hasMoreTokens(); i1++) {
            String s2 = stringtokenizer.nextToken().trim();
            vector.addElement(s2);
        }

        return i1;
    }

    public Color C(String s1) {
        int i1;
        int j1;
        int k1;
        try {
            i1 = Integer.parseInt(s1.substring(0, s1.indexOf(",")).trim());
            j1 = Integer.parseInt(s1.substring(s1.indexOf(",") + 1, s1.lastIndexOf(",")).trim());
            k1 = Integer.parseInt(s1.substring(s1.lastIndexOf(",") + 1).trim());
        }
        catch(NumberFormatException numberformatexception) {
            System.out.println("can't convert to integer, Switching to default colors" + numberformatexception);
            return null;
        }
        try {
            return new Color(i1, j1, k1);
        }
        catch(IllegalArgumentException illegalargumentexception) {
            System.out.println("can't create new color, Switching to default colors" + illegalargumentexception);
        }
        return null;
    }

    public void start() {
        if(A == null) {
            A = new Thread(this);
            A.start();
        }
    }

    public void stop() {
        if(A != null) {
            A.stop();
            A = null;
        }
    }

    public void destroy() {
        f.dispose();
    }

    public void run() {
        do {
            d = c;
            r = true;
            switch(u) {
            default:
                break;

            case 1: // '\001'
                M = 0;
                for(N = 0; M < L; N++) {
                    if(g[N] == ' ') {
                        M++;
                        N++;
                    }
                    P = K + a.charsWidth(g, 0, M);
                    D = -J;
                    C = P;
                    for(; G - D > U; D += U) {
                        repaint();
                        try {
                            Thread.sleep(O);
                        }
                        catch(InterruptedException interruptedexception) { }
                    }

                    D = G;
                    repaint();
                    try {
                        Thread.sleep(O);
                    }
                    catch(InterruptedException interruptedexception1) { }
                    M++;
                }

                for(int i1 = 0; i1 <= 100; i1 += q) {
                    r = false;
                    A(i1);
                    repaint();
                    try {
                        Thread.sleep(200L);
                    }
                    catch(InterruptedException interruptedexception2) { }
                }

                break;

            case 0: // '\0'
                M = 0;
                for(N = 0; M < L; N++) {
                    if(g[N] == ' ') {
                        M++;
                        N++;
                    }
                    P = K + a.charsWidth(g, 0, M);
                    C = E;
                    D = G;
                    for(; C - P > T; C -= T) {
                        repaint();
                        try {
                            Thread.sleep(O);
                        }
                        catch(InterruptedException interruptedexception3) { }
                    }

                    C = P;
                    repaint();
                    try {
                        Thread.sleep(O);
                    }
                    catch(InterruptedException interruptedexception4) { }
                    M++;
                }

                for(int j1 = 0; j1 <= 100; j1 += q) {
                    r = false;
                    A(j1);
                    repaint();
                    try {
                        Thread.sleep(200L);
                    }
                    catch(InterruptedException interruptedexception5) { }
                }

                break;
            }
            B++;
            if(B > Q - 1)
                B = 0;
            W = (String)h.elementAt(B);
            H = a.stringWidth(W);
            g = W.toCharArray();
            L = g.length;
            K = (E - H) / 2;
            u = v[B];
        } while(true);
    }

    public void A(int i1) {
        int j1 = ((k - n) * i1) / 100 + n;
        int k1 = ((l - p) * i1) / 100 + p;
        int l1 = ((m - o) * i1) / 100 + o;
        d = new Color(j1, k1, l1);
    }

    public void paint(Graphics g1) {
        f.setColor(b);
        f.fillRect(0, 0, E, F);
        f.setColor(d);
        if(r) {
            f.drawChars(g, 0, M, K, G);
            f.drawChars(g, N, 1, C, D);
        } else {
            f.drawString(W, K, G);
        }
        g1.drawImage(e, 0, 0, this);
    }

    public void update(Graphics g1) {
        paint(g1);
    }

    public boolean mouseDown(Event event, int i1, int j1) {
        try {
            getAppletContext().showDocument(new URL((String)i.elementAt(B)), Z);
        }
        catch(MalformedURLException malformedurlexception) {
            System.out.println("Wrong URL");
        }
        return true;
    }

    public BhuBanner() {
        q = 5;
        r = true;
    }
}


Blobs (applet)

import java.awt.event.*;
import java.applet.Applet;

public class Blobs extends Applet implements ActionListener, MouseListener {
 
   final static int SQUARE_SIZE = 8;  // Size of one square in the grid.

   Label message;       // For displaying information to the user.
   
   Choice percentFill;  // When the user clicks the "New Blobs" button
                        // to randomly fill the grid, this menu controlls
                        // the probability that a given square in the grid
                        // is filled.
   
   int rows;     // Number of rows in the grid.  This depend on the size of the applet.
   int columns;  // Number of columns in the grid.  This depend on the size of the applet.
   
   boolean[][] filled;  // filled[r][c] is true if the square at row r, column c is filled.
   
   boolean[][] visited; // visited[r][c] is true if the square at row r, column c has
                        //   has already been visited by the getBlobSize() method.
   

   public void init() {
         // Initialize the applet.  Use a null layout and set the bounds
         // of the components in the applet directly.  The applet listens
         // for mouse clicks on itself.
   
      setLayout(null);
      setBackground(new Color(220,220,255));
      addMouseListener(this);
      
      /* Determine the number of rows and columns and create the
         filled and visited arrays.  Fill the squares at random. */
      
      int width = getSize().width;
      int height = getSize().height;

      rows = (height - 100) / SQUARE_SIZE;
      columns = (width - 20) / SQUARE_SIZE;
      
      filled = new boolean[rows][columns];
      visited = new boolean[rows][columns];
      
      for (int r = 0; r < rows; r++)
         for (int c = 0; c < columns; c++)
            filled[r][c] = (Math.random() < 0.3);
            
      /* Create the components. */
      
      message = new Label("Click a square to get the blob size.", Label.CENTER);
      message.setForeground(Color.blue);
      message.setFont(new Font("Helvetica",Font.PLAIN,14));
      
      percentFill = new Choice();
      percentFill.add("10% fill");
      percentFill.add("20% fill");
      percentFill.add("30% fill");
      percentFill.add("40% fill");
      percentFill.add("50% fill");
      percentFill.add("60% fill");
      percentFill.add("70% fill");
      percentFill.add("80% fill");
      percentFill.add("90% fill");
      percentFill.setBackground(Color.white);
      percentFill.select(2);
      
      Button newButton = new Button("New Blobs");
      newButton.addActionListener(this);
      newButton.setBackground(Color.lightGray);
      
      Button countButton = new Button("Count the Blobs");
      countButton.addActionListener(this);
      countButton.setBackground(Color.lightGray);
      
      /* Add the components to the applet and set their sizes and positions. */
            
      add(message);
      add(newButton);
      add(percentFill);
      add(countButton);
      
      message.setBounds(15, height-75, width-30, 18);
      countButton.setBounds(15, height-50, width-30, 18);
      newButton.setBounds(15, height-25, (width-40)/2, 18);
      percentFill.setBounds(width/2 + 5, height-25, (width-40)/2, 18);
      
   } // end init();
   
   
   public void paint(Graphics g) {
         // Paint the applet, showing the grid of squares.
   
      int width = getSize().width;
      int height = getSize().height;
   
      /* Draw a blue border around the applet. */
   
      g.setColor(Color.blue);
      g.drawRect(0,0,width-1,height-1);
      g.drawRect(1,1,width-3,height-3);
      
      /* Fill the area occupied by the grid with white, then draw
         black lines around this area and between the squares of
         the grid. */
      
      g.setColor(Color.white);
      g.fillRect(10, 10, columns*SQUARE_SIZE, rows*SQUARE_SIZE);
      
      g.setColor(Color.black);
      for (int i = 0; i <= rows; i++)
         g.drawLine(10, 10 + i*SQUARE_SIZE, columns*SQUARE_SIZE + 10, 10 + i*SQUARE_SIZE);
      for (int i = 0; i <= columns; i++)
         g.drawLine(10 + i*SQUARE_SIZE, 10, 10 + i*SQUARE_SIZE, rows*SQUARE_SIZE + 10);
      
      /* Fill "visited" squares with red and "filled" squares with gray.
         Other squares remain white.  */

      for (int r = 0; r < rows; r++)
         for (int c = 0; c < columns; c++) {
            if (visited[r][c]) {
               g.setColor(Color.red);
               g.fillRect(11 + c*SQUARE_SIZE, 11 + r*SQUARE_SIZE, SQUARE_SIZE - 1, SQUARE_SIZE - 1);
            }
            else if (filled[r][c]) {
               g.setColor(Color.gray);
               g.fillRect(11 + c*SQUARE_SIZE, 11 + r*SQUARE_SIZE, SQUARE_SIZE - 1, SQUARE_SIZE - 1);
            }
         }
   
   } // end paint();
   
   
   public void actionPerformed(ActionEvent evt) {
         // When the user clicks a button, call the appropriate method.
      String cmd = evt.getActionCommand();
      if (cmd.equals("New Blobs"))
         fillGrid();
      else if (cmd.equals("Count the Blobs"))
         countBlobs();
   }
   
   
   void fillGrid() {
         // When the user clicks the "New Blobs" button, fill the grid of squares
         // randomly.  The probability that a given square is filled is given by
         // the percentFill Choice menu.  The probabilities corresponding to the
         // items in that menu are 0.1, 0.2,... 0.9.  The visited array is cleared
         // so there won't be any red-colored squares in the grid.
      double probability = (percentFill.getSelectedIndex() + 1) / 10.0;
      for (int r = 0; r < rows; r++)
         for (int c = 0; c < columns; c++) {
            filled[r][c] = (Math.random() < probability);
            visited[r][c] = false;
         }
      message.setText("Click a square to get the blob size.");
      repaint();
   }


   void countBlobs() {
         // When the use clicks the "Count the Blobs" button, find the number
         // of blobs in the grid and report the number in the message Label.
         
      int count = 0; // Number of blobs.
      
      /* First clear out the visited array. The getBlobSize() method will
         mark every filled square that it finds by setting the corresponding
         element of the array to true.  Once a square has been marked as
         visited, it will stay marked until all the blobs have been counted.
         This will prevent the same blob from being counted more than once. */
      
      for (int r = 0; r < rows; r++)
         for (int c = 0; c < columns; c++)
            visited[r][c] = false;
            
      /* For each position in the grid, call getBlobSize() to get the size
         of the blob at that position.  If the sixe is not zero, count a blob.
         Note that if we come to a position that was part of a previously
         counted square, getBlobSize() will return 0 and the blob will not
         be counted again. */
            
      for (int r = 0; r < rows; r++)
         for (int c = 0; c < columns; c++) {
            if (getBlobSize(r,c) > 0)
               count++;
         }
                     
      repaint();  // Note that all the filled squares will be red!
      
      message.setText("The number of blobs is " + count);
            
   } // end countBlobs()
   

   int getBlobSize(int r, int c) {
         // Counts the squares in the blob at position (r,c) in the
         // grid.  Squares are only counted if they are filled and
         // unvisited.  If this routine is called for a position that
         // has been visited, the return value will be zero.
      if (r < 0 || r >= rows || c < 0 || c >= columns) {
            // This position is not in the grid, so there is
            // no blob at this position.
         return 0;
      }
      if (filled[r][c] == false || visited[r][c] == true) {
           // This square is not part of a blob, or else it has
           // already been counted, so return zero.
         return 0;
      }
      visited[r][c] = true;   // Mark the square as visited so that
                              //    we won't count it again during the
                              //    following recursive calls to this method.
      int size = 1;  // Count the square at this position, then count the
                     //   the blobs that are connected to this square
                     //    horizontally or vertically.
      size += getBlobSize(r-1,c);
      size += getBlobSize(r+1,c);
      size += getBlobSize(r,c-1);
      size += getBlobSize(r,c+1);
      return size;
   }  // end getBlobSize()
   
   
   public void mousePressed(MouseEvent evt) {
          // The user has clicked the mouse on the applet.  If the
          // user has clicked on a position in the grid, count
          // the number of squares in the blob at that position.
      int row = (evt.getY() - 10) / SQUARE_SIZE;
      int col = (evt.getX() - 10) / SQUARE_SIZE;
      if (row < 0 || row >= rows || col < 0 || col >= columns) {
         message.setText("Please click on a square!");
         return;
      }
      for (int r = 0; r < rows; r++)
         for (int c = 0; c < columns; c++)
            visited[r][c] = false;  // Clear visited array before counting.
      int size = getBlobSize(row,col);
      if (size == 0)
         message.setText("There is no blob at (" + row + "," + col + ").");
      else if (size == 1)
         message.setText("The blob at (" + row + "," + col + ") contains 1 square.");
      else
         message.setText("The blob at (" + row + "," + col + ") contains " + size + " squares.");
      repaint();
   }
   
   
   public void mouseReleased(MouseEvent e) { }  // Methods required by MouseListener interface
   public void mouseClicked(MouseEvent e) { }
   public void mouseEntered(MouseEvent e) { }
   public void mouseExited(MouseEvent e) { }
   
   
} // end class Blobs


Canvas (Tab Capturing Canvas)

import java.applet.Applet;
import java.awt.*;
import java.awt.event.*;

/**
 * This Canvas class show how to make a canvas part of the tab sequece
 * so that it can be  reached by pressing the tab key.  It also shows
 * how to prevent tab from getting focus to leave the Canvas by
 * consuming the event before it gets propogated to the containing
 * Window.
 */
public class TabCapturingCanvas extends Canvas {
    /**
     * Constructor.
     */
    public TabCapturingCanvas() {
        setBackground(Color.green);
        // Key events must be enabled so that the canvas can consume them.
        enableEvents(AWTEvent.KEY_EVENT_MASK);
    } // constructor()

    /**
     * Override processKeyEvent so that it consumes tab key events.
     * Since consumed AWT events are not delivered to listeners, tab key
     * events that are delivered to this Canvas will not be dispatched
     * to the Window that is listening for them, so the Window will
     * never have the opportinity to respond to the tab by requesting a
     * change of focus.
     */
    protected void processKeyEvent(KeyEvent e) {
        if (e.getKeyCode() == '	') {
            e.consume();
            return;
        } // if
        super.processKeyEvent(e);
    } // processKeyEvent(KeyEvent)

    /**
     * Returns whether this component can be traversed using
     * Tab or Shift-Tab keyboard focus traversal.  If this method
     * returns "false", this component may still request the keyboard
     * focus using requestFocus(), but it will not automatically
     * be assigned focus during tab traversal.
     */
    public boolean isFocusTraversable() {
	return true;
    }

    public Dimension getMinimumSize() {
        return new Dimension(50,50);
    } // getMinimumSize()

    public Dimension getPreferredSize() {
        return new Dimension(50,50);
    } // getPreferredSize()
} // class TabCapturingCanvas


Clock Applet

import java.applet.*;
import java.awt.*;
import java.util.Date;

public class ClockApplet extends Applet implements Runnable {
	Thread timerThread;

	/* Applet Lifestyle Methods */
	public void start() {
		timerThread = new Thread(this, "Clock");
		timerThread.start();
	}
	public void stop() {
		if (timerThread == null)
			return;
		timerThread.stop();
		timerThread = null;
	}
 
	/* Runnable interface method */
	public void run() {
		while (timerThread != null) {
			repaint();	// request a redraw
			try {
				timerThread.sleep(1000);
			} catch (InterruptedException e){ /* do nothing*/ }
		}
	}

	/* AWT method */ 
	public void paint(Graphics g) {
		Date d = new Date();
		g.drawString(d.getHours() + ":" + d.getMinutes() + ":" + d.getSeconds(), 1, 10);
	}
}
/*
<APPLET CODE="ClockApplet.class" WIDTH=60 HEIGHT=12>
(which you cant see until you get a Java-powered browser!)
</APPLET>
*/


Clock Applet

import java.applet.*;
import java.awt.*;
import java.util.Date;

public class ClockApplet extends Applet implements Runnable {
	Thread timerThread;

	/* Applet Lifestyle Methods */
	public void start() {
		timerThread = new Thread(this, "Clock");
		timerThread.start();
	}
	public void stop() {
		if (timerThread == null)
			return;
		timerThread.stop();
		timerThread = null;
	}
 
	/* Runnable interface method */
	public void run() {
		while (timerThread != null) {
			repaint();	// request a redraw
			try {
				timerThread.sleep(1000);
			} catch (InterruptedException e){ /* do nothing*/ }
		}
	}

	/* AWT method */ 
	public void paint(Graphics g) {
		Date d = new Date();
		g.drawString(d.getHours() + ":" + d.getMinutes() + ":" + d.getSeconds(), 1, 10);
	}
}
/*
<APPLET CODE="ClockApplet.class" WIDTH=60 HEIGHT=12>
(which you cant see until you get a Java-powered browser!)
</APPLET>
*/


Color chooser applet.html

import java.awt.*;
import java.awt.event.*;
import java.applet.*;

public class ColorChooserApplet extends Applet implements AdjustmentListener {

   private float[] hsb = new float[3];   // For holding HSB color components.
   
   private int r = 0, g = 0, b = 0;      // The RGB color components.
   
   private Scrollbar hueScroll, brightnessScroll, saturationScroll,  // Scroll bars.
                     redScroll, greenScroll, blueScroll;
   
   private Label hueLabel, brightnessLabel, saturationLabel,  // Display component values.
                 redLabel, greenLabel, blueLabel;
                 
   private Canvas colorCanvas;  // Color patch for displaying the color.
                 
   public void init() {
   
       Color.RGBtoHSB(0,0,0,hsb);  // Get HSB equivalent of RGB = (0,0,0);
       
       /* Create Scrollbars with possible values from 0 to 255. */
       
       hueScroll = new Scrollbar(Scrollbar.HORIZONTAL, (int)(255*hsb[0]), 10, 0, 265);
       saturationScroll = new Scrollbar(Scrollbar.HORIZONTAL, (int)(255*hsb[1]), 10, 0, 265);
       brightnessScroll = new Scrollbar(Scrollbar.HORIZONTAL, (int)(255*hsb[2]), 10, 0, 265);
       redScroll = new Scrollbar(Scrollbar.HORIZONTAL, 0, 10, 0, 265);
       greenScroll = new Scrollbar(Scrollbar.HORIZONTAL, 0, 10, 0, 265);
       blueScroll = new Scrollbar(Scrollbar.HORIZONTAL, 0, 10, 0, 265);
       
       /* Create Labels showing current RGB and HSB values. */
       
       hueLabel = new Label(" H = " + hsb[0]);
       saturationLabel = new Label(" S = " + hsb[1]);
       brightnessLabel = new Label(" B = " + hsb[2]);
       redLabel = new Label(" R = 0");
       greenLabel = new Label(" G = 0");
       blueLabel = new Label(" B = 0");
       
       /* Set background colors for Scrollbars and Labels, so they don't
          inherit the gray background of the applet. */
       
       hueScroll.setBackground(Color.lightGray);
       saturationScroll.setBackground(Color.lightGray);
       brightnessScroll.setBackground(Color.lightGray);
       redScroll.setBackground(Color.lightGray);
       greenScroll.setBackground(Color.lightGray);
       blueScroll.setBackground(Color.lightGray);
       
       hueLabel.setBackground(Color.white);
       saturationLabel.setBackground(Color.white);
       brightnessLabel.setBackground(Color.white);
       redLabel.setBackground(Color.white);
       greenLabel.setBackground(Color.white);
       blueLabel.setBackground(Color.white);
       
       /* Set the applet to listen for changes to the Scrollbars' values */
       
       hueScroll.addAdjustmentListener(this);
       saturationScroll.addAdjustmentListener(this);
       brightnessScroll.addAdjustmentListener(this);
       redScroll.addAdjustmentListener(this);
       greenScroll.addAdjustmentListener(this);
       blueScroll.addAdjustmentListener(this);
       
       /* Create a canvas whose background color will always be set to the
          currently selected color. */
       
       colorCanvas = new Canvas();
       colorCanvas.setBackground(Color.black);
       
       /* Create the applet format, which consists of a row of
          three equal-sized regions holding the Scrollbars,
          the Labels, and the color patch.  The background color
          of the applet is gray, which will show around the edges
          and between components. */
       
       setLayout(new GridLayout(1,3,3,3));
       setBackground(Color.gray);
       Panel scrolls = new Panel();
       Panel labels = new Panel();
       add(scrolls);
       add(labels);
       add(colorCanvas);
       
       /* Add the Scrollbars and the Labels to their respective panels. */
       
       scrolls.setLayout(new GridLayout(6,1,2,2));
       scrolls.add(redScroll);
       scrolls.add(greenScroll);
       scrolls.add(blueScroll);
       scrolls.add(hueScroll);
       scrolls.add(saturationScroll);
       scrolls.add(brightnessScroll);
       
       labels.setLayout(new GridLayout(6,1,2,2));
       labels.add(redLabel);
       labels.add(greenLabel);
       labels.add(blueLabel);
       labels.add(hueLabel);
       labels.add(saturationLabel);
       labels.add(brightnessLabel);
       
   } // end init();
   

   public void adjustmentValueChanged(AdjustmentEvent evt) {
           // This is called when the user has changed the values on
           // one of the scrollbars.  All the scrollbars and labels
           // and the color patch are reset to correspond to the new color.
       int r1, g1, b1;
       r1 = redScroll.getValue();
       g1 = greenScroll.getValue();
       b1 = blueScroll.getValue();
       if (r != r1 || g != g1 || b != b1) {  // One of the RGB components has changed.
          r = r1;
          g = g1;
          b = b1;
          Color.RGBtoHSB(r,g,b,hsb);
       }
       else {  // One of the HSB components has changed.
           hsb[0] = hueScroll.getValue()/255.0F;
           hsb[1] = saturationScroll.getValue()/255.0F;
           hsb[2] = brightnessScroll.getValue()/255.0F;
           int rgb = Color.HSBtoRGB(hsb[0],hsb[1],hsb[2]);
           r = (rgb >> 16) & 0xFF;
           g = (rgb >> 8) & 0xFF;
           b = rgb & 0xFF;
       }
       redLabel.setText(" R = " + r);
       greenLabel.setText(" G = " + g);
       blueLabel.setText(" B = " + b);
       hueLabel.setText(" H = " + hsb[0]);
       saturationLabel.setText(" S = " + hsb[1]);
       brightnessLabel.setText(" B = " + hsb[2]);
       redScroll.setValue(r);
       greenScroll.setValue(g);
       blueScroll.setValue(b);
       hueScroll.setValue((int)(255*hsb[0]));
       saturationScroll.setValue((int)(255*hsb[1]));
       brightnessScroll.setValue((int)(255*hsb[2]));
       colorCanvas.setBackground(new Color(r,g,b));
       colorCanvas.repaint();  // Tell the system to redraw the canvas in its new color.
   } // end adjustmentValueChanged

   
   public Insets getInsets() {
          // The system calls this method to find out how much space to
          // leave between the edges of the applet and the components that
          // it contains.  I want a 3-pixel border at each edge.
      return new Insets(3,3,3,3);
   }
}  // end class ColorChooserApplet


Draw a pie chart

import java.util.*;
 import java.awt.*;
 import java.applet.Applet;

 public class Graph extends Applet {
  int    depth, radius;

 public void init() {
   float value;
   String at = getParameter("width");
   radius = (at != null) ?  Integer.valueOf(at).intValue() : 100;
   at = getParameter("depth");
   depth = (at != null) ? Integer.valueOf(at).intValue() : 20;
   at = getParameter("values");
   PieChartCanvas c = new PieChartCanvas(radius, depth);
   setLayout(new BorderLayout());

   // Create Hashtable to map color name (String) to Color type
   Hashtable colors = new Hashtable();
   colors.put("green", Color.green);
   colors.put("red", Color.red);
   colors.put("blue", Color.blue);
   colors.put("yellow", Color.yellow);
   colors.put("magenta", Color.magenta);
   colors.put("cyan", Color.cyan);
   colors.put("orange", Color.orange);
   colors.put("pink", Color.pink);
   colors.put("white", Color.white);
   colors.put("black", Color.black);

   // "value-color,value-color,..." 
   StringTokenizer t = new StringTokenizer(at, ","); 
   String s;
   int i;
   while (t.hasMoreTokens()) {
     s = t.nextToken();
     i = s.indexOf('-');
     value = Float.valueOf(s.substring(0, i)).floatValue();
     c.addSlice(value, (Color)colors.get(s.substring(i + 1)));
    }

   resize(c.getMinimumSize().width, c.getMinimumSize().height);
   add("Center", c);
   }
 }

 class PieChartCanvas extends Canvas {

   final double aspectFudge = 2.5;
   int radius, depth, called = 1, numSlices = 0;
   float total = 0, value[] = new float[10];
   Color color[] = new Color[10];
   Graphics offGraphics;
   Image gfxBuff;

   public PieChartCanvas(int radius, int depth) {
     this.value = value;
     this.color = color;
     this.radius = radius;
     this.depth = depth;
     }

   public void paint(Graphics g) {
     int startAngle;
     float angle;
     Dimension d = getSize();

     if(gfxBuff == null) {
       gfxBuff = createImage(d.width, d.height);
       offGraphics = gfxBuff.getGraphics();
       offGraphics.setColor(getBackground());
       offGraphics.fillRect(0, 0, d.width, d.height);
       }

     // do the 3d effect
     for(int x = depth; x >= 1; x--) {
       startAngle = -45;
       for(int i = 0; i < numSlices; i++) {
         offGraphics.setColor(color[i].darker());
         angle = Math.round(360 * (value[i] / total));
         offGraphics.fillArc(0, x, radius, (int)(radius / aspectFudge),
             startAngle, (int)angle);
             startAngle += angle;
         }
     }

     // draw the pie slice
     startAngle = -45;
     for(int i = 0; i < numSlices; i++) {
       offGraphics.setColor(color[i]);
       angle = Math.round(360 * (value[i] / total));
       offGraphics.fillArc(0, 0, radius, (int)(radius / aspectFudge),
          startAngle, (int)angle);
          startAngle += angle;
       }
     g.drawImage(gfxBuff, 0, 0, null);
     }

   public void addSlice(float value, Color color) {
     this.value[numSlices] = value;
     this.color[numSlices++] = color;
     total += value;
     }

   public Dimension getPreferredSize() {
     return getMinimumSize();
     }

   public Dimension getMinimumSize() {
     return new Dimension(radius, (int)((radius / aspectFudge) + depth));
     }
   }

 <APPLET CODE=Graph.class WIDTH=150 HEIGHT=150>
   <PARAM NAME="depth"  VALUE="30">
   <PARAM NAME="width"  VALUE="120">
   <PARAM NAME="values" VALUE="1-red,2-green,3-blue">
 </APPLET>


EventDemo

import java.awt.*;
import java.awt.event.*;
import java.applet.*;

public class EventDemo extends Applet implements ActionListener, ItemListener, AdjustmentListener {

      // An applet that displays a shape and some text.  Color of
      // shape and text is controlled by a vertical scroll bar.
      // Color of background is controlled by a horizontal scroll bar.
      // Text to be displayed can be entered in a TextField.
      // Shape to be displayed can be selected from a Choice componnet.
      // Bright or dim colors can be selected using a Chackbox.
      // The display area is implemented as a ColorCanvas; the 
      // ColorCanvas class is defined later in this file.
      
   ColorCanvas display;  // display area
   Choice shapeChoice;   // for selecting which shape to display
   Checkbox brightColors;// for selecting bright or dim colors
   TextField text;       // for entering the text to be displayed
   Scrollbar hScroll;    // horizontal scroll bar
   Scrollbar vScroll;    // vertical scroll bar
      
   public void init() {  // set up contents of applet
             
       setBackground(Color.red);   // background for applet

       Panel displayPanel = new Panel(); // to hold display and scroll bars
       displayPanel.setLayout(new BorderLayout());
       display = new ColorCanvas("Hello World",ColorCanvas.RECT);
       displayPanel.add(display, BorderLayout.CENTER);
       hScroll = new Scrollbar(Scrollbar.HORIZONTAL,50,1,0,100);
       displayPanel.add(hScroll, BorderLayout.SOUTH);
       vScroll = new Scrollbar(Scrollbar.VERTICAL,0,1,0,100);
       displayPanel.add(vScroll, BorderLayout.EAST);
             
       Panel topPanel = new Panel();  // for controls
       topPanel.setBackground(Color.white);
       topPanel.setLayout(new GridLayout(1,3,5,5));
       shapeChoice = new Choice();
       shapeChoice.add("Rectangle");
       shapeChoice.add("Oval");
       shapeChoice.add("RoundRect");
       topPanel.add(shapeChoice);
       brightColors = new Checkbox("Bright Colors");
       topPanel.add(brightColors);
       text = new TextField("Hello World");
       topPanel.add(text);
             
       setLayout(new BorderLayout(1,1));  // applies to applet itself
       add("Center", displayPanel);
       add("North", topPanel);
             
       setDisplayColors();  // defined below
       
       text.addActionListener(this);  // set this applet to listen for events
       hScroll.addAdjustmentListener(this);
       vScroll.addAdjustmentListener(this);
       shapeChoice.addItemListener(this);
       brightColors.addItemListener(this);
             
   } // end of init()
         

   public Insets getInsets() {  // leave border around edge of applet
      return new Insets(1,1,1,1);
   }


   void setDisplayColors() {
        // Set foreground and background colors of display,
        // depending on values of scroll bars and
        // on state of the checkbox.  (Colors are made
        // using Color.getHSBColor(float,float,float),
        // which creates a color given a hue, a satuation,
        // and a brightness.  The parameters must be between
        // 0.0 and 1.0.)
      float backgroundBrightness = hScroll.getValue() / 100.0F;
      float foregroundHue = vScroll.getValue() / 100.0F;
      float saturation = 1.0F;
      float brightness;
      if (brightColors.getState())
         brightness = 1.0F;
      else 
         brightness = 0.6F;
      Color backgroundColor = 
             Color.getHSBColor(0.0F,0.0F,backgroundBrightness);  // A grayscale color
      Color foregroundColor = 
             Color.getHSBColor(foregroundHue,1.0F,brightness);
      display.setBackground(backgroundColor);
      display.setForeground(foregroundColor);
   } // end of setDisplayColors()
         

   public void itemStateChanged(ItemEvent evt) {  // from the ItemListener interface
   
         // An item event could have been generated by shapeChoice or brightColors.
   
      Object source = evt.getSource();  // object that generated the event
      
      if (source == shapeChoice) {
            // user has selected a shape; set the shape
            // that is shown in the display
         switch (shapeChoice.getSelectedIndex()) {
            case 0:
               display.setShape(ColorCanvas.RECT);
               break;
            case 1:
               display.setShape(ColorCanvas.OVAL);
               break;
            case 2:
               display.setShape(ColorCanvas.ROUNDED);
               break;
         }
      }
      else if (source == brightColors) {
            // user has changed the state of the checkbox;
            // reset the colors for the display,
            // and ask the system to redraw the display
         setDisplayColors();
         display.repaint();
      }
   
   } // end itemStateChanged()



   public void actionPerformed(ActionEvent evt) {   // from the ActionListener interface
        
        // This can only be generated by the TextField, because the user has pressed
        // return.  Set the display text to the contents of the TextField, text.
        
      display.setText(text.getText());
   
   } // end of actionPerformed()
         

   public void adjustmentValueChanged(AdjustmentEvent evt) {
   
         // User has changed the value of one of the scroll bars.
         // In thisprogram, it doesn't matter which one.  Respond
         // by setting the display colors.
         
       setDisplayColors();
       display.repaint();
   
   } // end of adjustmentValueChanged()
               
         
} // end of class Event Demo



class ColorCanvas extends Canvas {
       
      // Display a shape and some text.
      // The canvas's setForeground() and setBackground()
      // methods should be called to set the colors to
      // be used for drawing.
       
   private String text; // text to be displayed
   private int shape;   // code for shape to be displayed;
   private Font font;   // used for displaying the text
       
   public final static int RECT = 0;  // shape code for a rectangle
   public final static int OVAL = 1;  // shape code for an oval
   public final static int ROUNDED = 2; // shape code for an round rect

   public ColorCanvas(String text, int shape) {
       this.text = text;   
       this.shape = shape;
       font = new Font("Serif",Font.PLAIN,18);
   }
   
   public void setText(String text) {
      this.text = text;
      repaint();
   }
   
   public void setShape(int shape) {
      this.shape = shape;
      repaint();
   }
       
   public void paint(Graphics g) {
       int width = getSize().width;   // get size of canvas
       int height = getSize().height;
       int shape_left = width / 9;  // compute position and size of shape
       int shape_top = height / 3;
       int shape_width = (7*width / 9);
       int shape_height = (5*height / 9);
       switch (shape) {   // draw the shape
          case RECT:
             g.fillRect(shape_left,shape_top,shape_width,shape_height);
             break;
          case OVAL:
             g.fillOval(shape_left,shape_top,shape_width,shape_height);
             break;
          case ROUNDED:
             g.fillRoundRect(shape_left,shape_top,shape_width,shape_height,24,24);
             break;
       }
       g.setFont(font);
       g.drawString(text,width/9,2*height/9);  // draw the text
   }
       
 }  // end of class ColorCanvas


Fade an Image

import java.applet.*;
 import java.awt.*;
 import java.awt.image.*;
 import java.net.*;

 public class FadeImage extends Applet {
   Image   img, faded;
   int level, sign;
   MediaTracker tracker;
   AlphaFilter f;
   FilteredImageSource fis;

   public void init() {
     level = 0;
     sign =  15;
     tracker = new MediaTracker(this);
     try { 
       img = getImage(new URL(getDocumentBase(), "gumby.gif"));
       tracker.addImage(img,0);
       tracker.waitForID(0); 
       }
     catch (Exception e) {
       e.printStackTrace();
       }
     f = new AlphaFilter();
     f.setLevel(level);
     fis = new FilteredImageSource(img.getSource(), f) ;

     FadeThread ft = new FadeThread();
     ft.delayedFading(this, 20); 
     ft.start();
     }

   public void paint(Graphics g) {
     if (faded != null) {
        g.drawImage(faded,0,0,this);
        }
     }

   public void fadeIt() {
     Graphics g = this.getGraphics();
     level += sign;
     if (level < 0) {
        level=0; 
        sign = sign * -1;
        }
     if (level > 255) {
        level=255; 
        sign =  sign * -1;
      try {
        Thread.sleep(1000);
        }
      catch (Exception e) {}
        }
     f.setLevel(level);
     if (faded != null) faded.flush();
     faded = this.createImage(fis);
     tracker.addImage(faded,0);
     try { 
       tracker.waitForID(0); 
       }
     catch (Exception ex) {
       ex.printStackTrace();
       }
     repaint();
     }

   class FadeThread extends Thread {
     FadeImage fadeApplet;
     int delay; 

     public void delayedFading(FadeImage f, int delay) {
       this.fadeApplet = f;
       this.delay = delay;
       }

     public void run() {
       while (true) {
         try {
           sleep(delay);
           fadeApplet.fadeIt();
           } 
         catch (Exception e) {
           e.printStackTrace();
           }
         }
       }
     }

    class AlphaFilter extends RGBImageFilter {
      private int level;

      public AlphaFilter() { 
        canFilterIndexColorModel = true;
        }

      public void setLevel(int lev) {
        level = lev;
        }

      public int filterRGB(int x, int y, int rgb) {
        int a = level * 0x01000000;
        return (rgb &   0x00ffffff) | a;
        }
      }
 }


Listle leters console applet


/* Simulation of console-I/O program ListLetters,
   using ConsoleApplet as a basis.  See the file
   ConsoleApplet.java for more information.
*/

public class ListLettersConsole extends ConsoleApplet {

   protected String getTitle() {
      return "Sample program "ListLetters"";
   }

   protected void program() {

      /* This program reads a line of text entered by the user.
         It prints a list of the letters that occur in the text,
         and it reports how many different letters were found.
      */
      
      String str;  // Line of text entered by the user.
      int count;   // Number of different letters found in str.
      char letter; // A letter of the alphabet.
     
      console.putln("Please type in a line of text.");
      str = console.getln();
     
      str = str.toUpperCase();
     
      count = 0;
      console.putln("Your input contains the following letters:");
      console.putln();
      console.put("   ");
      for ( letter = 'A'; letter <= 'Z'; letter++ ) {
          int i;  // Position of a character in str.
          for ( i = 0; i < str.length(); i++ ) {
              if ( letter == str.charAt(i) ) {
                  console.put(letter);
                  console.put(' ');
                  count++;
                  break;
              }
          }
      }

      console.putln();
      console.putln();
      console.putln("There were " + count + " different letters.");


   }
}


Parameters info

import java.applet.*;
import java.awt.*;

/** Null Demo, just demonstrates getParameterInfo() and getAppletInfo() */
public class ParmInfoDemo extends Applet {

	/** Init routine: set a font, initialize UI components. */
	public void init() {
		setLayout(new FlowLayout());

		String psize = getParameter("fontsize"); 
		if (psize == null) psize = "12";
		System.out.println("Fontsize is " + psize);
		Font f = new Font("Helvetica", Font.PLAIN,
			Integer.parseInt(psize));
		Label l = new Label("Font Demo");
		l.setFont(f);
		add(l);
	}

	/** Return information about this applet. */
	public String getAppletInfo() {
		return "ParmInfoDemo Applet, Version 0\n" +
			;
	}

	/** Return list of allowable parameters. */
	public String[][] getParameterInfo() {
		String param_info[][] = {
			{"fontsize",    "10-20",    "Size of font"},
		};
		return param_info;
	}
}
/*
<APPLET CODE="ParmInfoDemo.class" WIDTH=300 HEIGHT=60>
	<PARAM NAME="fontsize" VALUE="20">
	<P>You need Java to view this!</P>
</APPLET>
*/


Random strings applet



import java.awt.*;
import java.applet.*;

public class RandomStrings extends Applet {

   String message;  // The message to be displayed.  This can be set in
                    // an applet param with name "message".  If no
                    // value is provided in the applet tag, then 
                    // the string "Java!" is used as the default.
   
   Font font1, font2, font3, font4, font5;  // The five fonts.
   
   public void init() {
   
      message = getParameter("message");
      if (message == null)
         message = "Java!";
         
      font1 = new Font("Serif", Font.BOLD, 14);
      font2 = new Font("SansSerif", Font.BOLD + Font.ITALIC, 24);
      font3 = new Font("Monospaced", Font.PLAIN, 20);
      font4 = new Font("Dialog", Font.PLAIN, 30);
      font5 = new Font("Serif", Font.ITALIC, 36);
      
      setBackground(Color.black);
      
   } // end init()
   
   
   public void paint(Graphics g) {
   
      int width = getSize().width;       // Get the applet's width and height.
      int height = getSize().height;
   
      for (int i = 0; i < 25; i++) {
      
          // Draw one string.  First, set the font to be one of the five
          // available fonts, at random.  
      
          int fontNum = (int)(5*Math.random()) + 1;
          switch (fontNum) {
             case 1:
                g.setFont(font1);
                break;
             case 2:
                g.setFont(font2);
                break;
             case 3:
                g.setFont(font3);
                break;
             case 4:
                g.setFont(font4);
                break;
             case 5:
                g.setFont(font5);
                break;
          } // end switch

          // Set the color to be a bright, saturated color, with a random hue.
          
          float hue = (float)Math.random();
          g.setColor( Color.getHSBColor(hue, 1.0F, 1.0F) );

          // Select the position of the string, at random.
          
          int x,y;
          x = -50 + (int)(Math.random()*(width+40));
          y = (int)(Math.random()*(height+20));

          // Draw the message.
          
          g.drawString(message,x,y);
          
      }
      
   }  // end paint()
   

}  // end class RandomStrings


Sending a file from Applet to Servlet

import java.awt.*;
import java.awt.event.*;
import java.net.*;
import java.io.*;
import javax.swing.*;


public class TestApplet extends JApplet implements ActionListener
    {
    
     JButton jbutton = null;
     public void init()
         {
         jbutton = new JButton("Send file");
         jbutton.addActionListener(this);
         this.getContentPane().add(jbutton);
     }
    
     public void actionPerformed(ActionEvent ae)
         {
         if(ae.getSource() == jbutton)
             {
             try
                 {
                 File file = new File("C:\uma.txt");
                
                 FileInputStream in = new FileInputStream(file);
                 byte[] buf=new byte[in.available()];
                 int bytesread = 0;
                
                
                 String toservlet = "http://localhost:8080/servlet/MyServlet";
                
                 URL servleturl = new URL(toservlet);
                 URLConnection servletconnection = servleturl.openConnection();
                 servletconnection.setDoInput(true);
                 servletconnection.setDoOutput(true);
                 servletconnection.setUseCaches(false);
                 servletconnection.setDefaultUseCaches(false);
                
                 DataOutputStream out=new DataOutputStream(servletconnection.getOutputStream());
                
                 while( (bytesread = in.read( buf )) > -1 )
                     {
                     out.write( buf, 0, bytesread );
                 }
                
                 out.flush();
                 out.close();
                 in.close();
                
                 DataInputStream inputFromClient = new DataInputStream(servletconnection.getInputStream());
                 //get what you want from servlet
                 //.......
                 inputFromClient.close();
             }
             catch(Exception e)
                 {
                 e.printStackTrace();
             }
            
            
         }
     }
    
}


import javax.servlet.*;
import javax.servlet.http.*;
import java.io.*;

public class MyServlet extends HttpServlet
    {
     public void doPost(HttpServletRequest req,HttpServletResponse res)
         {
        
         ServletContext sc = this.getServletContext();
         try
             {
             String fileName = "uma.txt";
             String path = sc.getRealPath(File.separator)+fileName;
            
             File yourFile = new File(path);
             FileOutputStream toFile = new FileOutputStream( yourFile );
             DataInputStream fromClient = new DataInputStream( req.getInputStream() );
            
             byte[] buff = new byte[1024];
             int cnt = 0;
                 while( (cnt = fromClient.read( buff )) > -1 ) {
                 toFile.write( buff, 0, cnt );
             }
             toFile.flush();
             toFile.close();
             fromClient.close();
            
         }
         catch(Exception e)
             {
             e.printStackTrace();
         }
     }
}


Socket Applet

import java.applet.*;
import java.awt.*;
import java.awt.event.*;
import java.io.*;
import java.net.*;

public class SocketApplet extends Applet {
	TextField nameTF, passTF, domainTF;
	Image im;
	Button sendButton;
	/** Where the Applet came from */
	URL whence;

	//+
	/** Initialize the GUI nicely. */
	public void init() {
		Label aLabel;

		setLayout(new GridBagLayout());
		int LOGO_COL = 1;
		int LABEL_COL = 2;
		int TEXT_COL = 3;
		int BUTTON_COL = 1;
		GridBagConstraints gbc = new GridBagConstraints();
		gbc.weightx = 100.0; gbc.weighty = 100.0;

		gbc.gridx = LABEL_COL; gbc.gridy = 0; 
		gbc.anchor = GridBagConstraints.EAST;
		add(aLabel = new Label("Name:", Label.CENTER), gbc);
		gbc.anchor = GridBagConstraints.CENTER;
		gbc.gridx = TEXT_COL; gbc.gridy = 0;
		add(nameTF=new TextField(10), gbc);

		gbc.gridx = LABEL_COL; gbc.gridy = 1;
		gbc.anchor = GridBagConstraints.EAST;
		add(aLabel = new Label("Password:", Label.CENTER), gbc);
		gbc.anchor = GridBagConstraints.CENTER;
		gbc.gridx = TEXT_COL; gbc.gridy = 1;
		add(passTF=new TextField(10), gbc);
		passTF.setEchoChar('*');

		gbc.gridx = LABEL_COL; gbc.gridy = 2;
		gbc.anchor = GridBagConstraints.EAST;
		add(aLabel = new Label("Domain:", Label.CENTER), gbc);
		gbc.anchor = GridBagConstraints.CENTER;
		gbc.gridx = TEXT_COL; gbc.gridy = 2;
		add(domainTF=new TextField(10), gbc);
		sendButton = new Button("Send data");
		gbc.gridx = BUTTON_COL; gbc.gridy = 3;
		gbc.gridwidth = 3;
		add(sendButton, gbc);

		whence = getCodeBase();

		// Now the action begins...
		sendButton.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent evt) {
				String name = nameTF.getText();
				if (name.length() == 0) {
					showStatus("Name required");
					return;
				}
				String domain = domainTF.getText();
				if (domain.length() == 0) {
					showStatus("Domain required");
					return;
				}
				showStatus("Connecting to host " + whence.getHost() +
					" as " + nameTF.getText());

				try {
					Socket s = new Socket(getCodeBase().getHost(), 
						SocketServer.PORT);
					PrintWriter pf = new PrintWriter(s.getOutputStream(), true);
					// send login name
					pf.println(nameTF.getText());
					// passwd
					pf.println(passTF.getText());
					// and domain
					pf.println(domainTF.getText());

					BufferedReader is = new BufferedReader(
						new InputStreamReader(s.getInputStream()));
					String response = is.readLine();
					showStatus(response);
				} catch (IOException e) {
					showStatus("ERROR: " + e.getMessage());
				}
			}
		});
	}
	//-
}
/*
<APPLET CODE="SocketApplet" width=300 height=120>
</APPLET>
*/


Timer Applet

import java.applet.*;
import java.awt.*;

public class TimerApplet extends Applet implements Runnable
    {
     private String msg2 = new String("");
     private int secs;
     private int mins;
     private int hrs;
     private Thread clock;
     public int time =300000;
    
     public void destroy()
         {
         clock.stop();
     }
    
     public void init()
         {
         String parameter;
        
         if(clock == null)
             {
             clock = new Thread(this);
             clock.start();
         }
     }
    
     public void paint(Graphics gr)
         {
         ++secs;
         if(secs == 60)
             {
             mins++;
             secs = 0;
         }
         if(mins == 60)
             {
             hrs++;
             secs = 0;
             mins = 0;
         }
         //gr.setFont(bigFont);
         gr.setColor(Color.red);
         //gr.drawString(msg1,10,100);
         gr.drawString(" "+ hrs + " Hours " + mins + " Minutes " + secs + " Seconds", 10, 130);
         gr.drawString(msg2,10,150);
         setBackground(Color.black);
     }
    
     public void run()
         {
         while(true)
             {
             repaint();
             try
                 {
                 clock.sleep(1000);
             }
             catch(InterruptedException e)
                 {
             }
         }
     }
    
     public void start()
         {
         clock.resume();
     }
    
     public void stop()
         {
         clock.suspend();
     }
}


Try running a CGI-BIN script from within Java

import java.awt.*;
import java.awt.event.*;
import java.applet.*;
import java.net.*;

/**
 * Try running a CGI-BIN script from within Java.
 */
public class TryCGI extends Applet implements ActionListener {
	protected Button goButton;

	public void init() {
		add(goButton = new Button("Go for it!"));
		goButton.addActionListener(this);
	}

	public void actionPerformed(ActionEvent evt) {
		try {
			URL myNewURL = new URL("http://server/cgi-bin/credit");

			// debug...
			System.out.println("URL = " + myNewURL);

			// "And then a miracle occurs..."
			getAppletContext().showDocument(myNewURL);

		} catch (Exception err) {
			System.err.println("Error!\n" + err);
			showStatus("Error, look in Java Console for details!");
		}
	}
}
/*
<APPLET CODE="TryCGI" WIDTH=100 HEIGHT=30>
<P>If you can see this, you need to get a Java-powered(tm) Web Browser
before you can watch for real.
</APPLET>
*/


URL Redirector

import java.awt.*;
import java.awt.event.*;
import java.applet.*;
import java.net.*;

public class Redir extends Applet implements Runnable {
	protected String urlString;
	protected URL theNewURL;
	protected final static int NSECONDS = 5;
	protected Thread t;

	public void init() {
		try {
			// Get the address from a PARAM...
			urlString = getParameter("URL");
			if (urlString == null)  {
				urlString = "MISSING URL";
				throw new IllegalArgumentException(
				"Redir requires a URL parameter in the HTML");
			}

			// Make up the URL object
			theNewURL = new URL(urlString);

			// debug...
			// showStatus("URL = " + theNewURL);

		} catch (Exception err) {
			System.err.println("Error!\n" + err);
			showStatus("Error, look in Java Console for details!");
		}
	}

	public void start() {
		if (theNewURL == null)
			return;

		t = new Thread(this);
		t.start();
	}

	/** Print a little message to the user. */
	public void paint(Graphics g) {
		if (urlString != null)
			g.drawString(urlString, 20, 50);
		else
			g.drawString("Initializing...", 20, 50);
	}

	/** If users moves off the page, set Thread t to null so
	 * we don't showDocument from within the middle of the new page!
	 */
	public void stop() {
		t = null;
	}

	/** run, called by the Thread, does the work of sleeping
	 * for a fixed number of seconds then, if the user hasn't
	 * moved off the page, actually passing control to the new page.
	 */
	public void run() {
		for (int i=NSECONDS; i>=0; i--) {
			try {
				Thread.sleep(1000);
				if (t == null)
					return;
			} catch (InterruptedException e) {
				// so what?
			}
			if (t == null)
				return;
			showStatus(Integer.toString(i));

			if (t == null)
				return;

			showStatus("Ignition!");
			// "And then a miracle occurs..."
			getAppletContext().showDocument(theNewURL);
		}
	}
}
/*
<APPLET CODE=Redir.class WIDTH=300 HEIGHT=100 ">	
</APPLET>
*/


Walking Text

import java.applet.*;
import java.awt.*;

public class WalkingText extends Applet implements Runnable {
	protected String mesg = null;
	protected int  xloc, yloc, width, height, textWidth, textHeight;
	protected Thread t;
	protected boolean done = false;
	/** How long to nap for each move */
	protected int napTime = 150;

	/** Applet Initializer */
	public void init() {
		xloc = 0;
		width = getSize().width;
		height = getSize().height;

		if ((mesg = getParameter("text")) == null)
			mesg = "Hello World of Java";

		String pSize = getParameter("fontsize"); 
		if (pSize == null)
			pSize = "12";

		String fontName = getParameter("fontName"); 
		if (fontName == null)
			fontName = "Helvetica";

		// System.out.println("Font is " + pSize + " point " + fontName);
		Font f = new Font(fontName, Font.PLAIN, Integer.parseInt(pSize));
		setFont(f);

		FontMetrics fm = getToolkit().getFontMetrics(f);
		textWidth = fm.stringWidth(mesg);
		textHeight = fm.getHeight();
		// System.out.println("TextWidth " + textWidth + ", ht " + textHeight);

		// use textHeight in y coordinate calculation
		yloc = height - ((height-textHeight) / 2);
	}

	/** This is important: we create a thread, so we must kill it */
	public void stop() {
		done = true;
		t = null;
	}

	/** create the thread and start it. */
	public void start() {
		if (t == null)
			t = new Thread(this);
		done = false;
		t.start();
	}

	// Usage:
	public String[][] getParameterInfo() {
		String[][] params = {
			{ "text", "text", "Text to walk across the screen" },
			{ "fontName", "text", "Name of font to display in" },
			{ "fontsize", "int", "How big to make the text" },
		};

		return params;
	}


	/** Run is called by the Thread class when there is work to do */
	public void run() {
		while (!done) {
			if ((xloc+=5) > getSize().width)
				xloc = 0;
			repaint();
			try {
				Thread.sleep(napTime);
			} catch (Exception e) {
				System.out.println("Who dares to interrupt my Sleep()? " + e);
			};
		}
	}

	/** Paint is called by Applet to redraw the screen */
	public void paint(Graphics g) {
		g.drawString(mesg, xloc, yloc);
		// if ((xloc + textWidth) > getSize().width) {
		// 	int negLoc = textWidth-(width-xloc);
		// 	System.out.println("xloc, textWidth, negLoc: " + xloc + "," +
		// 			textWidth + ", " + negLoc);
		// 	g.drawString(mesg, negLoc, yloc);
		// }
	}
}
/*
<APPLET CODE="WalkingText" WIDTH=500 HEIGHT=70>
	<PARAM NAME=FontName Value="Helvetica">
	<PARAM NAME=FontSize Value="24">
</APPLET>
*/


Border layout demo

 import java.awt.*;
 import java.awt.event.*;
 import javax.swing.*;

 public class BorderLayoutDemo extends JFrame
 implements ActionListener {
 private JButton b[];
 private String names[] =
 { "Hide North", "Hide South", "Hide East",
 "Hide West", "Hide Center" };
 private BorderLayout layout;

 public BorderLayoutDemo()
 {
 super( "BorderLayout Demo" );

 layout = new BorderLayout( 5, 5 );

 Container c = getContentPane();
 c.setLayout( layout );

 // instantiate button objects
 b = new JButton[ names.length ];

 for ( int i = 0; i < names.length; i++ ) {
 b[ i ] = new JButton( names[ i ] );
 b[ i ].addActionListener( this );
 }

 // order not important
 c.add( b[ 0 ], BorderLayout.NORTH ); // North position
 c.add( b[ 1 ], BorderLayout.SOUTH ); // South position
 c.add( b[ 2 ], BorderLayout.EAST ); // East position
 c.add( b[ 3 ], BorderLayout.WEST ); // West position
 c.add( b[ 4 ], BorderLayout.CENTER ); // Center position

 setSize( 300, 200 );
 show();
 }

 public void actionPerformed( ActionEvent e )
 {
 for ( int i = 0; i < b.length; i++ )
 if ( e.getSource() == b[ i ] )
 b[ i ].setVisible( false );
 else
 b[ i ].setVisible( true );

 // re-layout the content pane
 layout.layoutContainer( getContentPane() );
 }

 public static void main( String args[] )
 {
 BorderLayoutDemo app = new BorderLayoutDemo();

 app.addWindowListener(
 new WindowAdapter() {
 public void windowClosing( WindowEvent e )
 {
 System.exit( 0 );
 }
 }
 );
 }
 }


Box Layout Demo

 import javax.swing.*;
 import java.awt.*;
 import java.awt.event.*;

 public class BoxLayoutDemo extends JFrame {
 public BoxLayoutDemo()
 {
 super( "Demostrating BoxLayout" );
 final int SIZE = 3;

 Container c = getContentPane();
 c.setLayout( new BorderLayout( 30, 30 ) );

 Box boxes[] = new Box[ 4 ];

 boxes[ 0 ] = Box.createHorizontalBox();
 boxes[ 1 ] = Box.createVerticalBox();
 boxes[ 2 ] = Box.createHorizontalBox();
 boxes[ 3 ] = Box.createVerticalBox();

 // add buttons to boxes[ 0 ]
 for ( int i = 0; i < SIZE; i++ )
 boxes[ 0 ].add( new JButton( "boxes[0]: " + i ) );

 // create strut and add buttons to boxes[ 1 ]
 for ( int i = 0; i < SIZE; i++ ) {
 boxes[ 1 ].add( Box.createVerticalStrut( 25 ) );
 boxes[ 1 ].add( new JButton( "boxes[1]: " + i ) );
 }

 // create horizontal glue and add buttons to boxes[ 2 ]
 for ( int i = 0; i < SIZE; i++ ) {
 boxes[ 2 ].add( Box.createHorizontalGlue() );
 boxes[ 2 ].add( new JButton( "boxes[2]: " + i ) );
 }

 // create rigid area and add buttons to boxes[ 3 ]
 for ( int i = 0; i < SIZE; i++ ) {
 boxes[ 3 ].add(
 Box.createRigidArea( new Dimension( 12, 8 ) ) );
 boxes[ 3 ].add( new JButton( "boxes[3]: " + i ) );
 }

 // create horizontal glue and add buttons to panel
 JPanel panel = new JPanel();
 panel.setLayout(
 new BoxLayout( panel, BoxLayout.Y_AXIS ) );

 for ( int i = 0; i < SIZE; i++ ) {
 panel.add( Box.createGlue() );
 panel.add( new JButton( "panel: " + i ) );
 }

 // place panels on frame
 c.add( boxes[ 0 ], BorderLayout.NORTH );
 c.add( boxes[ 1 ], BorderLayout.EAST );
 c.add( boxes[ 2 ], BorderLayout.SOUTH );
 c.add( boxes[ 3 ], BorderLayout.WEST );
 c.add( panel, BorderLayout.CENTER );

 setSize( 350, 300 );
 show();
 }
 public static void main( String args[] )
 {
 BoxLayoutDemo app = new BoxLayoutDemo();

 app.addWindowListener(
 new WindowAdapter() {
 public void windowClosing( WindowEvent e )
 {
 System.exit( 0 );
 }
 }
 );
 }
 }


CheckBox Demo

import java.awt.*;

public class Checkboxes extends CloseableFrame {
  public static void main(String[] args) {
    new Checkboxes();
  }

  public Checkboxes() {
    super("Checkboxes");
    setFont(new Font("SansSerif", Font.BOLD, 18));
    setLayout(new GridLayout(0, 2));
    Checkbox box;
    for(int i=0; i<12; i++) {
      box = new Checkbox("Checkbox " + i);
      if (i%2 == 0) {
        box.setState(true);
      }
      add(box);
    }
    pack();
    setVisible(true);
  }
}


CheckBoxGroup Demo

import java.applet.Applet;
import java.awt.*;

public class CheckboxGroups extends Applet {
  public void init() {
    setLayout(new GridLayout(4, 2));
    setBackground(Color.lightGray);
    setFont(new Font("Serif", Font.BOLD, 16));
    add(new Label("Flavor", Label.CENTER));
    add(new Label("Toppings", Label.CENTER));
    CheckboxGroup flavorGroup = new CheckboxGroup();
    add(new Checkbox("Vanilla", flavorGroup, true));
    add(new Checkbox("Colored Sprinkles"));
    add(new Checkbox("Chocolate", flavorGroup, false));
    add(new Checkbox("Cashews"));
    add(new Checkbox("Strawberry", flavorGroup, false));
    add(new Checkbox("Kiwi"));
  }
}
/*
<APPLET CODE="CheckboxGroups.class" WIDTH=400 HEIGHT=150>
</APPLET>
*/


Choice Demo

import java.applet.Applet;
import java.awt.*;
import java.awt.event.*;

public class ChoiceTest2 extends Applet 
                         implements ItemListener {
  private Choice choice;

  public void init() {
    setFont(new Font("SansSerif", Font.BOLD, 36));
    choice = new Choice();
    choice.addItem("Choice 1");
    choice.addItem("Choice 2");
    choice.addItem("Choice 3");
    choice.addItemListener(this);
    add(choice);
  }

  public void itemStateChanged(ItemEvent event) {
    Choice choice = (Choice)event.getSource();
    String selection = choice.getSelectedItem();
    if (selection.equals("Choice 1")) {
      doChoice1Action();
    } else if (selection.equals("Choice 2")) {
      doChoice2Action();
    } else if (selection.equals("Choice 3")) {
      doChoice3Action();
    }
  }

  private void doChoice1Action() {
    System.out.println("Choice 1 Action");
  }

  private void doChoice2Action() {
    System.out.println("Choice 2 Action");
  }

  private void doChoice3Action() {
    System.out.println("Choice 3 Action");
  }
}
/*
<APPLET CODE="ChoiceTest2.class" WIDTH=275 HEIGHT=150>
</APPLET>
*/


ComboBox Demo

 // Using a JComboBox to select an image to display.
 import java.awt.*;
 import java.awt.event.*;
 import javax.swing.*;

 public class ComboBoxTest extends JFrame {
 private JComboBox images;
 private JLabel label;
 private String names[] =
 { "bug1.gif", "bug2.gif",
 "travelbug.gif", "buganim.gif" };
 private Icon icons[] =
 { new ImageIcon( names[ 0 ] ),
 new ImageIcon( names[ 1 ] ),
 new ImageIcon( names[ 2 ] ),
 new ImageIcon( names[ 3 ] ) };

 public ComboBoxTest()
 {
 super( "Testing JComboBox" );

 Container c = getContentPane();
 c.setLayout( new FlowLayout() );

 images = new JComboBox( names );
 images.setMaximumRowCount( 3 );

 images.addItemListener(
 new ItemListener() {
 public void itemStateChanged( ItemEvent e )
 {
 label.setIcon(
 icons[ images.getSelectedIndex() ] );
 }
 }
 );

 c.add( images );

 label = new JLabel( icons[ 0 ] );
 c.add( label );

 setSize( 350, 100 );
 show();
 }

 public static void main( String args[] )
 {
 ComboBoxTest app = new ComboBoxTest();

 app.addWindowListener(
 new WindowAdapter() {
 public void windowClosing( WindowEvent e )
 {
 System.exit( 0 );
 }
 }
 );
 }
}


Creating Checkbox buttons

import java.applet.Applet;
import java.awt.*;

public class MyCheckbox extends Applet {
   private Font f;
   private TextField t;
   private Checkbox checkBold, checkItalic;

   public void init()
   {
      t = new TextField( "Sample Text", 30 );

      // instantiate checkbox objects
      checkBold = new Checkbox( "Bold" );
      checkItalic = new Checkbox();  
      checkItalic.setLabel( "Italic" );  // set checkbox label

      f = new Font( "TimesRoman", Font.PLAIN, 14 );
      t.setFont( f ); 

      add( t );
      add( checkBold );     // unchecked (false) by default
      add( checkItalic );   // unchecked (false) by default
   }

   public boolean action( Event e, Object o )
   {
      int b, i;

      // Check for Checkbox event
      if ( e.target instanceof Checkbox ) {

         // test state of bold checkbox
         if ( checkBold.getState() == true  )  
            b = Font.BOLD;
         else
            b = Font.PLAIN;   // value of 0

         // test state of italic checkbox
         if ( checkItalic.getState() == true )
            i = Font.ITALIC;
         else
            i = Font.PLAIN;   // value of 0
         
         f = new Font( "TimesRoman", b + i, 14 );
         t.setFont( f );
      }

      return true;
   }
}


Creating radio buttons using CheckboxGroup and Checkbox

import java.applet.Applet;
import java.awt.*;

public class RadioButton extends Applet {
   private TextField t;
   private Font f;
   private CheckboxGroup radio;
   private Checkbox radioBold, radioItalic,
                    radioPlain;

   public void init()
   {
      t = new TextField( "Sample Text", 40 );

      // instantiate checkbox group (i.e. radio buttons)
      radio = new CheckboxGroup(); 
      
      add( t );   // add textfield

      // instantiate radio button objects 
      add( radioPlain = new Checkbox( "Plain", radio, true ) );
      add( radioItalic = new Checkbox( "Italic", radio, false ) );  
      add( radioBold = new Checkbox( "Bold", radio, false ) );
   }

   public boolean action( Event e, Object o )
   {
      int style;

      // Check for Checkbox event
      if ( e.target instanceof Checkbox) {

         // test state of radio buttons
         if ( radioPlain.getState() == true  )  
            style = Font.PLAIN;
         else if ( radioItalic.getState() == true )
            style = Font.ITALIC;
         else
            style = Font.BOLD;  
 
         f = new Font( "TimesRoman", style, 14 );
         t.setFont( f );
      }

      return true;
   }
}


Demonstrating a programmer-defined layout manager

import java.applet.Applet;
import java.awt.*;

public class UserLayout extends Applet {
   private Choice cb1, cb2;
   private Button b1, b2, b3;

   public void init()
   {
      // use the v layout manager
      setLayout( new VLayout() );

      cb1 = new Choice();
      cb1.addItem( "Item 1" );
      cb1.addItem( "Item 2" );

      cb2 = new Choice();
      cb2.addItem( "Choice 1" );
      cb2.addItem( "Choice 2" );

      b1 = new Button( "Button 1" );
      b2 = new Button( "Button 2" );
      b3 = new Button( "Button 3" );

      // order is important
      add( cb1 );
      add( b1 );
      add( b2 );
      add( b3 );
      add( cb2 );
   }
}

// create class for user defined layout
class VLayout implements LayoutManager {

   public void layoutContainer( Container c )
   {    
      int numberOfComponents = c.countComponents();

      if ( numberOfComponents > 5 )
         numberOfComponents = 5;

      Insets i = c.insets();
      int w = c.size().width - i.left - i.right;
      int h = c.size().height - i.bottom - i.top;
      int x = 0, y = 0;

      // calculate x and y values for each component
      for ( int j = 0; j < numberOfComponents; j++ ) {
         Component comp = c.getComponent( j );
         Dimension d = comp.preferredSize();
         
         switch ( j ) {
            case 0:  // first component
               x = ( int ) ( 0.2 * w );
               y = ( int ) ( 0.25 * h );
               break;
            case 1:  // second component
               x = ( int ) ( 0.3 * w );
               y = ( int ) ( 0.5 * h );
               break;
            case 2:  // third component
               x = ( int ) ( 0.4 * w );
               y = ( int ) ( 0.75 * h );
               break;
            case 3:  // fourth component
               x = ( int ) ( 0.5 * w );
               y = ( int ) ( 0.5 * h );
               break;
            case 4:  // fifth component
               x = ( int ) ( 0.6 * w );
               y = ( int ) ( 0.25 * h );
               break;            
         }

         // size the component
         comp.reshape( x, y, d.width, d.height ); 
      }
   }

   // These last four methods must be overridden
   // However our layout manager does not use them
   public void addLayoutComponent( String s, Component c )
   { }  // empty

   public void removeLayoutComponent( Component c )
   { } // empty

   public Dimension preferredLayoutSize( Container c )
   {  return minimumLayoutSize( c );  }

   public Dimension minimumLayoutSize( Container c ) 
   {  return new Dimension( 0, 0 );   }    
}


Demonstrating CardLayout

 import javax.swing.*;
 import java.awt.*;
 import java.awt.event.*;

 public class CardDeck extends JFrame implements ActionListener
 {
	 private CardLayout cardManager;
	 private JPanel deck;
	 private JButton controls[];
	 private String names[] = { "First card", "Next card", "Previous card", "Last card" };

	 public CardDeck()
	 {
		 super( "CardLayout " );

		 Container c = getContentPane();

		 // create the JPanel with CardLayout
		 deck = new JPanel();
		 cardManager = new CardLayout();
		 deck.setLayout( cardManager );

		 // set up card1 and add it to JPanel deck
		 JLabel label1 = new JLabel( "card one", SwingConstants.CENTER );
		 JPanel card1 = new JPanel();
		 card1.add( label1 );
		 deck.add( card1, label1.getText() ); // add card to deck

		 // set up card2 and add it to JPanel deck
		 JLabel label2 = new JLabel( "card two", SwingConstants.CENTER );
		 JPanel card2 = new JPanel();

		 card2.setBackground( Color.yellow );
		 card2.add( label2 );
		 deck.add( card2, label2.getText() ); // add card to deck

		 // set up card3 and add it to JPanel deck
		 JLabel label3 = new JLabel( "card three" );
		 JPanel card3 = new JPanel();
		 card3.setLayout( new BorderLayout() );
		 card3.add( new JButton( "North" ), BorderLayout.NORTH );
		 card3.add( new JButton( "West" ), BorderLayout.WEST );
		 card3.add( new JButton( "East" ), BorderLayout.EAST );
		 card3.add( new JButton( "South" ), BorderLayout.SOUTH );
		 card3.add( label3, BorderLayout.CENTER );

		 deck.add( card3, label3.getText() ); // add card to deck

		 // create and layout buttons that will control deck
		 JPanel buttons = new JPanel();
		 buttons.setLayout( new GridLayout( 2, 2 ) );
		 controls = new JButton[ names.length ];

		 for ( int i = 0; i < controls.length; i++ )
		 {
			 controls[ i ] = new JButton( names[ i ] );
			 controls[ i ].addActionListener( this );
			 buttons.add( controls[ i ] );
		 }

		 // add JPanel deck and JPanel buttons to the applet
		 c.add( buttons, BorderLayout.WEST );
		 c.add( deck, BorderLayout.EAST );

		 setSize( 450, 200 );
		 show();
	 }

	 public void actionPerformed( ActionEvent e )
	 {
		 if ( e.getSource() == controls[ 0 ] )
			 cardManager.first( deck ); // show first card
		 else if ( e.getSource() == controls[ 1 ] )
			 cardManager.next( deck ); // show next card
		 else if ( e.getSource() == controls[ 2 ] )
			 cardManager.previous( deck ); // show previous card
		 else if ( e.getSource() == controls[ 3 ] )
			 cardManager.last( deck ); // show last card
	 }

	 public static void main( String args[] )
	 {
		 CardDeck cardDeckDemo = new CardDeck();

		 cardDeckDemo.addWindowListener( new WindowAdapter()
		 {
			 public void windowClosing( WindowEvent e )
			 {
				 System.exit( 0 );
			 }
		 } );
	 }
 }


Demonstrating Colors

 import java.awt.*;
 import javax.swing.*;
 import java.awt.event.*;

 public class ShowColors extends JFrame 
 {
	 public ShowColors()
	 {
		 super( "Using colors" );

		 setSize( 400, 130 );
		 show();
	 }

	 public void paint( Graphics g )
	 {
		 // set new drawing color using integers
		 g.setColor( new Color( 255, 0, 0 ) );
		 g.fillRect( 25, 25, 100, 20 );
		 g.drawString( "Current RGB: " + g.getColor(), 130, 40 );

		 // set new drawing color using floats
		 g.setColor( new Color( 0.0f, 1.0f, 0.0f ) );
		 g.fillRect( 25, 50, 100, 20 );
		 g.drawString( "Current RGB: " + g.getColor(), 130, 65 );

		 // set new drawing color using static Color objects
		 g.setColor( Color.blue );
		 g.fillRect( 25, 75, 100, 20 );
		 g.drawString( "Current RGB: " + g.getColor(), 130, 90 );

		 // display individual RGB values
		 Color c = Color.magenta;
		 g.setColor( c );
		 g.fillRect( 25, 100, 100, 20 );
		 g.drawString( "RGB values: " + c.getRed() + ", " + c.getGreen() + ", " + c.getBlue(), 130, 115 );
	 }

	 public static void main( String args[] )
	 {
		 ShowColors app = new ShowColors();

		 app.addWindowListener( new WindowAdapter() 
		 {
			 public void windowClosing( WindowEvent e )
			 {
				 System.exit( 0 );
			 }
		 } );
	 }
 }


Demonstrating FontMetrics

 import java.awt.*;
 import java.awt.event.*;
 import javax.swing.*;

 public class Metrics extends JFrame 
 {
	 public Metrics()
	 {
		 super( "Demonstrating FontMetrics" );

		 setSize( 510, 210 );
		 show();
	 }

	 public void paint( Graphics g )
	 {
		 g.setFont( new Font( "SansSerif", Font.BOLD, 12 ) );
		 FontMetrics fm = g.getFontMetrics();
		 g.drawString( "Current font: " + g.getFont(), 10, 40 );
		 g.drawString( "Ascent: " + fm.getAscent(), 10, 55 );
		 g.drawString( "Descent: " + fm.getDescent(), 10, 70 );
		 g.drawString( "Height: " + fm.getHeight(), 10, 85 );
		 g.drawString( "Leading: " + fm.getLeading(), 10, 100 );

		 Font font = new Font( "Serif", Font.ITALIC, 14 );
		 fm = g.getFontMetrics( font );
		 g.setFont( font );
		 g.drawString( "Current font: " + font, 10, 130 );
		 g.drawString( "Ascent: " + fm.getAscent(), 10, 145 );
		 g.drawString( "Descent: " + fm.getDescent(), 10, 160 );
		 g.drawString( "Height: " + fm.getHeight(), 10, 175 );
		 g.drawString( "Leading: " + fm.getLeading(), 10, 190 );
	 }

	 public static void main( String args[] )
	 {
		 Metrics app = new Metrics();

		 app.addWindowListener( new WindowAdapter() 
		 {
			 public void windowClosing( WindowEvent e )
			 {
				 System.exit( 0 );
			 }
		 });
	 }
 }


Demonstrating keystroke events

 import javax.swing.*;
 import java.awt.*;
 import java.awt.event.*;

 public class KeyDemo extends JFrame implements KeyListener 
 {
	 private String line1 = "", line2 = "";
	 private String line3 = "";
	 private JTextArea textArea;

	 public KeyDemo()
	 {
		 super( "Demonstrating Keystroke Events" );

		 textArea = new JTextArea( 10, 15 );
		 textArea.setText( "Press any key on the keyboard..." );
		 textArea.setEnabled( false );

		 // allow frame to process Key events
		 addKeyListener( this );

		 getContentPane().add( textArea );

		 setSize( 350, 100 );
		 show();
	 }

	 public void keyPressed( KeyEvent e )
	 {
		 line1 = "Key pressed: " + e.getKeyText( e.getKeyCode() );
		 setLines2and3( e );
	 }

	 public void keyReleased( KeyEvent e )
	 {
		 line1 = "Key released: " + e.getKeyText( e.getKeyCode() );
		 setLines2and3( e );
	 }

	 public void keyTyped( KeyEvent e )
	 {
		 line1 = "Key typed: " + e.getKeyChar();
		 setLines2and3( e );
	 }

	 private void setLines2and3( KeyEvent e )
	 {
		 line2 = "This key is " + ( e.isActionKey() ? "" : "not " ) + "an action key";

		 String temp = e.getKeyModifiersText( e.getModifiers() );

		 line3 = "Modifier keys pressed: " + ( temp.equals( "" ) ? "none" : temp );

		 textArea.setText( line1 + "\n" + line2 + "\n" + line3 + "\n" );
	 }

	 public static void main( String args[] )
	 {
		 KeyDemo app = new KeyDemo();

		 app.addWindowListener( new WindowAdapter() 
		 {
			 public void windowClosing( WindowEvent e )
			 {
				 System.exit( 0 );
			 }
		 } );
	 }
}


Demonstrating method mouseDrag

import java.applet.Applet;
import java.awt.*;

public class Drag extends Applet {
   private int xValue, yValue;
   private boolean firstTime;

   public void init()
   {
      // first running of program
      firstTime = true;
   }

   public void paint( Graphics g )
   {
      // do not draw the first time
      if ( !firstTime )
         g.fillOval( xValue, yValue, 4, 4 );
   }

   // override Component class update
   public void update( Graphics g )
   {
      // do not clear background
      // only call paint
      paint( g );  
   }                
       
   public boolean mouseDrag( Event e, int x, int y )
   {
      xValue = x; 
      yValue = y;

      // enable drawing
      firstTime = false;

      repaint();     // call repaint
      showStatus( "Event: mouseDrag" );

      return true;   // event handled
   }
}


Demonstrating methods controlDown, metaDown and shiftDown

import java.applet.Applet;
import java.awt.*;

public class MetaShiftCtrl extends Applet {
   private TextField meta, shift, ctrl;

   public void init()
   {
      meta = new TextField( 10 );
      shift = new TextField( 10 );
      ctrl = new TextField( 10 );

      meta.setEditable( false );
      ctrl.setEditable( false );
      shift.setEditable( false );

      add( meta );
      add( shift );
      add( ctrl );
   }

   public boolean handleEvent( Event e )
   {
      if ( e.metaDown() )
         meta.setText( " META" );

      if ( e.controlDown() )
         ctrl.setText( " CTRL" );

      if ( e.shiftDown() )
         shift.setText( "SHIFT" );             

      return true;   // event has been handled
   }
}


Demonstrating methods keyUp and keyDown

import java.applet.Applet;
import java.awt.*;

public class Key extends Applet {
   private Font f;
   private String letter;
   private boolean first;

   public void init()
   {
      f = new Font( "Courier", Font.BOLD, 72 );
      first = true;
   }

   public void paint( Graphics g )
   {
      g.setFont( f );

      if ( !first )
         g.drawString( letter, 75, 70 );
   }

   public boolean keyDown( Event e, int key )
   {
      showStatus( "keyDown: the " + ( char ) key +
                  " was pressed." );

      letter = String.valueOf( ( char ) key );
      first = false;
      repaint();

      return true;   // event has been handled
   }

   public boolean keyUp( Event e, int key )
   {
      showStatus( "keyUp: the " + ( char ) key +
                  " was released." );

      return true;   // event has been handled
   }
}


Demonstrating mouse Event constants

import java.applet.Applet;
import java.awt.*;

public class MouseEvents extends Applet {
   private List eventList;

   public void init()
   {
      eventList = new List( 6, false );
      add( eventList );
   }

   public boolean handleEvent( Event e )
   {
      // determine which mouse event occured
      switch ( e.id ) {
         case Event.MOUSE_UP:
            eventList.addItem( "Mouse up" );
            return true;

         case Event.MOUSE_DOWN:
            eventList.addItem( "Mouse down" );
            return true;

         case Event.MOUSE_MOVE:
            showStatus( "Mouse move" );
            return true;

         case Event.MOUSE_ENTER:
            eventList.addItem( "Mouse enter");
            return true;

         case Event.MOUSE_EXIT:
            eventList.addItem( "Mouse exit" );
            return true;

         case Event.MOUSE_DRAG:
            showStatus( "Mouse drag" );
            return true;
      }

      // not one of our mouse events
      showStatus( "Not one of the mouse events!" );
      return true;  // done processing
   }
}


Demonstrating mouse events

 import java.awt.*;
 import java.awt.event.*;
 import javax.swing.*;

 public class MouseTracker extends JFrame implements MouseListener, MouseMotionListener
 {
	 private JLabel statusBar;

	 public MouseTracker()
	 {
		 super( "Demonstrating Mouse Events" );

		 statusBar = new JLabel();
		 getContentPane().add( statusBar, BorderLayout.SOUTH );

		 // application listens to its own mouse events
		 addMouseListener( this );
		 addMouseMotionListener( this );

		 setSize( 275, 100 );
		 show();
	 }

	 // MouseListener event handlers
	 public void mouseClicked( MouseEvent e )
	 {
		 statusBar.setText( "Clicked at [" + e.getX() + ", " + e.getY() + "]" );
	 }

	 public void mousePressed( MouseEvent e )
	 {
		 statusBar.setText( "Pressed at [" + e.getX() + ", " + e.getY() + "]" );
	 }

	 public void mouseReleased( MouseEvent e )
	 {
		 statusBar.setText( "Released at [" + e.getX() + ", " + e.getY() + "]" );
	 }

	 public void mouseEntered( MouseEvent e )
	 {
		 statusBar.setText( "Mouse in window" );
	 }

	 public void mouseExited( MouseEvent e )
	 {
		 statusBar.setText( "Mouse outside window" );
	 }

	 // MouseMotionListener event handlers
	 public void mouseDragged( MouseEvent e )
	 {
		 statusBar.setText( "Dragged at [" + e.getX() + ", " + e.getY() + "]" );
	 }

	 public void mouseMoved( MouseEvent e )
	 {
		 statusBar.setText( "Moved at [" + e.getX() + ", " + e.getY() + "]" );
	 }

	 public static void main( String args[] )
	 {
		 MouseTracker app = new MouseTracker();

		 app.addWindowListener( new WindowAdapter()
		 {
			 public void windowClosing( WindowEvent e )
			 {
				 System.exit( 0 );
			 }
		 } );
	 }
 }


Demonstrating the null layout manager

import java.applet.Applet;
import java.awt.*;

public class NoLayout extends Applet {
   private Choice cb;
   private Button b1, b2, b3;
    
   public void init()
   {
      // do not use a layout manager
      setLayout( null );

      cb = new Choice();
      cb.addItem( "Item 1" );
      cb.addItem( "Item 2" );
      cb.addItem( "Item 3" );

      b1 = new Button( "Button" );
      b2 = new Button( "Another Button" );
      b3 = new Button( "Last Button" );

      add( cb );
      add( b1 );
      add( b2 );
      add( b3 );   

      b1.reshape( 15, 9, 60, 26 );
      b2.reshape( 100, 40, 90, 22 );
      b3.reshape( 220, 20, 70, 55);
      cb.reshape( 50, 80, 70, 17);       
   }
}


Display a Splash screen

import java.applet.Applet;
import java.awt.*;

public class MyLabel extends Applet {
   private Font f;
   private Label noLabel, textLabel; 

   public void init()
   {
      f = new Font( "Courier", Font.BOLD, 14 );

      // call label constructor with no text
      noLabel = new Label();

      // call label constructor with a string argument
      textLabel = new Label( "This is read-only text" );

      // set font for text displayed in label
      textLabel.setFont( f );

      // add label components to applet container
      add( noLabel );
      add( textLabel );
   }
}


Display all available Font families and Font Faces

public static void main(String args[])
    {
     // Get all font family names
     GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
     String fontNames[] = ge.getAvailableFontFamilyNames();
     Font[] fonts = ge.getAllFonts();
    
         for (int i=0; i         //System.out.println(fontNames[i]);
     }
    
     // Display some font sizes
     String fontSizes[] = new String[64];
         for ( int i = 0; i < fontSizes.length; i++ ){
         fontSizes[i] = Integer.toString( i+7 );
         //System.out.println(fontSizes[i]);
     }
    
     // Process each font
         for (int i=0; i         // Get font's family and face
         String familyName = fonts[i].getFamily();
         String faceName = fonts[i].getName();
         System.out.println(familyName);
         System.out.println(faceName);
     }
}


Display an Image in Canvas

import java.awt.*;
import java.awt.image.*;

     public class ImageCanvas extends Canvas {
     Image image;
    
         public ImageCanvas(String name) {
         MediaTracker media = new MediaTracker(this);
         image = Toolkit.getDefaultToolkit().getImage(name);
         media.addImage(image, 0);
             try {
             media.waitForID(0); 
         }
         catch (Exception e) {}
     }
    
         public ImageCanvas(ImageProducer imageProducer) {
         image = createImage(imageProducer);
     }
    
         public void paint(Graphics g) {
         g.drawImage(image, 0,0, this);
     }
    
         public static void main(String argv[]) {
             if (argv.length < 1) {
             System.out.println
             ("usage: ImageCanvas.class [image file name]");
             System.exit(0);
         }
         Frame frame = new Frame(argv[0]);
         frame.setLayout(new BorderLayout());
         frame.add("Center", new ImageCanvas(argv[0]));
         frame.resize(400,400);
         frame.show();
     }
}


Draw random lines, rectangles and ovals

 import java.awt.*;
 import java.awt.event.*;
 import javax.swing.*;

 public class DrawShapes extends JApplet 
 {
	 private JButton choices[];
	 private String names[] = { "Line", "Rectangle", "Oval" };
	 private JPanel buttonPanel;
	 private DrawPanel drawingArea;
	 private int width = 300, height = 200;

	 public void init()
	 {
		 drawingArea = new DrawPanel( width, height );

		 choices = new JButton[ names.length ];
		 buttonPanel = new JPanel();
		 buttonPanel.setLayout( new GridLayout( 1, choices.length ) );
		 ButtonHandler handler = new ButtonHandler();

		 for ( int i = 0; i < choices.length; i++ ) 
		 {
			 choices[ i ] = new JButton( names[ i ] );
			 buttonPanel.add( choices[ i ] );
			 choices[ i ].addActionListener( handler );
		 }
		 Container c = getContentPane();
		 c.add( buttonPanel, BorderLayout.NORTH );
		 c.add( drawingArea, BorderLayout.CENTER );
	 }

	 public void setWidth( int w )
	 { 
		 width = ( w >= 0 ? w : 300 ); 
	 }

	 public void setHeight( int h )
	 { 
		 height = ( h >= 0 ? h : 200 ); 
	 }

	 public static void main( String args[] )
	 {
		 int width, height;

		 if ( args.length != 2 ) 
		 { 
			 // no command-line arguments
			 width = 300;
			 height = 200;
		 }
		 else 
		 {
			 width = Integer.parseInt( args[ 0 ] );
			 height = Integer.parseInt( args[ 1 ] );
		 }

		 // create window in which applet will execute
		 JFrame applicationWindow = new JFrame( "An applet running as an application" );

		 applicationWindow.addWindowListener( new WindowAdapter() 
		 {
			 public void windowClosing( WindowEvent e )
			 {
				 System.exit( 0 );
			 }
		 } );

		 // create one applet instance
		 DrawShapes appletObject = new DrawShapes();
		 appletObject.setWidth( width );
		 appletObject.setHeight( height );

		 // call applet's init and start methods
		 appletObject.init();
		 appletObject.start();

		 // attach applet to center of window
		 applicationWindow.getContentPane().add( appletObject );

		 // set the window's size
		 applicationWindow.setSize( width, height );

		 // showing the window causes all GUI components
		 // attached to the window to be painted
		 applicationWindow.show();
	 }

	 private class ButtonHandler implements ActionListener 
	 {
		 public void actionPerformed( ActionEvent e )
		 {
			 for ( int i = 0; i < choices.length; i++ )
				 if ( e.getSource() == choices[ i ] ) 
				 {
					 drawingArea.setCurrentChoice( i );
					 break;
				 }
		 }
	 }
 }

 // subclass of JPanel to allow drawing in a separate area
 class DrawPanel extends JPanel 
 {
	 private int currentChoice = -1; // don't draw first time
	 private int width = 100, height = 100;
	 public DrawPanel( int w, int h )
	 {
		 width = ( w >= 0 ? w : 100 );
		 height = ( h >= 0 ? h : 100 );
	 }

	 public void paintComponent( Graphics g )
	 {
		 super.paintComponent( g );

		 switch( currentChoice ) 
		 {
			 case 0:
				 g.drawLine( randomX(), randomY(), randomX(), randomY() );
				 break;
			 case 1:
				 g.drawRect( randomX(), randomY(), randomX(), randomY() );
				 break;
			 case 2:
				 g.drawOval( randomX(), randomY(), randomX(), randomY() );
				 break;
		 }
	 }

	 public void setCurrentChoice( int c )
	 {
		 currentChoice = c;
		 repaint();
	 }
	 private int randomX()
	 { 
		 return (int) ( Math.random() * width ); 
	 }

	 private int randomY()
	 { 
		 return (int) ( Math.random() * height ); 
	 }
 }


Drawing Arcs

  import java.awt.*;
 import javax.swing.*;
 import java.awt.event.*;

 public class DrawArcs extends JFrame 
 {
	 public DrawArcs()
	 {
		 super( "Drawing Arcs" );
		 setSize( 300, 170 );
		 show();
	 }

	 public void paint( Graphics g )
	 {
		 // start at 0 and sweep 360 degrees
		 g.setColor( Color.yellow );
		 g.drawRect( 15, 35, 80, 80 );
		 g.setColor( Color.black );
		 g.drawArc( 15, 35, 80, 80, 0, 360 );
		 // start at 0 and sweep 110 degrees
		 g.setColor( Color.yellow );
		 g.drawRect( 100, 35, 80, 80 );
		 g.setColor( Color.black );
		 g.drawArc( 100, 35, 80, 80, 0, 110 );

		 // start at 0 and sweep -270 degrees
		 g.setColor( Color.yellow );
		 g.drawRect( 185, 35, 80, 80 );
		 g.setColor( Color.black );
		 g.drawArc( 185, 35, 80, 80, 0, -270 );

		 // start at 0 and sweep 360 degrees
		 g.fillArc( 15, 120, 80, 40, 0, 360 );

		 // start at 270 and sweep -90 degrees
		 g.fillArc( 100, 120, 80, 40, 270, -90 );

		 // start at 0 and sweep -270 degrees
		 g.fillArc( 185, 120, 80, 40, 0, -270 );
	 }

	 public static void main( String args[] )
	 {
		 DrawArcs app = new DrawArcs();

		 app.addWindowListener( new WindowAdapter() 
		 {
			 public void windowClosing( WindowEvent e )
			 {
				 System.exit( 0 );
			 }
		 } );
	}
 }


Drawing lines, rectangles and ovals

 import java.awt.*;
 import java.awt.event.*;
 import javax.swing.*;

 public class LinesRectsOvals extends JFrame 
 {
	 private String s = "Using drawString!";

	 public LinesRectsOvals()
	 {
		 super( "Drawing lines, rectangles and ovals" );

		 setSize( 400, 165 );
		 show();
	 }

	 public void paint( Graphics g )
	 {
		 g.setColor( Color.red );
		 g.drawLine( 5, 30, 350, 30 );

		 g.setColor( Color.blue );
		 g.drawRect( 5, 40, 90, 55 );
		 g.fillRect( 100, 40, 90, 55 );

		 g.setColor( Color.cyan );
		 g.fillRoundRect( 195, 40, 90, 55, 50, 50 );
		 g.drawRoundRect( 290, 40, 90, 55, 20, 20 );

		 g.setColor( Color.yellow );
		 g.draw3DRect( 5, 100, 90, 55, true );
		 g.fill3DRect( 100, 100, 90, 55, false );

		 g.setColor( Color.magenta );
		 g.drawOval( 195, 100, 90, 55 );
		 g.fillOval( 290, 100, 90, 55 );
	 }

	 public static void main( String args[] )
	 {
		 LinesRectsOvals app = new LinesRectsOvals();

		 app.addWindowListener( new WindowAdapter() 
		 {
			 public void windowClosing( WindowEvent e )
			 {
				 System.exit( 0 );
			 }
		 });
	 }
 }


Drawing Polygons

 import java.awt.*;
 import java.awt.event.*;
 import javax.swing.*;

 public class DrawPolygons extends JFrame 
 {
	 public DrawPolygons()
	 {
		 super( "Drawing Polygons" );
		 setSize( 275, 230 );
		 show();
	 }

	 public void paint( Graphics g )
	 {
		 int xValues[] = { 20, 40, 50, 30, 20, 15 };
		 int yValues[] = { 50, 50, 60, 80, 80, 60 };
		 Polygon poly1 = new Polygon( xValues, yValues, 6 );

		 g.drawPolygon( poly1 );

		 int xValues2[] = { 70, 90, 100, 80, 70, 65, 60 };
		 int yValues2[] = { 100, 100, 110, 110, 130, 110, 90 };

		 g.drawPolyline( xValues2, yValues2, 7 );

		 int xValues3[] = { 120, 140, 150, 190 };
		 int yValues3[] = { 40, 70, 80, 60 };

		 g.fillPolygon( xValues3, yValues3, 4 );

		 Polygon poly2 = new Polygon();
		 poly2.addPoint( 165, 135 );
		 poly2.addPoint( 175, 150 );
		 poly2.addPoint( 270, 200 );
		 poly2.addPoint( 200, 220 );
		 poly2.addPoint( 130, 180 );

		 g.fillPolygon( poly2 );
	 }

	 public static void main( String args[] )
	 {
		 DrawPolygons app = new DrawPolygons();

		 app.addWindowListener( new WindowAdapter() 
		 {
			 public void windowClosing( WindowEvent e )
			 {
				 System.exit( 0 );
			 }
		 } );
	 }
}


Drawing using the Mouse

public class MousePaint extends Frame implements MouseMotionListener
    {
     private int x1, y1, x2, y2;
     public MousePaintII()
         {
         addWindowListener(new WindowAdapter()
             {
             public void windowClosing(WindowEvent we)
                 {
                 dispose();
                 System.exit(0);
             }
         });
         addMouseMotionListener(this);
         setBounds(50,50,400,250);
         setVisible(true);
     }
     public static void main(String[] argv)
         {
         new MousePaintII();
     }
     public void update(Graphics g)
         {
         paint(g);
     }
     public void paint(Graphics g)
         {
         g.setColor(Color.black);
         g.drawLine(x1, y1, x2, y2);
     }
     public void mouseDragged(MouseEvent me)
         {
         me.consume();
         int x = me.getX();
         int y = me.getY();
         if ( x1 == 0 )
             {
             x1 = x;
         }
         if ( y1 == 0 )
             {
             y1 = y;
         }
         x2 = x;
         y2 = y;
         repaint();
         x1 = x2;
         y1 = y2;
     }
     public void mouseMoved(MouseEvent me)
     { }
}


Finding Width and Height of an Image

import java.awt.*;
import javax.swing.*;

public class ImageXY
    {
     public static void main(String[] args)
         {
        
         Image image = Toolkit.getDefaultToolkit().getImage("test.jpg");
         ImageIcon icon = new ImageIcon(image);
         int height = icon.getIconHeight();
         int width = icon.getIconWidth();
         System.out.println("height"+height);
         System.out.println("width"+width);
     }
}


FocusListener example

import java.awt.*;
import java.awt.event.*;

public class FocusListenertest extends Frame implements FocusListener
    {
     Button b1,b2;
    
     public FocusListenertest()
         {
         add(b1=new Button ("First"),"South");
         add(b2=new Button ("Second"),"North");
         b1.addFocusListener(this);
         b2.addFocusListener(this);
         setSize(200,200);
         //pack(); //Takes minimum size for the window
     }
     public void focusGained(FocusEvent fe) //method of focuslistener
         {
         if(fe.getSource()==b1)
         System.out.println(b1.getLabel()+"gained");
         if(fe.getSource()==b2)
         System.out.println(b2.getLabel()+"gained");
         if(fe.isTemporary())
         System.out.println("Temporary Focus");
     }
     public void focusLost(FocusEvent fe) //in focusevent "getID()"is a method
         {
         if(fe.getSource()==b1)
         System.out.println(b1.getLabel()+"lost");
         if(fe.getSource()==b2)
         System.out.println(b2.getLabel()+"lost");
     }
     public static void main(String a[])
         {
         new FocusListenertest().setVisible(true);
     }
}


Grid Layout Demo

 import java.awt.*;
 import java.awt.event.*;
 import javax.swing.*;

 public class GridLayoutDemo extends JFrame
 implements ActionListener {
 private JButton b[];
 private String names[] =
 { "one", "two", "three", "four", "five", "six" };
 private boolean toggle = true;
 private Container c;
 private GridLayout grid1, grid2;

 public GridLayoutDemo()
 {
 super( "GridLayout Demo" );

 grid1 = new GridLayout( 2, 3, 5, 5 );
 grid2 = new GridLayout( 3, 2 );

 c = getContentPane();
 c.setLayout( grid1 );

 // create and add buttons
 b = new JButton[ names.length ];

 for (int i = 0; i < names.length; i++ ) {
 b[ i ] = new JButton( names[ i ] );
 b[ i ].addActionListener( this );
 c.add( b[ i ] );
 }

 setSize( 300, 150 );
 show();
 }

 public void actionPerformed( ActionEvent e )
 {
 if ( toggle )
 c.setLayout( grid2 );
 else
 c.setLayout( grid1 );

 toggle = !toggle;
 c.validate();
 }

 public static void main( String args[] )
 {
 GridLayoutDemo app = new GridLayoutDemo();

 app.addWindowListener(
 new WindowAdapter() {

 public void windowClosing( WindowEvent e )
 {
 System.exit( 0 );
 }
 }
 );
 }
 }


Paint Shapes and Text of different colors and fonts

import java.awt.*;
import java.awt.event.*;
import javax.swing.*;
import javax.swing.event.*;

public class Painter2 extends JFrame {
   private int topX, topY, width, fontSize,
      height, bottomX, bottomY, shape;
   private boolean clear, textOn, filled;
   private Color drawingColor;
   private String font;
   private JTextField text;
   private JPanel panel1, panel2, panel3, panel4;
   private JRadioButton ovalBox, rectBox, lineBox;
   private ButtonGroup shapeGroup;
   private JCheckBox fillBox;
   private JComboBox colorList, fontList, sizeList;
   private JButton clearButton;
   private String colorNames[] = { "Black", "Green", "Blue",
      "Red", "Cyan" };
   private Color colors[] = { Color.black, Color.green, Color.blue,
      Color.red, Color.cyan };
   private String fontNames[] = { "Serif", "SansSerif", "Monospaced" };
   private String sizeNames[] =  { "9", "10", "22", "72" };
   private int sizes[] = { 9, 10, 22, 72 };
   private final int OVAL = 1, LINE = 2, RECT = 3;

   private ToolWindow tools;

   // Painter2 constructor
   public Painter2()
   {
      super( "Painting Window" );
      
      addMouseListener( new MouseHandler() );

      // set defaults for painting
      drawingColor = Color.black;
      shape = OVAL;
      font = "Serif";
      fontSize = 9;

	setDefaultCloseOperation( EXIT_ON_CLOSE );
	setBackground( Color.white );
      setSize( 300, 300 );
      show();

      // create new ToolWindow
      tools = new ToolWindow();
      
   }  // end constructor

   // paint the new window.  super is not called so
   // that the previous images will not be erased.
   public void paint( Graphics g )
   {
      g.setColor( drawingColor );

      // draw text
      if ( textOn ) {
         g.setFont( new Font( font, Font.PLAIN, fontSize ) );
         g.drawString( text.getText(), topX, topY );
         textOn = false;
         return;
         
      }  // end if statement

      // set shape's top left coordinates
      if ( shape != LINE ) {
         topX = Math.min( topX, bottomX );
         topY = Math.min( topY, bottomY );
         
      }  // end if statement

      // draw filled shape
      if ( filled && shape != LINE )

         switch ( shape ) {

            case OVAL:
               g.fillOval( topX, topY,  width, height );
               break;

            case RECT:
               g.fillRect( topX, topY, width, height );
               break;
               
         }  // end switch statement

      // draw unfilled shapes
      else

         switch ( shape ) {

            case OVAL:
               g.drawOval( topX, topY,  width, height );
               break;

            case LINE:
               g.drawLine( topX, topY, bottomX, bottomY );
               break;

            case RECT:
               g.drawRect( topX, topY, width, height );
               break;
               
         }  // ens switch statement

      // clear background
      if ( clear == true ) {
         g.setColor( Color.white );
         g.fillRect( 0, 0, getSize().width, getSize().height );
         clear = false;
         
      }  // end if statement

   }  // end method paint

   // inner class for window containing GUI
   private class ToolWindow extends JFrame {

      // ToolWindow constructor
      public ToolWindow()
      {
         super( "Tool Window" );
         
         // set up to edit text
         text = new JTextField( "Text", 25 );

         text.addActionListener(

            // anonymous inner class to handle text drawing
            new ActionListener () {

               public void actionPerformed( ActionEvent event )
               {
                  textOn = true;
                  repaint();
                  
               }  // end actionPerformed method

            }  // end anonymous inner class

         ); // end call to addActionListener

         // set up to choose font
         fontList = new JComboBox( fontNames );
         fontList.setMaximumRowCount( 3 );

         fontList.addItemListener(

            // anonymous inner class to select font
            new ItemListener() {

               // change font
               public void itemStateChanged( ItemEvent event )
               {
                  font =
                     fontNames[ fontList.getSelectedIndex() ];
                  
               }  // end itemStateChanged method

            }  // end anonymous inner class

         ); // end call to addItemListener

         // set up to choose font size
         sizeList = new JComboBox( sizeNames );
         sizeList.setMaximumRowCount( 3 );

         sizeList.addItemListener(

            // anonymous inner class to select font size
            new ItemListener() {

               // change font size
               public void itemStateChanged( ItemEvent event )
               {
                  fontSize =
                     sizes[ sizeList.getSelectedIndex() ];
                  
               }  // end itemStateChanged method

            }  // end anonymous inner class

         ); // end call to addItemListener

         // set up to choose color
         colorList = new JComboBox( colorNames );
         colorList.setMaximumRowCount( 3 );

         colorList.addItemListener(

            // anonymous inner class to select color
            new ItemListener() {

               // change color
               public void itemStateChanged( ItemEvent event )
               {
                  drawingColor =
                     colors[ colorList.getSelectedIndex() ];
                  
               }  // end itemStateChanged method

            }  // end anonymous inner class

         ); // end call to addItemListener

         // set up clear button
         clearButton = new JButton( "Clear" );
         clearButton.addActionListener(
            new ClearButtonHandler() );

         // set up to choose filled
         fillBox  = new JCheckBox( "Filled" );
         FillBoxHandler fillHandle = new FillBoxHandler();
         fillBox.addItemListener( fillHandle );

         // set up to choose shapes
         ovalBox = new JRadioButton( "Oval", true );
         lineBox = new JRadioButton( "Line", false );
         rectBox = new JRadioButton( "Rectangle", false );
         RadioButtonHandler handler = new RadioButtonHandler();
         ovalBox.addItemListener( handler );
         lineBox.addItemListener( handler );
         rectBox.addItemListener( handler );
         shapeGroup = new ButtonGroup();
         shapeGroup.add(ovalBox);
         shapeGroup.add(lineBox);
         shapeGroup.add(rectBox);

         // set up GUI layout
         panel1 = new JPanel();
         panel2 = new JPanel();
         panel3 = new JPanel();
	   panel4 = new JPanel();

         panel1.setLayout( new GridLayout( 1, 4 ) );
         panel2.setLayout( new GridLayout( 1, 3 ) );
         panel3.setLayout( new FlowLayout() );
	   panel4.setLayout( new FlowLayout() );

         panel1.add( ovalBox );
         panel1.add( lineBox );
         panel1.add( rectBox );
         panel1.add( fillBox );
         panel2.add( new JScrollPane( colorList ) );
         panel2.add( new JScrollPane( fontList ) );
         panel2.add( new JScrollPane( sizeList ) );
	   panel3.add( text );
	   panel4.add( clearButton );

         Container container = getContentPane();
         container.setLayout( new FlowLayout() );
         container.add( panel1 );
         container.add( panel2 );
         container.add( panel3 );
         container.add( panel4 );

	   setDefaultCloseOperation( EXIT_ON_CLOSE );
         setSize( 350, 175 );
         setLocation( 300, 0 );
         setVisible( true );

      }  // end ToolWindow constructor

   }  // end inner class ToolWindow

   // set coordinate and dimension values
   private class MouseHandler extends MouseAdapter {

      public void mousePressed( MouseEvent event )
      {
         topX = event.getX();
         topY = event.getY();
         
      }  // end mousePressed method

      public void mouseReleased( MouseEvent event )
      {
         bottomX = event.getX();
         bottomY = event.getY();
         width = Math.abs( topX - bottomX );
         height = Math.abs( topY - bottomY );

         repaint();
         
      }  // end mouseReleased method

   }  // end inner class MouseHandler

   // clear background
   private class ClearButtonHandler implements ActionListener {

      public void actionPerformed( ActionEvent event )
      {
         clear = true;
         repaint();
         
      }  // end actionPerformed method

   }  // end inner class ClearButtonHandler

   // determine which type of shape to draw
   private class RadioButtonHandler implements ItemListener {

      public void itemStateChanged( ItemEvent event )
      {
         if ( event.getSource() == ovalBox )
            shape = OVAL;

         else if ( event.getSource() == lineBox )
            shape = LINE;

         else if ( event.getSource() == rectBox )
            shape = RECT;
         
      }  // end itemStateChanged method

   }  // end inner class RadioButtonHandler

   // determine if shape should be filled
   private class FillBoxHandler implements ItemListener {

      public void itemStateChanged( ItemEvent event )
      {
         if ( event.getStateChange() == ItemEvent.SELECTED )
            filled = true;

         else
            filled = false;
         
      }  // end ItemStateChanged method

   }  // end inner class FillBoxHandler

   // execute application
   public static void main( String args[] )
   {
      Painter2 application = new Painter2();

      application.setDefaultCloseOperation( JFrame.EXIT_ON_CLOSE );
      
   }  // end main method

}  // end class Painter2


Using a Choice button to select a font

import java.applet.Applet;
import java.awt.*;

public class MyChoice extends Applet {
   private Choice choiceButton;
   private TextField t;
   private Font f;

   public void init()
   {
      choiceButton = new Choice();
      t = new TextField( "Sample Text", 16 );
      t.setEditable( false );

      // add items to choiceButton
      choiceButton.addItem( "TimesRoman" );
      choiceButton.addItem( "Courier" );
      choiceButton.addItem( "Helvetica" );

      f = new Font( choiceButton.getItem( 0 ),
                    Font.PLAIN, 14 );
      t.setFont( f ); 
      add( choiceButton );
      add( t );
   }

   public boolean action( Event e, Object o )
   {
      String s;

      // Check for Choice button event
      if ( e.target instanceof Choice ) {
         f = new Font( choiceButton.getSelectedItem(),
                       Font.PLAIN, 14 );

         t.setFont( f );

         s = "Number of items: " +
             choiceButton.countItems();

         s += "      Current index: " +
              choiceButton.getSelectedIndex();

         showStatus( s );
      }

      return true;
   }
}


Using class MouseMotionAdapter

 import javax.swing.*;
 import java.awt.event.*;
 import java.awt.*;

 public class Painter extends JFrame 
 {
	 private int xValue = -10, yValue = -10;

	 public Painter()
	 {
		 super( "A simple paint program" );

		 getContentPane().add( new Label( "Drag the mouse to draw" ), BorderLayout.SOUTH );

		 addMouseMotionListener( new MouseMotionAdapter() 
		 {
			 public void mouseDragged( MouseEvent e )
			 {
				 xValue = e.getX();
				 yValue = e.getY();
				 repaint();
			 }
		 } );

		 setSize( 300, 150 );
		 show();
	 }

	 public void paint( Graphics g )
	 {
		 g.fillOval( xValue, yValue, 4, 4 );
	 }

	 public static void main( String args[] )
	 {
		 Painter app = new Painter();

		 app.addWindowListener( new WindowAdapter() 
		 {
			 public void windowClosing( WindowEvent e )
			 {
				 System.exit( 0 );
			 }
		 } );
	 }
 }


Using Labels

import java.applet.Applet;
import java.awt.*;

public class Labels extends Applet {
  public void init() {
    setLayout(new GridLayout(4,1));
    Label label1, label2, label3, label4;
    label1 = new Label("Label 1");
    label2 = new Label("Label 2", Label.LEFT);
    label3 = new Label("Label 3", Label.RIGHT);
    label4 = new Label("Label 4", Label.CENTER);
    Font bigFont = new Font("SanSerif", Font.BOLD, 25);
    label2.setFont(bigFont);
    label3.setFont(bigFont);
    label4.setFont(bigFont);
    add(label1);
    add(label2);
    add(label3);
    add(label4);
  }
}
/*
<APPLET CODE="Labels.class" WIDTH=250 HEIGHT=120>
</APPLET>
*/


Calculating compound interest

 import java.text.DecimalFormat;
 import javax.swing.JOptionPane;
 import javax.swing.JTextArea;

 public class Interest 
 {
	 public static void main( String args[] )
	 {
		 double amount, principal = 1000.0, rate = .05;

		 DecimalFormat precisionTwo = new DecimalFormat( "0.00" );
		 JTextArea outputTextArea = new JTextArea( 11, 20 );

		 outputTextArea.append( "Year\tAmount on deposit\n" );

		 for ( int year = 1; year <= 10; year++ ) 
		 {
			 amount = principal * Math.pow( 1.0 + rate, year );
			 outputTextArea.append( year + "\t" +
			 precisionTwo.format( amount ) + "\n" );
		 }

		 JOptionPane.showMessageDialog( null, outputTextArea, "Compound Interest", JOptionPane.INFORMATION_MESSAGE );

		 System.exit( 0 ); // terminate the application
	}
 }


Horoscope

Description: This program allows the user to input a number and compute for the factorial of the number. 

import javax.swing.*;
import java.awt.event.*; 
import java.awt.*;

public class Factorial extends JFrame
     {
     private JTextField txtNum;
     private JLabel lblNum, lblRes;
     private JButton btnCompute;
    
     public static int ComputeFactorial(int number)
         {
         int n = number-1;
         do
             {
             number = number*n;
             n--;
         }while(n>=1);
         return number;
     } 
    
     public Factorial()
         {
         super("GUI Factorial"); 
         Container c = getContentPane(); 
         c.setLayout(new FlowLayout()); 
         lblNum = new JLabel("Enter an integer: ");
         txtNum = new JTextField(10);
         lblRes = new JLabel();
         btnCompute = new JButton("Compute");
        
         btnCompute.addActionListener
         ( 
         new ActionListener()
             {
             public void actionPerformed(ActionEvent e)
                 {
                 String str = txtNum.getText();
                 int tmp = Integer.parseInt(str);
                 tmp = ComputeFactorial(tmp);
                 lblRes.setText("The factorial of "+str+" is "+tmp);
             }
         }
         );
         
         c.add(lblNum);
         c.add(txtNum);
         c.add(btnCompute); 
         c.add(lblRes);
         setSize(200,150);
         show();
     }
    
     public static void main(String args[])
         {
         Factorial app = new Factorial();
         app.setResizable(false);
         app.setLocation(400,200);
         app.addWindowListener
         (
         new WindowAdapter()
             {
             public void windowClosing(WindowEvent e)
                 {
                 System.exit(0);
             }
         }
         );
     }
    
}


Simple Mathematical Calculations 2

import java.awt.*;
import java.awt.event.*;

// Java extension packages
import javax.swing.*;

public class Points extends JApplet implements ActionListener {
   JTextField x1Input, x2Input, y1Input, y2Input;
   JLabel labelX1, labelY1, labelX2, labelY2;

   // set up GUI components
   public void init()
   {
      labelX1 = new JLabel( "Enter X1: " );
      labelY1 = new JLabel( "Enter Y1: " );
      labelX2 = new JLabel( "Enter X2: " );
      labelY2 = new JLabel( "Enter Y2: " );
      x1Input = new JTextField( 4 );
      x2Input = new JTextField( 4 );
      y1Input = new JTextField( 4 );
      y2Input = new JTextField( 4 );
      y2Input.addActionListener( this );

      Container container = getContentPane();
      container.setLayout( new FlowLayout() );
      container.add( labelX1 );
      container.add( x1Input );
      container.add( labelY1 );
      container.add( y1Input );
      container.add( labelX2 );
      container.add( x2Input );
      container.add( labelY2 );
      container.add( y2Input );
   }

   // display distance between user input points
   public void actionPerformed( ActionEvent e )
   {
      double x1, y1, x2, y2;

	  // read in two points
      x1 = Double.parseDouble( x1Input.getText() );
      y1 = Double.parseDouble( y1Input.getText() );
      x2 = Double.parseDouble( x2Input.getText() );
      y2 = Double.parseDouble( y2Input.getText() );

      double theDistance = distance( x1, y1, x2, y2 );
      showStatus( "Distance is " + theDistance );
   }

   // calculate distance between two points
   public double distance( double x1, double y1,
      double x2, double y2 )
   {
      return Math.sqrt( Math.pow( ( x1 - x2 ), 2 ) +
         Math.pow( ( y1 - y2 ), 2 ) );
   }

} // end class Points


Simple Mathematical Calculations

// Exercise 3.12 Solution: Multiples.java
// Given two doubles as input, the program determines if the first// is a multiple of the second.

// Java core packages
import java.awt.Graphics;   // import class Graphics

// Java extension packages
import javax.swing.*;       // import package javax.swing

public class Multiples extends JApplet {
   String result;   // output display String

   // initialize applet by obtaining values from user
   public void init()
   {
      String firstNumber;    // first String entered by user
      String secondNumber;   // second String entered by user
      double number1;        // first number to compare
      double number2;        // second number to compare

      // read first number from user as a String
      firstNumber =
         JOptionPane.showInputDialog( "Enter first floating-point number:" );

      // read second number from user as a String
      secondNumber =
         JOptionPane.showInputDialog( "Enter second floating-point number:" );

      // convert numbers from type String to type double
      number1 = Double.parseDouble( firstNumber );
      number2 = Double.parseDouble( secondNumber );

      if ( number1 % number2 == 0 )
      	result  = number1 + " is a multiple of " + number2;

      if ( number1 % number2 != 0 )
      	result  = number1 + " is not a multiple of " + number2;

   }  // end method init

   // draw results on applet's background
   public void paint( Graphics g )
   {
      // draw result as a String at (25, 25)
      g.drawString( result, 25, 25 );

   }  // end method paint

}  // end class OddEven


CLChat Client

import java.net.*;
import java.io.*;

public class CLChatClient {

   static final int DEFAULT_PORT = 1728;  // Port where server is
                                          // listening, if no
                                          // port is specified
                                          // on the command line.
                                          
   static final String HANDSHAKE = "CLChat";  // Handshake string.
                   // Each end of the connection sends this string
                   // to the other just after the connection is 
                   // opened.  This is done to confirm that the
                   // program on the other side of the connection 
                   // is a CLChat program.
                   
   static final char MESSAGE = '0';  // This character is prepended
                                     // to every message that is sent.

   static final char CLOSE = '1';    // This character is sent to
                                     // the connected program when
                                     // the user quits.

   public static void main(String[] args) {
   
      String computer;  // The computer where the server is running,
                        // as specified on the command line.  It can
                        // be either an IP number or a domain name.
      
      int port;   // The port on which the server listens.
      
      Socket connection;      // For communication with the server.
      
      TextReader incoming;  // Stream for receiving data from server.
      PrintWriter outgoing; // Stream for sending data to server.
      String messageOut;    // A message to be sent to the server.
      String messageIn;     // A message received from the server.
      
      /* First, get the computer from the command line.
         Get the port from the command line, if one is specified,
         or use the default port if none is specified. */
      
      if (args.length == 0) {
         TextIO.putln("Usage:  java SimpleClient <computer-name> [<port>]");
         return;
      }
      
      computer = args[0];
      
      if (args.length == 1) 
         port = DEFAULT_PORT;
      else {
         try {
            port= Integer.parseInt(args[1]);
            if (port <= 0 || port > 65535)
               throw new NumberFormatException();
         }
         catch (NumberFormatException e) {
            TextIO.putln("Illegal port number, " + args[1]);
            return;
         }
      }
      
      /* Open a connetion to the server.  Create streams for 
         communication and exchange the handshake. */

      try {
         TextIO.putln("Connecting to " + computer + " on port " + port);
         connection = new Socket(computer,port);
         incoming = new TextReader(connection.getInputStream());
         outgoing = new PrintWriter(connection.getOutputStream());
         outgoing.println(HANDSHAKE);
         outgoing.flush();
         messageIn = incoming.getln();
         if (! messageIn.equals(HANDSHAKE) ) {
            throw new IOException("Connected program is not CLChat!");
         }
         TextIO.putln("Connected.  Enter your first message.
");
      }
      catch (Exception e) {
         TextIO.putln("An error occurred while opening connection.");
         TextIO.putln(e.toString());
         return;
      }
      
      /* Exchange messages with the other end of the connection
         until one side or the other closes the connection.
         This client program send the first message.  After that, 
         messages alternate strictly back an forth. */

      try {
         while (true) {
            TextIO.put("SEND:      ");
            messageOut = TextIO.getln();
            if (messageOut.equalsIgnoreCase("quit"))  {
                  // User wants to quit.  Inform the other side
                  // of the connection, then close the connection.
                outgoing.println(CLOSE);
                outgoing.flush();
                connection.close();
                TextIO.putln("Connection closed.");
                break;
            }
            outgoing.println(MESSAGE + messageOut);
            outgoing.flush();
            if (outgoing.checkError()) {
               throw new IOException("Error ocurred while reading incoming message.");
            }
            TextIO.putln("WAITING...");
            messageIn = incoming.getln();
            if (messageIn.length() > 0) {
                  // The first character of the message is a command.
                  // If the command is CLOSE, then the connection
                  // is closed.  Otherwise, remove the command 
                  // character from the message and procede.
                if (messageIn.charAt(0) == CLOSE) {
                   TextIO.putln("Connection closed at other end.");
                   connection.close();
                   break;
                }
                messageIn = messageIn.substring(1);
            }
            TextIO.putln("RECEIVED:  " + messageIn);
         }
      }
      catch (Exception e) {
         TextIO.putln("Sorry, an error has occurred.  Connection lost.");
         TextIO.putln(e.toString());
         System.exit(1);
      }
      
   }  // end main()
} //end class CLChatClient


CLChatServer

import java.net.*;
import java.io.*;

public class CLChatServer {

   static final int DEFAULT_PORT = 1728;  // Port to listen on,
                                          // if none is specified
                                          // on the command line.
                                          
   static final String HANDSHAKE = "CLChat";  // Handshake string.
                   // Each end of the connection sends this string
                   // to the other just after the connection is 
                   // opened.  This is done to confirm that the
                   // program on the other side of the connection 
                   // is a CLChat program.
                   
   static final char MESSAGE = '0';  // This character is prepended
                                     // to every message that is sent.

   static final char CLOSE = '1';    // This character is sent to
                                     // the connected program when
                                     // the user quits.

   public static void main(String[] args) {
   
      int port;   // The port on which the server listens.
      
      ServerSocket listener;  // Listens for a connection request.
      Socket connection;      // For communication with the client.
      
      TextReader incoming;  // Stream for receiving data from client.
      PrintWriter outgoing; // Stream for sending data to client.
      String messageOut;    // A message to be sent to the client.
      String messageIn;     // A message received from the client.
      
      /* First, get the port number from the command line,
         or use the default port if none is specified. */
      
      if (args.length == 0) 
         port = DEFAULT_PORT;
      else {
         try {
            port= Integer.parseInt(args[0]);
            if (port < 0 || port > 65535)
               throw new NumberFormatException();
         }
         catch (NumberFormatException e) {
            TextIO.putln("Illegal port number, " + args[0]);
            return;
         }
      }
      
      /* Wait for a connection request.  When it arrives, close
         down the listener.  Create streams for communication
         and exchange the handshake. */
      
      try {
         listener = new ServerSocket(port);
         TextIO.putln("Listening on port " + listener.getLocalPort());
         connection = listener.accept();
         listener.close();  
         incoming = new TextReader(connection.getInputStream());
         outgoing = new PrintWriter(connection.getOutputStream());
         outgoing.println(HANDSHAKE);
         outgoing.flush();
         messageIn = incoming.getln();
         if (! messageIn.equals(HANDSHAKE) ) {
            throw new IOException("Connected program is not CLChat!");
         }
         TextIO.putln("Connected.  Waiting for the first message.
");
      }
      catch (Exception e) {
         TextIO.putln("An error occurred while opening connection.");
         TextIO.putln(e.toString());
         return;
      }
      
      /* Exchange messages with the other end of the connection
         until one side or the other closes the connection.
         This server program waits for the first message from
         the client.  After that, messages alternate strictly
         back an forth. */
      
      try {
         while (true) {
            TextIO.putln("WAITING...");
            messageIn = incoming.getln();
            if (messageIn.length() > 0) {
                  // The first character of the message is a command.
                  // If the command is CLOSE, then the connection
                  // is closed.  Otherwise, remove the command 
                  // character from the message and procede.
                if (messageIn.charAt(0) == CLOSE) {
                   TextIO.putln("Connection closed at other end.");
                   connection.close();
                   break;
                }
                messageIn = messageIn.substring(1);
            }
            TextIO.putln("RECEIVED:  " + messageIn);
            TextIO.put("SEND:      ");
            messageOut = TextIO.getln();
            if (messageOut.equalsIgnoreCase("quit"))  {
                  // User wants to quit.  Inform the other side
                  // of the connection, then close the connection.
                outgoing.println(CLOSE);
                outgoing.flush();  // Make sure the data is sent!
                connection.close();
                TextIO.putln("Connection closed.");
                break;
            }
            outgoing.println(MESSAGE + messageOut);
            outgoing.flush(); // Make sure the data is sent!
            if (outgoing.checkError()) {
               throw new IOException("Error ocurred while reading incoming message.");
            }
         }
      }
      catch (Exception e) {
         TextIO.putln("Sorry, an error has occurred.  Connection lost.");
         TextIO.putln(e.toString());
         System.exit(1);
      }
      
   }  // end main()
} //end class CLChatServer


Creating a Non-Blocking Socket

public class test
    {
     public static void main(String args[])
         {
         // Create a non-blocking socket and check for connections
             try {
             // Create a non-blocking socket channel on port 8080
             SocketChannel sChannel = createSocketChannel("www.xxx", 8080);
            
             // Before the socket is usable, the connection must be completed
             // by calling finishConnect(), which is non-blocking
                 while (!sChannel.finishConnect()) {
                 // Do something else
                 System.out.println("wonderful");
             }
             // Socket channel is now ready to use
         }
             catch (IOException e) {
         }
     }
    
     // Creates a non-blocking socket channel for the specified host name and port.
     // connect() is called on the new channel before it is returned.
     public static SocketChannel createSocketChannel(String hostName, int port) throws IOException
         {
         // Create a non-blocking socket channel
         SocketChannel sChannel = SocketChannel.open();
         sChannel.configureBlocking(false);
        
         // Send a connection request to the server; this method is non-blocking
         sChannel.connect(new InetSocketAddress(hostName, port));
         return sChannel;
     }
}


DateClient

import java.net.*;
import java.io.*;

public class DateClient {

   static final int LISTENING_PORT = 32007;

   public static void main(String[] args) {
   
      String computer;     // Name of the computer to connect to.
      Socket connection;   // A socket for communicating with
                           //                that computer.
      Reader incoming;     // Stream for reading data from
                           //                the connection.
       
      /* Get computer name from command line. */
      
      if (args.length > 0)
         computer = args[0];
      else {
            // No computer name was given.  Print a message and exit.
         System.out.println("Usage:  java DateClient <server>");
         return;
      }
      
      /* Make the connection, then read and display a line of text. */
      
      try {
         connection = new Socket( computer, LISTENING_PORT );
         incoming = new InputStreamReader( connection.getInputStream() );
         while (true) {
            int ch = incoming.read(); 
            if (ch == -1 || ch == '
' || ch == '
')
               break;
            System.out.print( (char)ch );
         }
         System.out.println();
         incoming.close();
      }
      catch (Exception e) {
         TextIO.putln("Error:  " + e);
      }
      
   }  // end main()
} //end class DateClient


DateServer

import java.net.*;
import java.io.*;
import java.util.Date;

public class DateServe {

   static final int LISTENING_PORT = 32007;


   public static void main(String[] args) {
   
      ServerSocket listener;  // Listens for incoming connections.
      Socket connection;      // For communication with the
                              //             connecting program.
            
      /* Accept and process connections forever, or until
         some error occurs.  (Note that errors that occur 
         while communicating with a connected program are
         caught and handled in the sendDate() routine, so
         they will not crash the server.)
      */
            
      try {
         listener = new ServerSocket(LISTENING_PORT);
         TextIO.putln("Listening on port " + LISTENING_PORT);
         while (true) {
            connection = listener.accept();
            sendDate(connection);
         }
      }
      catch (Exception e) {
         TextIO.putln("Sorry, the server has shut down.");
         TextIO.putln("Error:  " + e);
         return;
      }
      
   }  // end main()
   

   static void sendDate(Socket client) {
        // The parameter, client, is a socket that is
        // already connected to another program.  Get
        // an output stream for the connection, send the
        // current date, and close the connection.
      try {
         System.out.println("Connection from " + 
                       client.getInetAddress().toString() );
         Date now = new Date();  // The current data and time.
         PrintWriter outgoing;   // Stream for sending data.
         outgoing = new PrintWriter( client.getOutputStream() );
         outgoing.println( now.toString() );
         outgoing.flush();  // Make sure the data is actually sent!
         client.close();
      }
      catch (Exception e){
         System.out.println("Error: " + e);
      }
   } // end sendDate()
} //end class DateServe


FTPLogin

import java.io.BufferedReader;
import java.io.PrintWriter;
import java.io.InputStreamReader;
import java.net.Socket;

public class FTPLogin
{
    public static void main (String args[])
    {
        Socket socket = null;
        BufferedReader in = null;
        PrintWriter out = null;
        String line = null;

        if (args.length != 3)
        {
            System.out.println ("USAGE: IP USER PASS");
        }

        else
        {
            try
            {
                socket = new Socket (args[0], 21);
                in = new BufferedReader (new InputStreamReader(socket.getInputStream()));
                out = new PrintWriter (socket.getOutputStream());

                out.print("user "+ args[1] + "
");
                out.print("pass "+ args[2] + "
");
                out.print ("pwd
");
                out.print ("quit
");
                out.flush();

                while ( (line = in.readLine()) != null)
                {
                    System.out.println(line);
                }


            }
            catch (Exception e)
            {
                System.out.println(e.getMessage());
            }
            finally
            {
                try
                {
                    out.close();
                    in.close();
                    socket.close();
                }
                catch (Exception fe)
                {
                    System.out.println ("RESOURCE CLOSE EXCEPTION " +fe.getMessage());
                }
            }
        } //end else
    } //end main
} //end class


Multi ClassLoader Demo

import java.net.URLClassLoader;
import java.net.URL;
import java.io.File;

public class MultiCLDemo
    {
     public static void main(String[] args)
         {
         if (args.length<3)
             {
             System.out.println("Usage: java MultiCLDemo "+" ...");
             System.out.println("Loads and runs toString() on class_name "+"found in each subDir.");
             System.exit(0);
         }
         try
             {
             String className = args[0];
             int count = args.length-1;
             URL tmpURL;
             Object[] objects = new Object[count];
             URLClassLoader[] loaders = new URLClassLoader[count];
             System.out.println("Loading "+count+" different classes "+"named: "+className);
             for (int i=0; i                 {
                 tmpURL = new File(args[i+1]).toURL();
                 System.out.println("\nLoading from: "+tmpURL);
                 loaders[i] = new URLClassLoader(new URL[] { tmpURL });
                 objects[i] = loaders[i].loadClass(className).newInstance();
                 for (int k=0; k<=i; k++)
                     {
                     System.out.println("Got object: "+objects[k]);
                 }
             }
         }
         catch (Exception e)
             {
             e.printStackTrace();
         }
     }
}


/*Some sample classes to load...

// c:\a/HelloWorld.java
public class HelloWorld
    {
     public String toString()
         {
         return "Hello";
     }
}

// c:\b/HelloWorld.java
public class HelloWorld
    {
     public String toString()
         {
         return "World";
     }
}

// c:\c/HelloWorld.java
public class HelloWorld
    {
     public String toString()
         {
         return "Hello World";
     }
}

The code running...

java MultiCLDemo HelloWorld a b c

Loading 3 different classes named:
HelloWorldLoading from: file:/.../class_loader_demo/a/Got object:
HelloLoading from: file:/.../class_loader_demo/b/Got object:
HelloGot object: WorldLoading from: file:/.../class_loader_demo/c/Got object:
HelloGot object: WorldGot object: Hello World

regards, btcoburn*/


Ping a server

import java.io.*;
import java.net.*;

     public class PseudoPing {
         public static void main(String args[]) {
             try {
             Socket t = new Socket(args[0], 7);
             DataInputStream dis = new DataInputStream(t.getInputStream());
             PrintStream ps = new PrintStream(t.getOutputStream());
             ps.println("Hello");
             String str = is.readLine();
             if (str.equals("Hello"))
             System.out.println("Alive!") ;
             else
             System.out.println("Dead or echo port not responding"); 
             t.close();
         }
             catch (IOException e) {
         e.printStackTrace();}
     }
}


Port Scanner

import java.net.*;
import java.io.IOException;
import javax.swing.*;
import java.awt.*;
import java.awt.event.*;

    public class PScanner {
    
         public static void main(String[] args) {
         InetAddress ia=null;
         String host=null;
             try {
            
             host=JOptionPane.showInputDialog("Enter the Host name to scan:\n example: xxx.com");
                 if(host!=null){
                 ia = InetAddress.getByName(host);
             scan(ia); }
         }
             catch (UnknownHostException e) {
             System.err.println(e );
         }
         System.out.println("Bye from NFS");
         //System.exit(0);
     }
    
        public static void scan(final InetAddress remote) {
        //variables for menu bar
        
        int port=0;
        String hostname = remote.getHostName();
        
             for ( port = 0; port < 65536; port++) {
                 try {
                 Socket s = new Socket(remote,port);
                 System.out.println("Server is listening on port " + port+ " of " + hostname);
                 s.close();
             }
                 catch (IOException ex) {
                 // The remote host is not listening on this port
                 System.out.println("Server is not listening on port " + port+ " of " + hostname);
             }
         }//for ends
     }
}


SimpleApacheSoapClient
  
 

package com.ack.webservices.soap;

import java.net.URL;
import java.util.Vector;

import org.apache.soap.Constants;
import org.apache.soap.rpc.Call;
import org.apache.soap.rpc.Parameter;
import org.apache.soap.rpc.Response;

public class SimpleApacheSoapClient {
  public static void main( String[] args ) throws Exception {
    // soap service endpoint
    //URL url = new URL("http://services.xmethods.com:80/soap/servlet/rpcrouter");
    URL url = new URL( "http://localhost:6666/soap/servlet/rpcrouter" );
    // create a call
    Call call = new Call();

    // Service uses standard SOAP encoding
    call.setEncodingStyleURI( Constants.NS_URI_SOAP_ENC );

    // Set service locator parameters
    call.setTargetObjectURI( "urn:xmethods-Temperature" );
    call.setMethodName( "getTemp" );

    // Create input parameter vector
    Vector params = new Vector();
    params.addElement( new Parameter( "zipcode", String.class, "94041", null ) );
    call.setParams( params );

    // Invoke the service, note that an empty SOAPActionURI of
    // "" indicates that intent of the SOAP request is taken to
    // be the request URI
    Response resp = call.invoke( url, "" );

    // ... and evaluate the response
    if( resp.generatedFault() ) {
      throw new Exception();
    }
    else {
      // Call was successful. Extract response parameter and return result
      Parameter result = resp.getReturnValue();
      System.out.println( "temperature is -> " + result.getValue() );
    }
  }
}
Using Proxy

import java.net.URL;
import java.net.URLConnection;
import java.net.HttpURLConnection;

import java.io.InputStream;
import java.io.BufferedReader;
import java.io.InputStreamReader;

public class ProxyDemo
{
	// Set to true if you want to see verbose output.
	private final static boolean bDebug = false;

	/**
	* This function makes an HTTP GET request of the specified URL using a proxy if provided.
	* If successfully, the HTTP response headers are printed out.
	* If the MIME type of the response is text/html, then the number of lines of text
	* is printed as well.
	*
	* @param strURL - A string representing the URL to request, eg, "http://bdn.borland.com/"
	* @param strProxy - A string representing either the IP address or host name of the proxy server.
	* @param iProxyPort - An integer that indicates the proxy port or -1 to indicate the default port for the protocol.
	* @return rc is true if the request succeeded and false otherwise.
	*/
	static boolean doURLRequest(String strURL, String strProxy, int iProxyPort)
	{
		boolean rc = false;

		URL url = null;
		URLConnection c = null;

		try
		{
			System.out.println("\nHTTP Request: " + strURL);

			URL urlOriginal = new URL(strURL);

			if ((null != strProxy) && (0 < strProxy.length()))
			{
				URL urlProxy = new URL(urlOriginal.getProtocol(),
				strProxy,
				iProxyPort,// A value of -1 means use the default port for the specified protocol.
				strURL);// The original URL is passed as "the file on the host".

				System.out.println("Using Proxy: " + strProxy);
				if (-1 != iProxyPort)
				{
					System.out.println("Using Proxy Port: " + iProxyPort);
				}

				url = urlProxy;
			}
			else
			{
				url = urlOriginal;
			}

			c = url.openConnection();

			// In this example, we only consider HTTP connections.
			if (c instanceof HttpURLConnection)// instanceof returns true only if the object is not null.
			{

				HttpURLConnection h = (HttpURLConnection) c;
				h.connect();

				String strStatus = h.getResponseMessage() + " (" + h.getResponseCode() + ")";
				System.out.println("HTTP Status: " + strStatus);

				System.out.println("HTTP Response Headers: ");

				// Evidently, index 0 always returns null, so we start with index 1.
				for (int i = 1; ; i++)
				{
					String strKey = h.getHeaderFieldKey(i);
					if (null == strKey)
					{
						break;
					}
					System.out.println(i + ": " + strKey + ": " + h.getHeaderField(i));
				}

				// Normally at this point, one would download data from the connection.
				// For example, if the MIME type is html, then download the string and display it.
				String strContentType = h.getContentType();
				if ((null != strContentType) && (0 == strContentType.compareTo("text/html")))
				{
					// Set boolean bDebug to true if you want verbose output.
					// For simplicity's sake, we just count the number of lines of text.
					if (bDebug) System.out.println("Received text/html:[");

						int iNumLines = 0;

						try
						{
							InputStream in = h.getInputStream();
							BufferedReader data = new BufferedReader(new InputStreamReader(in));

							String line = null;
							while((line = data.readLine()) != null)
							{
								if (bDebug) System.out.println(line);

								iNumLines++;
							}
						}
						catch(Exception exc2)
						{
							System.out.println("**** IO failure: " + exc2.toString());
						}
						finally
						{
							if (bDebug) System.out.println("]");
							System.out.println("Received text/html has " + iNumLines + " lines");
						}
				}

				h.disconnect();
			}
			else
			{
				System.out.println("**** No download: connection was not HTTP");
			}

			rc = true;
		}
		// Catch all exceptions.
		catch(Exception exc)
		{
			System.out.println("**** Connection failure: " + exc.toString());
			// System.out.println("**** Connection failure: " + exc.getMessage());// Same as above line but without the exception class name.
		}
		finally
		{
			// Do cleanup here.
			// For example, the following, in theory, could make garbage collection more efficient.
			// This might be the place where you choose to put your method call to your connection's "disconnect()";
			// curiously, while every URLConnection has a connect() method, they don't necessarily have a disconnect() method.
			// HttpURLConnection has a disconnect() which is called above.
			c = null;
			url = null;

			return rc;
		}
	}

	public static void main(String[] args)
	{
		// Simple request, not using a proxy server.
		ProxyDemo.doURLRequest("http://www.borland.com/", null, -1);
		ProxyDemo.doURLRequest("http://www.borland.com", null, -1);

		// Request, using a proxy server.
		/**
		* @todo: Note that the proxy indicated below will fail. Change to a valid server.
		* (If you do not have a proxy server available, then search for a web site that
		* lists public HTTP proxy servers.
		* I hesitate to list any here as I'm not sure about the "legitimacy" of all these sites.)
		*/
		// *** If you don't change the proxy setting to something valid in the following,
		// then you will get the following error message:
		// **** Connection failure: java.net.BindException: Cannot assign requested address: connect
		ProxyDemo.doURLRequest("http://www.borland.com/", "0.0.0.0", -1); // **** Change this line to use a valid proxy.
	}
}


Access an ejb from a servlet

package com.ack.web.servlet;

import java.io.IOException;
import java.io.PrintWriter;
import javax.naming.Context;
import javax.naming.InitialContext;
import javax.naming.NamingException;
import javax.rmi.PortableRemoteObject;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import com.ack.j2ee.ejb.session.Lawyer;
import com.ack.j2ee.ejb.session.LawyerHome;

/**
 * web.xml configuration part of the an ejb component
 *
 *  <web-app>
 ...
 <ejb-ref>
 <ejb-ref-name>yoda</ejb-ref-name>
 <ejb-ref-type>Session</ejb-ref-type>
 <home>com.ack.j2ee.ejb.session.LawyerHome</home>
 <remote>com.ack.j2ee.ejb.session.Lawyer</remote>
 </ejb-ref>
 ...
 </web-app>
 *
 * the vendor-specific mapping of the res-ref-name into their
 * own application server space, eg weblogic does the following
 * in a weblogic.xml file
 *
 <weblogic-web-app>
 ...
 <reference-descriptor>
 ...
 <ejb-reference-description>
 <ejb-ref-name>yoda</ejb-ref-name>
 <jndi-name>ejb/lawyer</jndi-name>
 </ejb-reference-description>
 ...
 </reference-descriptor>
 ...
 </weblogic-web-app>
 */
public class AccessAnEjbFromAServlet extends HttpServlet {
  private Context ctx;

  public void init() throws ServletException {
    try {
      // lets share the context for ejb lookup for
      // this servlet's incoming requests
      ctx = new InitialContext();
    }
    catch( NamingException nex ) {
      throw new ServletException( "couldn't locate JNDI context", nex );
    }
  }


  public void doGet( HttpServletRequest req, HttpServletResponse res )
      throws ServletException, IOException {
    res.setContentType( "text/html" );
    PrintWriter pw = res.getWriter();

    try {
      // get reference to business interface from home interface
      Lawyer lawyer = getLawyer();

      // use the business interface
      lawyer.sendHimDown( "bad guy" );

      // let application server reclaim ejb resources
      lawyer.remove();
    }
    catch( LawyerException lex ) {
      pw.println( lex.getMessage() );
    }
    catch( Exception ex ) {
      log( "problem using the lawyer", ex );
      pw.println( ex.getMessage() );
    }

    pw.println( "well, that wasn't so bad" );
  }

  private Lawyer getLawyer() throws LawyerException {
    try {
      Object ejbObject = null;

      // get hold of the object you want by name
      synchronized( this ) {
        System.out.println( "calling on yoda..." );
        ejbObject = ctx.lookup( "java:comp/env/yoda" );
      }

      // narrow retrieved object into specific expected type
      LawyerHome home = (LawyerHome) PortableRemoteObject.
          narrow( ejbObject, LawyerHome.class );

      return home.create();
    }
    catch( Exception ex ) {
      log( "problem getting hold of a lawyer", ex );
      throw new LawyerException( ex.getMessage() );
    }
  }
}

class LawyerException extends Exception {
  public LawyerException( String str ) {
    super( str );
  }
}

/**
 *
 * This is the web.xml configuration
 *
 <web-app>
 ...
 <ejb-ref>
 <description>bring forth the yoda lawyer</description>
 <ejb-ref-name>yoda</ejb-ref-name>
 <ejb-ref-type>Session</ejb-ref-type>
 <home>com.ack.j2ee.ejb.session.LawyerHome</home>
 <remote>com.ack.j2ee.ejb.session.Lawyer</remote>
 </ejb-ref>
 </web-app>
 *
 * But the vendor-specific xml file must map this
 * ejb-ref-name to the name in the JNDI space, for
 * example, in weblogic we have the weblogic.xml,
 *
 <weblogic-web-app>
 <reference-descriptor>
 <ejb-reference-description>
 <ejb-ref-name>yoda</ejb-ref-name>
 <jndi-name>ejb/lawyer</jndi-name>
 </ejb-reference-description>
 </reference-descriptor>
 </weblogic-web-app>
 */


Accessing a data source from a servlet

package com.ack.web.servlet;

import java.io.IOException;
import java.io.PrintWriter;
import java.sql.Connection;
import java.sql.Date;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import javax.naming.Context;
import javax.naming.InitialContext;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.sql.DataSource;

/**
 * web.xml configuration part of the a data source
 *
 *  <web-app>
 ...
 <resource-ref>
 <description>the database for this app</description>
 <res-ref-name>jdbc/thedatabase</res-ref-name>
 <res-type>javax.sql.DataSource</res-type>
 <res-auth>CONTAINER</res-auth>
 </resource-ref>
 ...
 </web-app>
 *
 * the vendor-specific mapping of the res-ref-name into their
 * own application server space, eg weblogic does the following
 * in a weblogic.xml file
 *
 <weblogic-web-app>
 ...
 <reference-descriptor>
 ...
 <resource-description>
 <res-ref-name>jdbc/thedatabase</res-ref-name>
 <jndi-name>jdbc/gangland</jndi-name>
 </resource-description>
 ...
 </reference-descriptor>
 ...
 </weblogic-web-app>
 */

public class AccessingADataSourceFromAServlet extends HttpServlet {

  public void init() {
    System.out.println( "### loading -> " + getServletName() + " at " +
                        new Date( System.currentTimeMillis() ).toString() );

  }

  public void doGet( HttpServletRequest req, HttpServletResponse res )
      throws ServletException, IOException {
    res.setContentType( "text/html" );
    PrintWriter pw = res.getWriter();

    Connection con = null;
    try {
      Context ctx = new InitialContext();
      DataSource ds = (DataSource) ctx.lookup( "java:comp/env/jdbc/thedatabase" );
      con = ds.getConnection();
      Statement stmt = con.createStatement();
      ResultSet rs = stmt.executeQuery( "select * from enemies" );
      while( rs.next() ) {
        pw.println( rs.getString( "name" ) + "<br>" );
      }
    }
    catch( Exception ex ) {
      log( "problem accessing database", ex );
      res.sendError( res.SC_INTERNAL_SERVER_ERROR, ex.getMessage() );
    }
    finally {
      if( con != null ) {
        try {
          con.close();
        }
        catch( SQLException ex ) {
          log( "problem closing connection", ex );
        }
      }
    }
  }
}


Accessing a java mail session from a servlet

package com.ack.web.servlet;

import java.io.IOException;
import java.io.PrintWriter;
import javax.mail.Message;
import javax.mail.Session;
import javax.mail.Transport;
import javax.mail.internet.InternetAddress;
import javax.mail.internet.MimeMessage;
import javax.naming.Context;
import javax.naming.InitialContext;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

/**
 * configure a resource reference within the web.xml file
 * that is a container managed javamail session object
 *
 <web-app>
 ...
 <resource-ref>
 <description>smtp mail out</description>
 <res-ref-name>mail/smtp</res-ref-name>
 <res-type>javax.mail.Session</res-type>
 <res-auth>CONTAINER</res-auth>
 </resource-ref>
 </web-app>
 *
 * and use your vendor specific xml file to map the
 * resource name to the jndi name, eg for weblogic
 *
 <weblogic-web-app>
 ...
 <reference-descriptor>
 <resource-description>
 <res-ref-name>mail/smtp</res-ref-name>
 <jndi-name>mail/dailyplanet</jndi-name>
 </resource-description>
 ...
 </reference-descriptor>
 </weblogic-web-app>
 *
 *
 */

public class AccessingAJavaMailSessionFromAServlet extends HttpServlet {
  public void doGet( HttpServletRequest req, HttpServletResponse res )
      throws ServletException, IOException {
    res.setContentType( "text/html" );
    PrintWriter pw = res.getWriter();

    try {
      // get hold of the JavaMail session
      Context ctx = new InitialContext();
      Session mailSession = (Session) ctx.lookup( "java:comp/env/mail/smtp" );

      // create a message
      Message msg = new MimeMessage( mailSession );
      msg.setSubject( "a servlet test email" );
      msg.setSentDate( new java.util.Date( System.currentTimeMillis() ) );
      msg.setText( "<h1>Hello You</h1>" );
      msg.addHeader( "Content-Type", "text/html" );
      msg.setFrom( new InternetAddress( "x@xxx" ) );
      msg.setRecipient( Message.RecipientType.TO,
                        new InternetAddress( "cleve" ) );

      // send it
      Transport.send( msg );

      // and provide feedback to the use
      pw.println( "message sent!" );
    }
    catch( Exception ex ) {
      // if we get a problem, log it
      log( "problem sending message", ex );

      // and send an error back to the client
      res.sendError( res.SC_INTERNAL_SERVER_ERROR, ex.getMessage() );
    }
  }
}


Accessing servlet jndi environment variables

package com.ack.web.servlet;

import java.io.IOException;
import java.io.PrintWriter;
import javax.naming.Context;
import javax.naming.InitialContext;
import javax.naming.NamingException;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

/**
 * It is better to use environment variables within a J2EE
 * context for values that can be changed a deployment time
 * instead of Context attributes within the web.xml.  This
 * way you don't have to update the web.xml to change the
 * values.
 *
 *
 <env-entry>
 <description>the guy responsible for this site</description>
 <env-entry-name>webmaster</env-entry-name>
 <env-entry-value>x@xxx</env-entry-value>
 <env-entry-type>java.lang.String</env-entry-type>
 </env-entry>
 */
public class AccessingServletJndiEnvironmentVariables extends HttpServlet {

  public void doGet( HttpServletRequest req, HttpServletResponse res )
      throws ServletException, IOException {
    res.setContentType( "text/html" );
    PrintWriter pw = res.getWriter();

    String webMaster = null;
    try {
      // get a handle on the JNDI root context
      Context ctx = new InitialContext();

      // and access the environment variable for this web component
      webMaster = (String) ctx.lookup( "java:comp/env/webmaster" );
    }
    catch( NamingException ex ) {
      ex.printStackTrace();
    }

    pw.println( "the web master is -> " + webMaster );
  }
}


An included servlet

package com.ack.web.servlet;

import java.io.IOException;
import java.io.PrintWriter;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

public class AnIncludedServlet extends HttpServlet {

  public void doGet( HttpServletRequest req, HttpServletResponse res )
      throws ServletException, IOException {
    PrintWriter pw = res.getWriter();

    /**
     * note that a servlet that has been included within another
     * servlet has access to both the original request uri, servlet
     * path, path info, context path and query string through the
     * HttpServletRequest object.
     *
     * However it also has access to these values that can be different
     * depending on how the servlet include was dispatched.  The servlet
     * engine gives you access to these though request attributes as
     * demonstrated before.
     */

    pw.println( "<h1>The Included Servlet</h1>" );
    pw.println( "<br>request uri: " +
                req.getAttribute( "javax.servlet.include.request_uri" ) );
    pw.println( "<br>context path: " +
                req.getAttribute( "javax.servlet.include.context_path" ) );
    pw.println( "<br>servlet path: " +
                req.getAttribute( "javax.servlet.include.servlet_path" ) );
    pw.println( "<br>path info: " +
                req.getAttribute( "javax.servlet.include.path_info" ) );
    pw.println( "<br>query string: " +
                req.getAttribute( "javax.servlet.include.query_string" ) );
  }
}


Attachment receiver

package com.ack.webservices.jaxm.servlet;

import java.util.Iterator;
import javax.servlet.ServletException;
import javax.xml.messaging.JAXMServlet;
import javax.xml.messaging.ReqRespListener;
import javax.xml.soap.AttachmentPart;
import javax.xml.soap.MessageFactory;
import javax.xml.soap.SOAPEnvelope;
import javax.xml.soap.SOAPMessage;
import javax.xml.soap.SOAPPart;

/**
 * Servlet that accepts a SOAP message and looks through
 * its attachments before sending the SOAP part of the message
 * to the console and sending back a response
 *
 */
public class AttachmentReceiver extends JAXMServlet implements ReqRespListener {
  private MessageFactory fac;

  public void init() throws ServletException {
    try {
      fac = MessageFactory.newInstance();
    }
    catch( Exception ex ) {
      ex.printStackTrace();
      throw new ServletException( ex );
    }
  }

  // This is the application code for handling the message.. Once the
  // message is received the application can retrieve the soap part, the
  // attachment part if there are any, or any other information from the
  // message.

  public SOAPMessage onMessage( SOAPMessage message ) {
    System.out.println( "On message called in receiving servlet" );
    try {
      System.out.println( "\nMessage Received: " );
      System.out.println( "\n============ start ============\n" );

      // dump out attachments
      System.out.println( "Number of Attachments: " + message.countAttachments() );
      int i = 1;
      for( Iterator it = message.getAttachments(); it.hasNext(); i++ ) {
        AttachmentPart ap = (AttachmentPart) it.next();
        System.out.println( "Attachment #" + i + " content type : " +
                            ap.getContentType() );
      }

      // dump out the SOAP part of the message
      SOAPPart soapPart = message.getSOAPPart();
      System.out.println( "SOAP Part of Message:\n\n" + soapPart );
      System.out.println( "\n============ end ===========\n" );

      SOAPMessage msg = fac.createMessage();
      SOAPEnvelope env = msg.getSOAPPart().getEnvelope();

      env.getBody()
          .addChildElement( env.createName( "MessageResponse" ) )
          .addTextNode( "Right back at you" );
      return msg;
    }
    catch( Exception e ) {
      e.printStackTrace();
      return null;
    }
  }
}


Background tasks

package com.ack.web.servlet;

import java.io.IOException;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

public class BackgroundTasks extends HttpServlet {
  private Ticker ticker;

  public void init() {
    ticker = new Ticker();
    Thread t = new Thread( ticker );
    t.start();
  }

  public void doGet( HttpServletRequest req, HttpServletResponse res )
      throws ServletException, IOException {
    // this servlet processes requests and has a background
    // thread running to handle the execute of ticker objects

    // do not pass HttpServletRequest and HttpServletResponse to
    // background threads

    res.setContentType( "text/html" );
    res.getWriter().println( "check your console, i'm ticking<br>" );
  }

  public void destroy() {
    ticker.stop();
  }

}

// background task

class Ticker implements Runnable {
  private volatile boolean keepAlive = true;
  private int count;

  public synchronized void stop() {
    keepAlive = false;
  }

  public void run() {
    while( keepAlive ) {
      System.out.println( "still alive [" + ( count++ ) + "]" );
      try {
        Thread.currentThread().sleep( 5000 );
      }
      catch( InterruptedException ie ) {
        ie.printStackTrace();
      }
    }
  }
}


Basic authentication web resource

package com.ack.web.servlet;

import java.io.IOException;
import java.io.PrintWriter;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

/**
 * Securing a web application with basic HTTP authentication
 * has been reduced to a configuration within web.xml
 *
 * to test: http://localhost/ack/servlet/protected/footie/get_time
 *
 <web-app>
 <servlet>
 <servlet-name>footie_time</servlet-name>
 <servlet-class>com.ack.web.servlet.BasicAuthenticationWebResource</servlet-class>
 </servlet>
 <servlet-mapping>
 <servlet-name>footie_time</servlet-name>
 <url-pattern>/protected/footie/get_time</url-pattern>
 </servlet-mapping>
 <security-constraint>
 <web-resource-collection>
 <web-resource-name>protected_zone</web-resource-name>
 <url-pattern>/protected/footie/*</url-pattern>
 <http-method>GET</http-method>
 <http-method>POST</http-method>
 <http-method>PUT</http-method>
 <http-method>DELETE</http-method>
 <http-method>HEAD</http-method>
 <http-method>OPTIONS</http-method>
 <http-method>TRACE</http-method>
 </web-resource-collection>
 <auth-constraint>
 <role-name>footie</role-name>
 </auth-constraint>
 <user-data-constraint>
 <transport-guarantee>NONE</transport-guarantee>
 </user-data-constraint>
 </security-constraint>
 <login-config>
 <auth-method>BASIC</auth-method>
 <realm-name>pure genius football club</realm-name>
 </login-config>
 <security-role>
 <description>the footie guys</description>
 <role-name>footie</role-name>
 </security-role>
 </web-app>
 *
 * finally we need to map from the 'footie' role name to the
 * security principal with the application server, in weblogic
 * we do the following within the supporting weblogic.xml file:
 *
 *
 <weblogic-web-app>
 <security-role-assignment>
 <role-name>footie</role-name>
 <principal-name>cleve</principal-name>
 </security-role-assignment>
 </weblogic-web-app>
 */
public class BasicAuthenticationWebResource extends HttpServlet {
  public void doGet( HttpServletRequest req, HttpServletResponse res )
      throws ServletException, IOException {
    res.setContentType( "text/html" );
    PrintWriter pw = res.getWriter();

    pw.println( "<strong>21:00 @ The Wandle Centre, Wandsworth</strong>" );
    pw.println( "<br>don't be late!" );

  }
}


Buffering servlet responses

package com.ack.web.servlet;

import java.io.IOException;
import java.io.PrintWriter;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

/**
 *
  */
public class BufferingServletResponses extends HttpServlet {
  public void doGet( HttpServletRequest req, HttpServletResponse res )
      throws ServletException, IOException {
    res.setContentType( "text/html" );
    PrintWriter pw = res.getWriter();

    // create 32K buffer
    res.setBufferSize( 32 * 1024 );

    pw.println( "everything we send now is buffered " );
    pw.println( "at the server until we reach the " );
    pw.println( "buffer size limit or we do a flush!" );

    // check to see if anything has been sent to the client
    if( res.isCommitted() ) {
      pw.println( "<br>damned, something has been sent" );
    }
    else {
      // clear the buffer, so what has gone before is lost
      res.resetBuffer();

      pw.println( "we are going to clear this as well" );

      // clears buffer, status codes and headers
      res.reset();

      // we've blanked the ContentType header so lets add it back
      res.setContentType( "text/html" );

      pw.println( "<br>but we are going to see this" );
    }

    // send what we have now
    res.flushBuffer();

    pw.println( "<br>and this will get flushed at the end of the method" );
    pw.println( "<br>current response buffer size is: " + res.getBufferSize() );
  }
}


Count total number of live sessions in a web application

--- JSP page for testing (test.jsp) -- 

<%
Integer icount = (Integer)session.getAttribute("count");
out.println("total live sessions "+icount);
%>


--- Servlet that handles session count --

import javax.servlet.*;
import javax.servlet.http.*;

public final class CounterListener implements HttpSessionListener
    {
     private int count = 1;
     private ServletContext context = null;
    
     public synchronized void sessionCreated(HttpSessionEvent se)
         {
         count++;
         log("sessionCreated("+se.getSession().getId()+") count="+count);
         se.getSession().setAttribute("count",new Integer(count));
     }
    
     public synchronized void sessionDestroyed(HttpSessionEvent se)
         {
         count--;
         log("sessionDestroyed("+se.getSession().getId()+") count="+count);
         se.getSession().setAttribute("count",new Integer(count));
     }
    
     public int getCount()
         {
         return this.count;
     }
    
     public void addCount()
         {
         count++;
     }
    
     private void log(String message)
         {
         if (context != null)
         context.log("SessionListener: " + message);
         else
         System.out.println("SessionListener: " + message);
     }
    
}//close class CounterListener


--- web.xml file modification --

<?xml version="1.0" encoding="ISO-8859-1"?>

<!DOCTYPE web-app
PUBLIC "-//Sun Microsystems, Inc.//DTD Web Application 2.3//EN"
"http://java.sun.com/dtd/web-app_2_3.dtd">

<web-app>
<display-name>Welcome to Tomcat</display-name>

<!-- add this line of code -->
<listener>
<listener-class>CounterListener</listener-class>
</listener>

<description>
Welcome to Tomcat
</description>

</web-app>


Create a servlet session

package com.ack.web.servlet;

import java.io.IOException;
import java.io.PrintWriter;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

public class CreateAServletSession extends HttpServlet {
  public void doGet( HttpServletRequest req, HttpServletResponse res )
      throws ServletException, IOException {
    res.setContentType( "text/html" );
    PrintWriter pw = res.getWriter();
    pw.println( "<HTML><BODY>" );

    // get session, and create it if one doesn't already exist
    HttpSession theSession = req.getSession();

    // check if session is newly created
    if( theSession.isNew() ) {
      pw.println( "<P>Session: isNew</P>" );
    }
    else {
      pw.println( "<P>Session: Already Exists</P>" );
    }

    pw.println( "</BODY></HTML>" );
  }
}



Delegate filter

package com.ack.web.servlet;

import java.io.IOException;
import javax.servlet.Filter;
import javax.servlet.FilterChain;
import javax.servlet.FilterConfig;
import javax.servlet.ServletException;
import javax.servlet.ServletRequest;
import javax.servlet.ServletResponse;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;

/*
   to configure this filter display every request uri and the time taken
   to complete it.  Compile this class into the WEB-INF/classes directory
   and configure you WEB-INF/web.xml file to include the following filter.

   Note how you can map the filter onto any url-pattern of your choosing.

   <web-app>
    <filter>
      <filter-name>requesttimerfilter</filter-name>
      <filter-class>com.ack.web.servlet.RequestTimerFilter</filter-class>
    </filter>
    <filter-mapping>
      <filter-name>requesttimerfilter</filter-name>
      <url-pattern>/*</url-pattern>
    </filter-mapping>
   </web-app>
 */

public class DelegateFilter extends HttpServlet implements Filter {
  private FilterConfig filterConfig;

  public void init( FilterConfig filterConfig ) {
    this.filterConfig = filterConfig;
  }

  public void doFilter( ServletRequest request,
                        ServletResponse response,
                        FilterChain filterChain ) {
    try {
      String requestURI = ( (HttpServletRequest) request ).getRequestURI();
      System.out.println( "delegating to -> " + requestURI );
      filterChain.doFilter( request, response );


    }
    catch( ServletException sx ) {
      log( sx.getMessage() );
    }
    catch( IOException iox ) {
      log( iox.getMessage() );
    }
  }
}


Delegate servlet requests to a handler

package com.ack.web.servlet;

import java.io.IOException;
import java.io.PrintWriter;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

public class DelegateServletRequestsToAHandler extends HttpServlet {
  /**
   * write a method to handle HTTP requests made on the servlet
   */
  public void handleRequest( HttpServletRequest req,
                             HttpServletResponse res )
      throws ServletException, IOException {
    res.setContentType( "text/html" );
    PrintWriter pw = res.getWriter();

    // output what type of HTTP request was made on the servlet
    pw.println( "HTTP Request Method -> " + req.getMethod() );
  }

  // delegate HTTP GETs to the handler method
  public void doGet( HttpServletRequest req, HttpServletResponse res )
      throws ServletException, IOException {
    handleRequest( req, res );
  }

  // delegate HTTP POSTs to the handler method
  public void doPost( HttpServletRequest req, HttpServletResponse res )
      throws ServletException, IOException {
    handleRequest( req, res );
  }
}


Destroy a servlet session

package com.ack.web.servlet;

import java.io.IOException;
import java.io.PrintWriter;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

public class DestroyAServletSession extends HttpServlet {
  public void doGet( HttpServletRequest req, HttpServletResponse res )
      throws ServletException, IOException {
    res.setContentType( "text/html" );
    PrintWriter pw = res.getWriter();
    pw.println( "<HTML><BODY>" );

    // get current session, and don't create one if it doesn't exist
    HttpSession theSession = req.getSession( false );

    // print out the session id
    if( theSession != null ) {
      pw.println( "<BR>Session Id: " + theSession.getId() );
      synchronized( theSession ) {
        // invalidating a session destroys it
        theSession.invalidate();
        pw.println( "<BR>Session destroyed" );
      }
    }

    pw.println( "</BODY></HTML>" );
    pw.close();
  }
}


Forward to a servlet by name

package com.ack.web.servlet;

import java.io.IOException;
import javax.servlet.RequestDispatcher;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

public class ForwardToAServletByName extends HttpServlet {
  public void doGet( HttpServletRequest req, HttpServletResponse res )
      throws ServletException, IOException {
    // do not commit anything to the response stream before a forward

    // set in a request attribute to communicate hello to the
    // servlet we forward to
    req.setAttribute( "hello", "world" );

    // create a request dispatcher by name to forward to
    // this is more limiting that getRequestDispatcher because
    // you cannot specified a query string or extra path information
    //
    // however, you can dispatch to named web components within the
    // web.xml that do not have publicised URIs
    RequestDispatcher rd =
        getServletContext().getNamedDispatcher( "receiveforward" );

    // and then forward
    rd.forward( req, res );
  }
}


Forward to a servlet by request

package com.ack.web.servlet;

import java.io.IOException;
import javax.servlet.RequestDispatcher;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

public class ForwardToAServletByRequest extends HttpServlet {
  public void doGet( HttpServletRequest req, HttpServletResponse res )
      throws ServletException, IOException {
    // do not commit anything to the response stream before a forward

    // set in a request attribute to communicate hello to the
    // servlet we forward to
    req.setAttribute( "hello", "world" );

    // create a request dispatcher to forward
    RequestDispatcher rd =
        getServletContext().
        getRequestDispatcher( "/acceptforward/barry/white?rules=ok" );

    // and then forward
    rd.forward( req, res );
  }
}


Generic filter

package com.ack.web.servlet;

import java.io.IOException;
import javax.servlet.Filter;
import javax.servlet.FilterChain;
import javax.servlet.FilterConfig;
import javax.servlet.ServletContext;
import javax.servlet.ServletException;
import javax.servlet.ServletRequest;
import javax.servlet.ServletResponse;

/**
 * provides a base implementation for servlet filters.  just
 * extend to implement your own custom filters
 */
public class GenericFilter implements Filter {
  private FilterConfig config;

  public void doFilter( final ServletRequest req,
                        final ServletResponse res,
                        FilterChain chain )
      throws ServletException, IOException {
    chain.doFilter( req, res );
  }

  public void init( FilterConfig config ) {
    setFilterConfig( config );
  }

  public void setFilterConfig( FilterConfig config ) {
    this.config = config;
  }

  public ServletContext getServletContext() {
    return getFilterConfig().getServletContext();
  }

  public FilterConfig getFilterConfig() {
    return config;
  }

  public void log( String str ) {
    getServletContext().log( str );
  }

  public void log( String str, Exception e ) {
    getServletContext().log( str, e );
  }

  public void destroy() {
  }
}


Get security information

package com.ack.web.servlet;

import java.io.IOException;
import java.io.PrintWriter;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;


public class GetSecurityInformation extends HttpServlet {

  public void doGet( HttpServletRequest req, HttpServletResponse res )
      throws ServletException, IOException {
    res.setContentType( "text/html" );
    PrintWriter pw = res.getWriter();

    /**
     * security information made available within servlets
     */
    pw.println( "<br>user principal: " + req.getUserPrincipal().getName() );
    pw.println( "<br>authentication type: " + req.getAuthType() );
    pw.println( "<br>user in footie role: " + req.isUserInRole( "footie" ) );
    pw.println( "<br>are we using HTTPS: " + req.isSecure() );
  }
}

/**
 * Here is a dump of the web.xml file containing the security
 * configuration details.
 *
 <web-app>
 <servlet>
 <servlet-name>footie_time</servlet-name>
 <servlet-class>com.ack.web.servlet.BasicAuthenticationWebResource</servlet-class>
 </servlet>
 <servlet-mapping>
 <servlet-name>footie_time</servlet-name>
 <url-pattern>/protected/footie/get_time</url-pattern>
 </servlet-mapping>
 <servlet>
 <servlet-name>security_info</servlet-name>
 <servlet-class>com.ack.servlet.GetSecurityInfo</servlet-class>
 </servlet>
 <servlet-mapping>
 <servlet-name>security_info</servlet-name>
 <url-pattern>/protected/footie/info</url-pattern>
 </servlet-mapping>
 <security-constraint>
 <web-resource-collection>
 <web-resource-name>protected_zone</web-resource-name>
 <url-pattern>/protected/footie/*</url-pattern>
 <http-method>GET</http-method>
 <http-method>POST</http-method>
 <http-method>PUT</http-method>
 <http-method>DELETE</http-method>
 <http-method>HEAD</http-method>
 <http-method>OPTIONS</http-method>
 <http-method>TRACE</http-method>
 </web-resource-collection>
 <auth-constraint>
 <role-name>footie</role-name>
 </auth-constraint>
 <user-data-constraint>
 <transport-guarantee>NONE</transport-guarantee>
 </user-data-constraint>
 </security-constraint>
 <login-config>
 <auth-method>BASIC</auth-method>
 <realm-name>pure genius football club</realm-name>
 </login-config>
 <security-role>
 <description>the footie guys</description>
 <role-name>footie</role-name>
 </security-role>
 </web-app>
 */


Get servlet session time info

package com.ack.web.servlet;

import java.io.IOException;
import java.io.PrintWriter;
import java.util.Date;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

public class GetServletSessionTimeInfo extends HttpServlet {
  public void doGet( HttpServletRequest req, HttpServletResponse res )
      throws ServletException, IOException {
    res.setContentType( "text/html" );
    PrintWriter pw = res.getWriter();
    pw.println( "<HTML><BODY>" );

    // get session, and create it if one doesn't already exist
    HttpSession theSession = req.getSession();

    // get session id and it's max lifetime in seconds
    pw.println( "<BR>Session Id: " + theSession.getId() );
    pw.println( "<BR>Session Max Inactive Time (seconds): "
                + theSession.getMaxInactiveInterval() );

    // get creation time
    long dateTimes = theSession.getCreationTime();
    pw.println( "<BR>Session Creation Time: " + new Date( dateTimes ) );

    // get last access time, negative if never been accessed
    dateTimes = theSession.getLastAccessedTime();
    if( dateTimes < 0 ) {
      pw.println( "<BR>Session Last Access Time: Never Been Access Befored" );
    }
    else {
      pw.println( "<BR>Session Last Access Time: " + new Date( dateTimes ) );
    }

    pw.println( "</BODY></HTML>" );
  }
}


Getting information regarding the client browser using JSP

package de.hunsicker.http.util;


import java.util.*;
import javax.servlet.*;
import javax.servlet.http.*;

public class Browser extends HttpServlet
{
  protected HttpServletRequest request;
  protected HttpSession session;

  protected String userAgent;
  protected String company;          // Firmenname des Herstellers
  protected String name;             // Bezeichnung des Browsers
  protected String version;          // Version
  protected String mainVersion;      // Hauptversion
  protected String minorVersion;     // Unterversion
  protected String os;               // Betriebssystem
  protected String language = "de";  // Sprachcode Standard
  protected Locale locale;           // Locale-Objekt mit den aktuellen
                                     // Spracheinstellungen

  private Hashtable supportedLanguages; // Untersttzte Sprachen

  public Browser(HttpServletRequest request, HttpSession session)
  {
    this.initialize();
    this.request = request;
    this.session = session;

    this.setUserAgent(this.request.getHeader("User-Agent"));
    this.setCompany();
    this.setName();
    this.setVersion();
    this.setMainVersion();
    this.setMinorVersion();
    this.setOs();
    this.setLanguage();
    this.setLocale();
  }

  public void initialize()
  {
	this.supportedLanguages = new Hashtable(2);
  	this.supportedLanguages.put("en", "");
  	this.supportedLanguages.put("de", "");
  }

  public void setUserAgent(String httpUserAgent)
  {
    this.userAgent = httpUserAgent.toLowerCase();
  }

  private void setCompany()
  {
    if (this.userAgent.indexOf("MSIE") > -1)
    {
      this.company = "Microsoft";
    }
    else if (this.userAgent.indexOf("opera") > -1)
    {
      this.company = "Opera Software";
    }
    else if (this.userAgent.indexOf("mozilla") > -1)
    {
      this.company = "Netscape Communications";
    }
    else
    {
      this.company = "unknown";
    }
  }

  /**
   * Liefert den Firmennamen des Herstellers des verwendeten Browsers.
   */
  public String getCompany()
  {
    return this.company;
  }

  private void setName()
  {
    if (this.company == "Microsoft")
    {
      this.name = "Microsoft Internet Explorer";
    }
    else if (this.company == "Netscape Communications")
    {
      this.name = "Netscape Navigator";
    }
    else if (this.company == "Operasoftware")
    {
      this.name = "Operasoftware Opera";
    }
    else
    {
      this.name = "unknown";
    }
  }

  /**
   * Liefert den Namen des verwendeten Browsers.
   */
  public String getName()
  {
    return this.name;
  }

  private void setVersion()
  {
    int tmpPos;
    String tmpString;

    if (this.company == "Microsoft")
    {
      String str = this.userAgent.substring(this.userAgent.indexOf("msie") + 5);
      this.version = str.substring(0, str.indexOf(";"));
    }
    else
    {
     tmpString = (this.userAgent.substring(tmpPos = (this.userAgent.indexOf("/")) + 1,
       tmpPos + this.userAgent.indexOf(" "))).trim();
     this.version = tmpString.substring(0, tmpString.indexOf(" "));
    }
  }

  /**
   * Liefert die Versionsnummer des verwendeten Browsers.
   */
  public String getVersion()
  {
    return this.version;
  }

  private void setMainVersion()
  {
    this.mainVersion = this.version.substring(0, this.version.indexOf("."));
  }

  /**
   * Liefert die Hauptversionsnummer des verwendeten Browsers.
   */
  public String getMainVersion()
  {
    return this.mainVersion;
  }

  private void setMinorVersion()
  {
    this.minorVersion = this.version.substring(this.version.indexOf(".") + 1).trim();
  }

  /**
   * Liefert die Unterversionsnummer des verwendeten Browsers.
   */
  public String getMinorVersion()
  {
    return this.minorVersion;
  }

  private void  setOs()
  {
     if (this.userAgent.indexOf("win") > -1)
     {
		  if (this.userAgent.indexOf("windows 95") > -1 || this.userAgent.indexOf("win95") > -1)
		  {
			this.os = "Windows 95";
		  }
		  if (this.userAgent.indexOf("windows 98") > -1 || this.userAgent.indexOf("win98") > -1)
		  {
			this.os = "Windows 98";
		  }
		  if (this.userAgent.indexOf("windows nt") > -1 || this.userAgent.indexOf("winnt") > -1)
		  {
			this.os = "Windows NT";
		  }
		  if (this.userAgent.indexOf("win16") > -1 || this.userAgent.indexOf("windows 3.") > -1)
		  {
			this.os = "Windows 3.x";
		  }
     }
	 else if (this.userAgent.indexOf("Mac") > -1 )
	 {
          if (this.userAgent.indexOf("Mac_PowerPC") > -1 || this.userAgent.indexOf("Mac_PPC") > -1)
          {
            this.os = "Macintosh Power PC";
          }
          else if (this.userAgent.indexOf("Macintosh") > -1)
          {
            this.os = "Macintosh";
          }
          else
          {
			  this.os = "Unknown Mac";
          }
     }
  }

  /**
   * Liefert den Namen des Betriebssystems.
   */
  public String getOs()
  {
    return this.os;
  }

  private void setLanguage()
  {
    String prefLanguage = this.request.getHeader("Accept-Language");

    if (prefLanguage != null)
    {
      String language = null;
      StringTokenizer st = new StringTokenizer(prefLanguage, ",");

      int elements = st.countTokens();

      for (int idx = 0; idx < elements; idx++)
      {
  		if (this.supportedLanguages.containsKey((language = st.nextToken())))
  		{
  		  this.language = this.parseLocale(language);
  		}
  	  }
    }
  }

 


Handling form content

package com.ack.web.servlet;

import java.io.IOException;
import java.io.PrintWriter;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

public class HandlingFormContent extends HttpServlet {

  public void doPost( HttpServletRequest req, HttpServletResponse res )
      throws ServletException, IOException {
    res.setContentType( "text/html" );
    PrintWriter pw = res.getWriter();
    pw.println( "<h4>Form Results</h4>" );

    pw.println( "<p>query string: " + req.getQueryString() );
    pw.println( "<p>unspecified parameter: " + req.getParameter( "coldasice" ) );
    pw.println( "<p>GET parameter: " + req.getParameter( "done" ) );
    pw.println( "<p>POST parameter (textfield): " + req.getParameter( "textfield" ) );
    pw.println( "<p>POST multi-valued parameter (select): " );

    String[] values = req.getParameterValues( "select" );
    for( int i = 0; i < values.length; i++ ) {
      pw.println( values[i] );
    }
  }
}


Handling invalid sessions

package com.ack.web.servlet;

import java.io.IOException;
import java.io.PrintWriter;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

public class HandlingInvalidSessions extends HttpServlet {
  public void goGet( HttpServletRequest req, HttpServletResponse res )
      throws ServletException, IOException {
    res.setContentType( "text/html" );
    PrintWriter pw = res.getWriter();
    pw.println( "<HTML><BODY>" );

    HttpSession theSession = req.getSession();

    try {
      Object obj = theSession.getAttribute( "counter" );

      /**
       * the above call will throw an IllegalStateException
       * if theSession has been invalidated (e.g. by the
       * container or by another servlet)
       *
       * a defensive servlet programmer should wrap all accesses
       * to a servlet session (not just getAttribute()) in a
       * try/catch block so that they can take the appropriate
       * action to handle the case where a session is destroyed
       * at anytime
       */
    }
    catch( IllegalStateException ise ) {
      // handle invalid session here
    }

    pw.println( "</BODY></HTML>" );
  }
}


Hello servlet

//J2SE Libraries;
import java.io.IOException;
import java.io.PrintWriter;

//J2EE Libraries;
import javax.servlet.Servlet;
import javax.servlet.ServletConfig;
import javax.servlet.ServletContext;
import javax.servlet.ServletException;
import javax.servlet.http.HttpSession;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

/**
*
*A very basic servlet which prints Hello world!
*For addtional documentation refer-> http://java.sun.com/servlets
*For addtional documentation refer-> http://java.sun.com/jsp
*/
    public final class HelloServlet extends HttpServlet {
         public void init(ServletConfig config) throws ServletException {
         super.init(config);
     };
    
         protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
         doPost(request, response);
     };
    
         protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
         PrintWriter out= response.getWriter();
         out.println("<HTML><BODY>");
         out.println("Hello world!");
         out.println("</BODY></HTML>");
     }
    
     //optional method;
         public void destroy() {
         System.gc();
     }
}


Hello world

package com.ack.web.servlet;

import java.io.IOException;
import java.io.PrintWriter;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

/**
 * HelloWorld servlet
 */
public class HelloWorld extends HttpServlet {
  /**
   * HTTP GET requests result in this doGet() method getting called and
   * the incoming request and outgoing response objects passed in
   */
  public void doGet( HttpServletRequest request, HttpServletResponse response )
      throws ServletException, IOException {
    response.setContentType( "text/html" );

    // get a handle on the output stream
    // used to send stuff back to the calling client
    PrintWriter out = response.getWriter();

    // and then output what you want to send
    out.println( "hello world" );
  }
}


Http client pull model

package com.ack.web.servlet;

import java.io.IOException;
import java.io.PrintWriter;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

/**
 *
 * In this example, we demonstrate the client pull model.
 *
 * Here we have a client reading a book, specifying a
 * refresh every two seconds.  The current page is
 * stored in the client's HttpSession.
 *
 * When we have finished the book, we redirect the client
 * to the acknowledge web site
 *
 * Client Pull sees the client pulling content from the
 * server using the Refresh HTTP header directive
 */

public class HttpClientPullModel extends HttpServlet {

  public void doGet( HttpServletRequest req, HttpServletResponse res )
      throws ServletException, IOException {
    res.setContentType( "text/html" );
    PrintWriter pw = res.getWriter();

    // get a session to hold the current page
    HttpSession session = req.getSession();
    Integer pageNumber = (Integer) session.getAttribute( "page" );
    if( pageNumber == null ) {
      pageNumber = new Integer( 1 );
    }
    else {
      pageNumber = new Integer( pageNumber.intValue() + 1 );
    }
    pw.println( "Page: " + pageNumber );

    // finish the book when its gets to page 10
    if( pageNumber.intValue() == 10 ) {
      // tell client we're done and kill the session
      pw.println( "we are done reading.." );
      session.removeAttribute( "page" );
      session.invalidate();

      // finally, send the client to the client site after 5 secs
      res.setHeader( "Refresh", "5; URL=http://www.xxx" );
    }
    else {
      // if we have more pages, signal refresh of current page
      res.setHeader( "Refresh", "2" );
      session.setAttribute( "page", pageNumber );
    }

    // output some time information
    pw.println( "<p><hr><p>" );
    pw.println( new java.util.Date( System.currentTimeMillis() ) );
  }
}


Include a servlet

package com.ack.web.servlet;

import java.io.IOException;
import java.io.PrintWriter;
import javax.servlet.RequestDispatcher;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

public class IncludeAServlet extends HttpServlet {

  public void doGet( HttpServletRequest req, HttpServletResponse res )
      throws ServletException, IOException {
    res.setContentType( "text/html" );
    PrintWriter pw = res.getWriter();

    pw.println( "<h1>The Including Servlet</h1>" );
    pw.println( "<br>request uri: " + req.getRequestURI() );
    pw.println( "<br>servlet path: " + req.getServletPath() );
    pw.println( "<br>path info: " + req.getPathInfo() );
    pw.println( "<br>query string: " + req.getQueryString() );
    pw.println( "<p><hr><p>" );

    RequestDispatcher rd
        = getServletContext().
        getRequestDispatcher( "/includeme/marvin/gaye?billy=idol" );

    rd.include( req, res );
  }
}


JSP file response filter
  
 

package com.ack.web.servlet;

import java.io.IOException;
import javax.servlet.Filter;
import javax.servlet.FilterChain;
import javax.servlet.FilterConfig;
import javax.servlet.ServletException;
import javax.servlet.ServletRequest;
import javax.servlet.ServletResponse;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

/*
   to configure this filter process the outgoing responses for the viewfile servlet
   that is streaming back the contents of a jsp file.

   Compile this class into the WEB-INF/classes directory
   and configure you WEB-INF/web.xml file to include the following filter.

   Note how you can map the filter onto a servlet of your choosing.

   <web-app>
     <filter>
       <filter-name>jsp_response</filter-name>
       <filter-class>com.ack.web.servlet.JSPFileResponseFilter</filter-class>
     </filter>
     <filter-mapping>
      <filter-name>jsp_response</filter-name>
      <servlet-name>viewfile</servlet-name>
     </filter-mapping>
   </web-app>
 */

public class JSPFileResponseFilter extends HttpServlet implements Filter {
  private FilterConfig filterConfig;

  public void init( FilterConfig filterConfig ) {
    this.filterConfig = filterConfig;
  }

  public void doFilter( ServletRequest request,
                        ServletResponse response,
                        FilterChain filterChain ) {
    try {
      // the extra path information contents the uri of the file to view
      String pathInfo = ( (HttpServletRequest) request ).getPathInfo();
      System.out.println( "delegate jsp view to -> " + pathInfo );

      // if its a jsp file
      if( pathInfo != null && pathInfo.endsWith( ".jsp" ) &&
          response instanceof HttpServletResponse ) {
        // create a response wrapper to handle the streaming
        // of the jsp file back to the HTTP client
        JSPHttpServletResponseWrapper wrapperResponse =
            new JSPHttpServletResponseWrapper( (HttpServletResponse) response );

        // and then do it
        filterChain.doFilter( request, wrapperResponse );
      }
      else {
        // if not a JSP file, there is no extra processing
        // to do on the response
        filterChain.doFilter( request, response );
      }
    }
    catch( ServletException sx ) {
      log( sx.getMessage() );
    }
    catch( IOException iox ) {
      log( iox.getMessage() );
    }
  }
}



JSP Http servlet response wrapper
  
 

package com.ack.web.servlet;

import java.io.IOException;
import java.io.PrintWriter;
import javax.servlet.ServletOutputStream;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpServletResponseWrapper;

/**
 * JSPHttpServletResponseWrapper is used to adapt the response of a servlet.
 * The wrappers sole responsibility is to create a JSPServletOutputStream
 * off the provided HttpServletResponse.  The JSPServletOutputStream is when
 * we can customize when is streamed back to the HTTP client.  The
 * JSPHttpServletResponseWrapper provides the infrastructural scaffolding to
 * plug into our specialising output stream.
 */

public class JSPHttpServletResponseWrapper extends HttpServletResponseWrapper {
  protected ServletOutputStream stream = null;
  protected PrintWriter writer = null;
  protected HttpServletResponse origResponse = null;

  public JSPHttpServletResponseWrapper( HttpServletResponse response ) {
    super( response );
    response.setContentType("text/plain");
    origResponse = response;
  }

  public ServletOutputStream createOutputStream()
      throws IOException {
    return ( new JSPServletOutputStream( origResponse ) );
  }

  public ServletOutputStream getOutputStream()
      throws IOException {
    if( writer != null ) {
      throw new IllegalStateException( "getWriter() has already been " +
                                       "called for this response" );
    }

    if( stream == null ) {
      stream = createOutputStream();
    }

    return stream;
  }

  public PrintWriter getWriter()
      throws IOException {
    if( writer != null ) {
      return writer;
    }

    if( stream != null ) {
      throw new IllegalStateException( "getOutputStream() has already " +
                                       "been called for this response" );
    }

    stream = createOutputStream();
    writer = new PrintWriter( stream );

    return writer;
  }
}


JSP servlet output stream
  
 

package com.ack.web.servlet;

import java.io.IOException;
import javax.servlet.ServletOutputStream;
import javax.servlet.http.HttpServletResponse;

/**
 * In the ServletOutputStream all methods converge on the write(int)
 * output method.  So it is this method that we override to customise
 * what is sent back to an HTTP client that uses the JSPServletOutputStream.
 *
 * In this case we simply replace '<' with '[' and '>' with ']', each
 * with ascii values 60, 91, 62, 93 respectively.
 *
 */
public class JSPServletOutputStream extends ServletOutputStream {
  private HttpServletResponse delegate;

  public JSPServletOutputStream( HttpServletResponse hss ) {
    delegate = hss;
  }

  public void write( int c ) throws IOException {
    if( c == 60 ) {
      delegate.getOutputStream().write( 91 );
    }
    else if( c == 62 ) {
      delegate.getOutputStream().write( 93 );
    }
    else {
      delegate.getOutputStream().write( c );
    }
  }
}


Load servlet at startup
  
 

package com.ack.web.servlet;

import javax.servlet.http.HttpServlet;

/**
 *
 <servlet>
 <servlet-name>earlyriser</servlet-name>
 <servlet-class>com.ack.web.servlet.LoadServletAtStartup</servlet-class>
 <load-on-startup>7</load-on-startup>
 </servlet>

 This servlet has a load-at-startup priority of 7, meaning any servlet
 with a load priority lower than 7 will be loaded before this one, and those
 greater than 7 after.  if a load-at-startup priority is not specified,
 for example <load-on-startup/>, the servlet engine chooses when
 */
public class LoadServletAtStartup extends HttpServlet {

  public void init() {
    System.out.println( getServletName() + ": initialised" );
  }

}


Login page in jsp

--------------
<%@ page language ="java" import="java.sql.*" %>
<html>
<body bgcolor="pink">
<form name="f1" method="post">
<table>
<tr>
<td>User Name</td><td><input type="text" name="t1" ></td>
</tr>
<td>Password</td>
<td><input type=""password"" name="t2"></td>
</tr>
<tr>
<td></td>
<td><input type="submit" name="b1" value="LogIn"></td>
</tr>
</table>
<%
String user=request.getParameter("t1");
String pass=request.getParameter("t2");

     try{
    
     Class.forName("sun.jdbc.odbc.JdbcOdbcDriver");
     Connection con=DriverManager.getConnection("jdbc:odbc:mydsn", "jp", "jp");
     Statement st=con.createStatement();
     ResultSet rs=st.executeQuery("select username,password from userlog");
     while(rs.next())
         {
         String username=rs.getString(1);
         String password=rs.getString(2);
         if(user.equals(username) && pass.equals(password))
             {
             %>
             <jsp:forward page="/Training_solutions/LoginSuccess.jsp" />
         <%}
         else
         out.println("Login Failed,Please try Againe");
         %>
        
         <%
     }
}catch(Exception e1)
{}

%>

</form>
</body>
</html>
================
LoginSuccess.jsp
-----
<hi>U sucessfuly Entered</h1>


Open a file using a servlet
  
 

package com.ack.web.servlet;

import java.io.FileReader;
import java.io.IOException;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

public class OpenAFileUsingAServlet extends HttpServlet {
  public void doGet( HttpServletRequest req, HttpServletResponse res )
      throws ServletException, IOException {
    String webAppPath = getServletContext().getRealPath( "" );
    String webXMLFile = getServletContext().getRealPath( "/WEB-INF/web.xml" );
    FileReader fr = new FileReader( webXMLFile );
    for( int c = fr.read(); c != -1; c = fr.read() ) {
      System.out.print( (char) c );
    }

    res.getWriter().println( "check the console!" );
  }
}


Open a file using a servlet
  
 

package com.ack.web.servlet;

import java.io.FileReader;
import java.io.IOException;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

public class OpenAFileUsingAServlet extends HttpServlet {
  public void doGet( HttpServletRequest req, HttpServletResponse res )
      throws ServletException, IOException {
    String webAppPath = getServletContext().getRealPath( "" );
    String webXMLFile = getServletContext().getRealPath( "/WEB-INF/web.xml" );
    FileReader fr = new FileReader( webXMLFile );
    for( int c = fr.read(); c != -1; c = fr.read() ) {
      System.out.print( (char) c );
    }

    res.getWriter().println( "check the console!" );
  }
}


Publishing AJMS message from a servlet
  
 

package com.ack.web.servlet;

import java.io.IOException;
import java.io.PrintWriter;
import javax.jms.*;
import javax.naming.Context;
import javax.naming.InitialContext;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

/**
 * web.xml servlet configuration file
 *
 <web-app>
 ...
 <resource-ref>
 <description>outgoing jms publish</description>
 <res-ref-name>jms/topic/connection</res-ref-name>
 <res-type>javax.jms.TopicConnectionFactory</res-type>
 <res-auth>CONTAINER</res-auth>
 </resource-ref>
 ...
 </web-app>
 *
 * the vendor-specific web.xml file that maps the res-ref-name
 * onto the one found in the jndi name space
 *
 <weblogic-web-app>
 ...
 <reference-descriptor>
 <resource-description>
 <res-ref-name>jms/topic/connection</res-ref-name>
 <jndi-name>jms/akira/connectionfactory</jndi-name>
 </resource-description>
 ...
 </reference-descriptor>
 ...
 </weblogic-web-app>
 */

public class PublishingAJMSMessageFromAServlet extends HttpServlet {

  public void doGet( HttpServletRequest req, HttpServletResponse res )
      throws ServletException, IOException {
    res.setContentType( "text/html" );
    PrintWriter pw = res.getWriter();

    TopicConnection topicCon = null;
    try {
      // get the topic connection factory
      Context ctx = new InitialContext();
      TopicConnectionFactory tcf
          = (TopicConnectionFactory) ctx.lookup( "java:comp/env/jms/topic/connection" );

      topicCon = tcf.createTopicConnection();

      // create topic session off the connection
      TopicSession topicSession = topicCon.
          createTopicSession( false, Session.AUTO_ACKNOWLEDGE );

      // get handle on topic, create a publisher and publish the message
      Topic topic = (Topic) ctx.lookup( "jms/topic/devilman" );
      TopicPublisher publisher = topicSession.createPublisher( topic );
      Message msg = topicSession.createTextMessage( "hello..." );
      publisher.publish( msg );

      pw.println( "published the message" );
    }
    catch( Exception ex ) {
      log( "couldn't publish the message", ex );
      res.sendError( res.SC_INTERNAL_SERVER_ERROR, ex.getMessage() );
    }

    finally {
      // close the topic connection
      if( topicCon != null ) {
        try {
          topicCon.close();
        }
        catch( JMSException jme ) {
          log( "problem closing topic con" );
        }
      }
    }
  }
}


Reading from an abstract resource
  
 

package com.ack.web.servlet;

import java.io.IOException;
import java.io.InputStream;
import java.net.URL;
import java.net.URLConnection;
import javax.servlet.ServletException;
import javax.servlet.ServletOutputStream;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

/**
 *
 * This class demonstrates how to view static resources
 * within a web application.  It is a URL based scheme
 * for reading resources within the web application.  This
 * makes it a more portable solution than the usual
 * getPathTranslated() technique that deals exclusively
 * with files.
 *
 * This class caters for web applications deployed as WAR
 * files and those that are distributed across machines.
 *
 * Note that this is not a production level implementation
 * and really opens up your web application to anyone.  It
 * is only meant as a demonstration of how to use
 * getServletContext().getResource() for reading resources
 * within a web application.
 *
 * Use As Follows:
 * http://<server>:<port>/<web-app>/servlet/<servlet path>/file_to_view
 *
 * For example to view my index.jsp page in my web apps root directory
 *
 * http://localhost:8080/ack/vf/index.jsp
 *
 * where /vf/* is mapped to the com.ack.web.servlet.ReadingFromAnAbstractResource
 */
public class ReadingFromAnAbstractResource extends HttpServlet {

  public void doGet( HttpServletRequest req, HttpServletResponse res )
      throws ServletException, IOException {
    ServletOutputStream os = res.getOutputStream();
    res.setContentType( "text/plain" );


    // get the resource
    String resourcePath = req.getPathInfo();
    if( resourcePath == null ) {
      res.sendError( HttpServletResponse.SC_NOT_FOUND );
      return;
    }

    System.out.println( "about to read resource -> " + resourcePath );

    // get resource as a url
    URL resourceUrl = getServletContext().getResource( resourcePath );
    if( resourceUrl == null ) {
      res.sendError( HttpServletResponse.SC_NOT_FOUND );
      return;
    }

    // open connection to resource
    URLConnection con = null;
    try {
      con = resourceUrl.openConnection();
      con.connect();
    }
    catch( IOException ioe ) {
      res.sendError( HttpServletResponse.SC_INTERNAL_SERVER_ERROR,
                     "unable to read resource: " + resourcePath );
    }

    // set the actual content type in; must check that its non-null
    String contentType = con.getContentType();
    if( contentType != null ) {
      res.setContentType( contentType );
    }

    // send resource contents back down output stream
    try {
      InputStream is = con.getInputStream();
      byte[] buf = new byte[8096];
      int bytesRead;
      while( ( bytesRead = is.read( buf ) ) != -1 ) {
        os.write( buf, 0, bytesRead );
      }
    }
    catch( IOException ioe ) {
      res.sendError( HttpServletResponse.SC_INTERNAL_SERVER_ERROR,
                     "unable to send resource to client: " + resourcePath );
    }
  }
}


Receive servlet forward
  
 

package com.ack.web.servlet;

import java.io.IOException;
import java.io.PrintWriter;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;


/**
 *
 * The receiving servlet of a forward, can have a different
 * uri path, servlet path, path info and query string to the
 * servlet that did the forward in the first place.
 */
public class ReceiveServletForward extends HttpServlet {

  public void doGet( HttpServletRequest req, HttpServletResponse res )
      throws ServletException, IOException {
    res.setContentType( "text/html" );
    PrintWriter pw = res.getWriter();

    pw.println( "<br>request attr: " + req.getAttribute( "hello" ) );
    pw.println( "<br>request uri: " + req.getRequestURI() );
    pw.println( "<br>servlet path: " + req.getServletPath() );
    pw.println( "<br>path info: " + req.getPathInfo() );
    pw.println( "<br>query string: " + req.getQueryString() );

  }
}


Request authorization headers
  
 

package com.ack.web.servlet;

import java.io.InputStream;
import java.net.HttpURLConnection;
import java.net.URL;

import sun.misc.BASE64Encoder;

/**
 * This example demonstrates how to get access a web resource
 * protected using BASIC HTTP Authentication. The URL connection
 * needs to set the username and password into the Authorization
 * request header of the URL.  The username and password needs
 * to be encoded using BASE64.
 */
public class RequestAuthorizationHeaders {
  public static void main( String[] args ) throws Exception {

    // theencoder is a web resource protected using BASIC HTTP Authentication
    final String urlString = "http://localhost:8080/encodings/theencoder";
    final String userName = "admin";
    final String password = "admin";

    // open url connection
    URL url = new URL( urlString );
    HttpURLConnection con = (HttpURLConnection) url.openConnection();

    // set up url connection to get retrieve information back
    con.setRequestMethod( "GET" );
    con.setDoInput( true );

    // stuff the Authorization request header
    byte[] encodedPassword = ( userName + ":" + password ).getBytes();
    BASE64Encoder encoder = new BASE64Encoder();
    con.setRequestProperty( "Authorization",
                            "Basic " + encoder.encode( encodedPassword ) );

    // pull the information back from the URL
    InputStream is = con.getInputStream();
    StringBuffer buf = new StringBuffer();
    int c;
    while( ( c = is.read() ) != -1 ) {
      buf.append( (char) c );
    }
    con.disconnect();

    // output the information
    System.out.println( buf );
  }
}


Request timer filter
  
 

package com.ack.web.servlet;

import java.io.IOException;
import javax.servlet.Filter;
import javax.servlet.FilterChain;
import javax.servlet.FilterConfig;
import javax.servlet.ServletException;
import javax.servlet.ServletRequest;
import javax.servlet.ServletResponse;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;

/*
   to configure this filter display every request uri and the time taken
   to complete it.  Compile this class into the WEB-INF/classes directory
   and configure you WEB-INF/web.xml file to include the following filter.

   Note how you can map the filter onto any url-pattern of your choosing.

   <web-app>
    <filter>
      <filter-name>requesttimerfilter</filter-name>
      <filter-class>com.ack.web.servlet.RequestTimerFilter</filter-class>
    </filter>
    <filter-mapping>
      <filter-name>requesttimerfilter</filter-name>
      <url-pattern>/*</url-pattern>
    </filter-mapping>
   </web-app>
 */

public class RequestTimerFilter extends HttpServlet implements Filter {
  private FilterConfig filterConfig;

  public void init( FilterConfig filterConfig ) {
    this.filterConfig = filterConfig;
  }

  public void doFilter( ServletRequest request,
                        ServletResponse response,
                        FilterChain filterChain ) {
    try {
      long startTime = System.currentTimeMillis();
      filterChain.doFilter( request, response );
      long endTime = System.currentTimeMillis();
      String requestURI = ( (HttpServletRequest) request ).getRequestURI();
      System.out.println( requestURI + " took -> " + ( endTime - startTime ) + " ms " );
    }
    catch( ServletException sx ) {
      log( sx.getMessage() );
    }
    catch( IOException iox ) {
      log( iox.getMessage() );
    }
  }
}


Saaj receiving attachments servlet
  
 

package com.ack.webservices.saaj;

import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.xml.soap.MessageFactory;
import javax.xml.soap.MimeHeaders;
import javax.xml.soap.SOAPEnvelope;
import javax.xml.soap.SOAPException;
import javax.xml.soap.SOAPMessage;

public class SaajReceivingAttachmentsServlet extends HttpServlet {
  private MessageFactory messageFactory;

  public void init() throws ServletException {
    try {
      // Initialize it to the default.
      messageFactory = MessageFactory.newInstance();
    }
    catch( SOAPException ex ) {
      throw new ServletException( "Unable to create message factory"
                                  + ex.getMessage() );
    }
  }

  public void doPost( HttpServletRequest req, HttpServletResponse resp )
      throws ServletException, IOException {

    try {
      // Get all the headers from the HTTP request.
      MimeHeaders headers = SaajUtils.getHeaders( req );

      // Get the body of the HTTP request.
      InputStream is = req.getInputStream();

      // Now internalize the contents of a HTTP request and
      // create a SOAPMessage
      SOAPMessage msg = messageFactory.createMessage( headers, is );
      SOAPMessage reply = null;

      // There are no replies in case of an OnewayListener.
      reply = onMessage( msg );

      if( reply != null ) {

        // Need to saveChanges 'cos we're going to use the
        // MimeHeaders to set HTTP response information. These
        // MimeHeaders are generated as part of the save.

        if( reply.saveRequired() ) {
          reply.saveChanges();
        }

        resp.setStatus( HttpServletResponse.SC_OK );

        SaajUtils.putHeaders( reply.getMimeHeaders(), resp );

        // Write out the message on the response stream.
        OutputStream os = resp.getOutputStream();
        reply.writeTo( os );

        os.flush();

      }
      else {
        resp.setStatus( HttpServletResponse.SC_NO_CONTENT );
      }
    }
    catch( Exception ex ) {
      throw new ServletException( "Saaj POST failed " + ex.getMessage() );
    }
  }

  // This is the application code for handling the message.. Once the
  // message is received the application can retrieve the soap part, the
  // attachment part if there are any, or any other information from the
  // message.

  public SOAPMessage onMessage( SOAPMessage message ) {
    System.out.println( "On message called in receiving servlet" );
    try {
      System.out.println( "Here's the message: " );
      message.writeTo( System.out );
      System.out.println( SaajUtils.getAttachmentReport( message ) );

      SOAPMessage msg = messageFactory.createMessage();
      SOAPEnvelope env = msg.getSOAPPart().getEnvelope();
      env.getBody()
          .addChildElement( env.createName( "Response" ) )
          .addTextNode( "This is a response" );
      return msg;

    }
    catch( Exception e ) {
      e.printStackTrace();
      return null;
    }
  }


  public void doGet( HttpServletRequest req, HttpServletResponse resp )
      throws ServletException, IOException {
    System.out.println( "### got the servlet..." );
    resp.getWriter().println( "hello you!" );
  }
}


Sending AJMS message from a servlet
  
 

package com.ack.web.servlet;

import java.io.IOException;
import java.io.PrintWriter;
import javax.jms.*;
import javax.naming.Context;
import javax.naming.InitialContext;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

/**
 * web.xml servlet configuration file
 *
 <web-app>
 ...
 <resource-ref>
 <description>outgoing jms send</description>
 <res-ref-name>jms/queue/connection</res-ref-name>
 <res-type>javax.jms.QueueConnectionFactory</res-type>
 <res-auth>CONTAINER</res-auth>
 </resource-ref>
 ...
 </web-app>
 *
 * the vendor-specific web.xml file that maps the res-ref-name
 * onto the one found in the jndi name space
 *
 <weblogic-web-app>
 ...
 <reference-descriptor>
 <resource-description>
 <res-ref-name>jms/queue/connection</res-ref-name>
 <jndi-name>jms/akira/connectionfactory</jndi-name>
 </resource-description>
 ...
 </reference-descriptor>
 ...
 </weblogic-web-app>
 */
public class SendingAJMSMessageFromAServlet extends HttpServlet {

  public void doGet( HttpServletRequest req, HttpServletResponse res )
      throws ServletException, IOException {
    res.setContentType( "text/html" );
    PrintWriter pw = res.getWriter();

    QueueConnection queueCon = null;
    try {
      // get the queue connection factory
      Context ctx = new InitialContext();
      QueueConnectionFactory qcf
          = (QueueConnectionFactory) ctx.lookup( "java:comp/env/jms/queue/connection" );

      queueCon = qcf.createQueueConnection();

      // create queue session off the connection
      QueueSession queueSession = queueCon.
          createQueueSession( false, Session.AUTO_ACKNOWLEDGE );

      // get handle on queue, create a sender and send the message
      Queue queue = (Queue) ctx.lookup( "jms/queue/devilman" );
      QueueSender sender = queueSession.createSender( queue );
      Message msg = queueSession.createTextMessage( "hello..." );
      sender.send( msg );

      pw.println( "sent the message" );
    }
    catch( Exception ex ) {
      log( "couldn't send the message", ex );
      res.sendError( res.SC_INTERNAL_SERVER_ERROR, ex.getMessage() );
    }

    finally {
      // close the queue connection
      if( queueCon != null ) {
        try {
          queueCon.close();
        }
        catch( JMSException jme ) {
          log( "problem closing queue con" );
        }
      }
    }
  }
}



Sending AJMS message from a servlet
  
 

package com.ack.web.servlet;

import java.io.IOException;
import java.io.PrintWriter;
import javax.jms.*;
import javax.naming.Context;
import javax.naming.InitialContext;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

/**
 * web.xml servlet configuration file
 *
 <web-app>
 ...
 <resource-ref>
 <description>outgoing jms send</description>
 <res-ref-name>jms/queue/connection</res-ref-name>
 <res-type>javax.jms.QueueConnectionFactory</res-type>
 <res-auth>CONTAINER</res-auth>
 </resource-ref>
 ...
 </web-app>
 *
 * the vendor-specific web.xml file that maps the res-ref-name
 * onto the one found in the jndi name space
 *
 <weblogic-web-app>
 ...
 <reference-descriptor>
 <resource-description>
 <res-ref-name>jms/queue/connection</res-ref-name>
 <jndi-name>jms/akira/connectionfactory</jndi-name>
 </resource-description>
 ...
 </reference-descriptor>
 ...
 </weblogic-web-app>
 */
public class SendingAJMSMessageFromAServlet extends HttpServlet {

  public void doGet( HttpServletRequest req, HttpServletResponse res )
      throws ServletException, IOException {
    res.setContentType( "text/html" );
    PrintWriter pw = res.getWriter();

    QueueConnection queueCon = null;
    try {
      // get the queue connection factory
      Context ctx = new InitialContext();
      QueueConnectionFactory qcf
          = (QueueConnectionFactory) ctx.lookup( "java:comp/env/jms/queue/connection" );

      queueCon = qcf.createQueueConnection();

      // create queue session off the connection
      QueueSession queueSession = queueCon.
          createQueueSession( false, Session.AUTO_ACKNOWLEDGE );

      // get handle on queue, create a sender and send the message
      Queue queue = (Queue) ctx.lookup( "jms/queue/devilman" );
      QueueSender sender = queueSession.createSender( queue );
      Message msg = queueSession.createTextMessage( "hello..." );
      sender.send( msg );

      pw.println( "sent the message" );
    }
    catch( Exception ex ) {
      log( "couldn't send the message", ex );
      res.sendError( res.SC_INTERNAL_SERVER_ERROR, ex.getMessage() );
    }

    finally {
      // close the queue connection
      if( queueCon != null ) {
        try {
          queueCon.close();
        }
        catch( JMSException jme ) {
          log( "problem closing queue con" );
        }
      }
    }
  }
}


Sending errors
  
 

package com.ack.web.servlet;

import java.io.IOException;
import java.io.PrintWriter;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

public class SendingErrors extends HttpServlet {

  public void doGet( HttpServletRequest req, HttpServletResponse res )
      throws ServletException, IOException {
    res.setContentType( "text/html" );
    PrintWriter pw = res.getWriter();

    // response buffer is cleared before error is sent
    pw.println( "this text will be cleared and not sent to the client" );

    // send error status back to client
    res.sendError( res.SC_INTERNAL_SERVER_ERROR,
                   "application error - we're stumped!" );

    // but this line is executed; use 'return' where appropriate
    pw.println( "however, this is line is executed and sent to client" );
  }

}


Sending redirects
  
 

package com.ack.web.servlet;

import java.io.IOException;
import java.io.PrintWriter;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

public class SendingRedirects extends HttpServlet {
  public void doGet( HttpServletRequest req, HttpServletResponse res )
      throws ServletException, IOException {
    res.setContentType( "text/html" );
    PrintWriter pw = res.getWriter();

    pw.println( "going to do a redirect" );

    // content before the redirect is ignored

    // redirect to the web site
    res.sendRedirect( "http://www.sun.com" );

    // do not output anything after a redirect
    // it will not cause an error, but the sendRedirect()
    // outputs content to the response body that provides
    // enables those client that do not get automatically
    // redirected with a link to get them there!
  }
}


Server information
  
 

package com.ack.web.servlet;

import java.io.IOException;
import java.io.PrintWriter;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

public class ServerInformation extends HttpServlet {

  public void doGet( HttpServletRequest req, HttpServletResponse res )
      throws ServletException, IOException {
    res.setContentType( "text/html" );
    PrintWriter pw = res.getWriter();

    pw.println( "<h3>Server Information</h3>" );
    pw.println( "<p><hr noshade><p>" );

    pw.println( "<br>Server Information: " + getServletContext().getServerInfo() );
    pw.println( "<br>Servlet API Version: " +
                getServletContext().getMajorVersion() + "." +
                getServletContext().getMinorVersion() );
    pw.println( "<br>Server Name: " + req.getServerName() );
    pw.println( "<br>Server Port: " + req.getServerPort() );
  }
}


Servlet context event notifications
  
 

package com.ack.web.servlet;

import javax.servlet.ServletContextAttributeEvent;
import javax.servlet.ServletContextAttributeListener;
import javax.servlet.ServletContextEvent;
import javax.servlet.ServletContextListener;

/**
 * Get application events for when the web application, that is
 * the servlet context, is initialised and destroyed.  Also, when
 * attributed are added, removed and replaced within the servlet
 * context.
 *
 <listener>
 <listener-class>com.ack.web.servlet.ServletContextEventNotifications</listener-class>
 </listener>
 */
public class ServletContextEventNotifications
    implements ServletContextListener, ServletContextAttributeListener {
  public void contextInitialized( ServletContextEvent evt ) {
    System.out.println( "initialised -> " + evt.getServletContext() );
  }

  public void contextDestroyed( ServletContextEvent evt ) {
    System.out.println( "destroyed -> " + evt.getServletContext() );
  }

  public void attributeAdded( ServletContextAttributeEvent evt ) {
    System.out.println( "attributed added: " + evt );
  }

  public void attributeRemoved( ServletContextAttributeEvent evt ) {
    System.out.println( "attributed removed: " + evt );
  }

  public void attributeReplaced( ServletContextAttributeEvent evt ) {
    System.out.println( "attributed replaced: " + evt );
  }
}


Servlet counter
  
 

package com.ack.web.servlet;

import java.io.IOException;
import java.io.PrintWriter;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

public class ServletCounter extends HttpServlet {
  private int instanceCount;
  private static int classCount;

  // process the HTTP get request
  public void doGet( HttpServletRequest request, HttpServletResponse response )
      throws ServletException, IOException {
    response.setContentType( "text/html" );
    PrintWriter out = new PrintWriter( response.getOutputStream() );
    out.println( "<html>" );
    out.println( "<head><title>ServletCounter</title></head>" );
    out.println( "<body>" );
    out.println( "<h3>Hit the browser refresh button!<br>" );
    out.println( "On 10, you'll get an exception, hit refresh again</h3>" );
    out.println( "<p><hr noshade><p>" );

    // when you get to 10, throw exception to cause the
    // this servlet instance to be destroyed and reloaded
    if( instanceCount > 0 && ( instanceCount / 10 ) > 0 ) {
      instanceCount = 0;
      throw new ServletException( "Hit Refresh Again" );
    }

    // synchronize on the servlet instance before updating the counter
    synchronized( this ) {
      // number of times this servlet instance has been accessed
      out.println( "<br>Servlet Instance Count -> " + instanceCount++ );
    }

    // sychronize on the servlet class before updating the class-based counter
    synchronized( ServletCounter.class ) {
      // collective total of all accesses to all servlet instances created
      // by this class
      out.println( "<br>Servlet Total Request Count -> " + classCount++ );
    }

    out.println( "</body></html>" );
    out.close();
  }
}


Servlet destroy callback
  
 

package com.ack.web.servlet;

import java.sql.Connection;
import java.sql.SQLException;
import javax.servlet.http.HttpServlet;

public class ServletDestroyCallback extends HttpServlet {
  private Connection connection;

  /**
   * implement the servlet
   */
  public void destroy() {
    /**
     * in this servlet destroy callback method
     * remember to clean up resource allocated and
     * managed by this servlet
     */
    try {
      // for example, if the servlet has a
      // dedicated SQL connection
      if( connection != null ) {
        // be sure to close it when the servlet is destroy
        connection.close();
      }
    }
    catch( SQLException sqle ) {
      // and report problems to the web server/servlet engine log files
      log( sqle.toString() );
    }
  }
}


Servlet error handler
  
 

package com.ack.web.servlet;

import java.io.IOException;
import java.io.PrintWriter;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

/**
 * Map the location of the servlet to handle at error
 * with the supplied status code
 *
 <web-app>
 ...
 <error-page>
 <error-code>404</error-code>
 <location>/servlet/com.ack.web.servlet.ServletErrorHandler</location>
 </error-page>
 </web-app>
 */
public class ServletErrorHandler extends HttpServlet {
  public void doGet( HttpServletRequest req, HttpServletResponse res )
      throws ServletException, IOException {
    res.setContentType( "text/html" );
    PrintWriter pw = res.getWriter();

    String statusCode = getRequestAttribute( req,
                                             "javax.servlet.error.status_code",
                                             "status code not supplied" );
    String errorMsg = getRequestAttribute( req,
                                           "javax.servlet.error.message",
                                           "error msg not supplied" );

    pw.println( "<h1>Error Code: " + statusCode + "</h1>" );
    pw.println( "<h2>Error Message: " + errorMsg + "</h1>" );
    pw.println( "<p>Problem accessing: " + req.getRequestURI() + "</p>" );
    pw.println( "<p><hr><p>" );
    pw.println( new java.util.Date( System.currentTimeMillis() ) );
  }

  private String getRequestAttribute( HttpServletRequest req,
                                      String name,
                                      String defaultValue ) {
    Object value = req.getAttribute( name );
    return ( value != null ) ? value.toString() : defaultValue;
  }
}


Servlet exception handler
  
 

package com.ack.web.servlet;

import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.PrintWriter;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

/**
 * Map the location of the servlet to handle at error
 * with the supplied status code
 *
 <web-app>
 ...
 <error-page>
 <exception-type>javax.servlet.ServletException</exception-type>
 <location>/servlet/com.ack.web.servlet.ServletExceptionHandler</location>
 </error-page>
 </web-app>
 */
public class ServletExceptionHandler extends HttpServlet {
  public void doGet( HttpServletRequest req, HttpServletResponse res )
      throws ServletException, IOException {
    res.setContentType( "text/html" );
    PrintWriter pw = res.getWriter();

    String exceptionType = getRequestAttribute( req,
                                                "javax.servlet.error.exception_type",
                                                "status code not supplied" );
    String errorMsg = getRequestAttribute( req,
                                           "javax.servlet.error.message",
                                           "error msg not supplied" );

    // exception attribute available as of servlet 2.3 API
    Object exception = req.getAttribute( "javax.servlet.error.exception" );

    pw.println( "<h1>Custom Exception Handler</h1>" );
    pw.println( "<h2>Exception type: " + exceptionType + "</h1>" );
    pw.println( "<h2>Exception Message: " + errorMsg + "</h1>" );
    pw.println( "<p>Problem accessing: " + req.getRequestURI() + "</p>" );

    // if we have the exception dump it out to the page
    if( exception != null ) {
      ByteArrayOutputStream bos = null;
      try {
        pw.println( "<p><hr noshade><p><pre>" );
        bos = new ByteArrayOutputStream();
        PrintWriter writer = new PrintWriter( bos, true );
        ( (Exception) exception ).printStackTrace( writer );
        pw.println( bos.toString() );
      }
      finally {
        pw.println( "</pre>" );
        if( bos != null ) bos.close();
      }
    }

    // output date and time of error
    pw.println( "<p><hr><p>" );
    pw.println( new java.util.Date( System.currentTimeMillis() ) );
  }

  private String getRequestAttribute( HttpServletRequest req,
                                      String name,
                                      String defaultValue ) {
    Object value = req.getAttribute( name );
    return ( value != null ) ? value.toString() : defaultValue;
  }
}


Servlet information
  
 

package com.ack.web.servlet;

import java.io.IOException;
import java.io.PrintWriter;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

public class ServletInformation extends HttpServlet {
  public void doGet( HttpServletRequest req, HttpServletResponse res )
      throws ServletException, IOException {
    res.setContentType( "text/html" );
    PrintWriter pw = res.getWriter();

    pw.println( "<h3>Servlet Information</h3>" );
    pw.println( "<p><hr noshade><p>" );

    pw.println( "<br>Servlet Path: " + req.getServletPath() );
    pw.println( "<br>Servlet Info: " + getServletInfo() );
  }

  // implement this method to inform others
  // what you're all about - very important and often overlooked
  public String getServletInfo() {
    return "I am a nice servlet, and this is my story...";
  }
}


Servlet information
  
 

package com.ack.web.servlet;

import java.io.IOException;
import java.io.PrintWriter;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

public class ServletInformation extends HttpServlet {
  public void doGet( HttpServletRequest req, HttpServletResponse res )
      throws ServletException, IOException {
    res.setContentType( "text/html" );
    PrintWriter pw = res.getWriter();

    pw.println( "<h3>Servlet Information</h3>" );
    pw.println( "<p><hr noshade><p>" );

    pw.println( "<br>Servlet Path: " + req.getServletPath() );
    pw.println( "<br>Servlet Info: " + getServletInfo() );
  }

  // implement this method to inform others
  // what you're all about - very important and often overlooked
  public String getServletInfo() {
    return "I am a nice servlet, and this is my story...";
  }
}


Servlet initialisation parameters
  
 

package com.ack.web.servlet;

import java.io.IOException;
import java.io.PrintWriter;
import java.util.Enumeration;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

/**
 * initialisation parameters inside the web.xml file
 <servlet>
 <servlet-name>initialisation</servlet-name>
 <servlet-class>com.ack.web.servlet.ServletInitialisationParameters</servlet-class>
 <init-param>
 <param-name>jdbcurl</param-name>
 <param-value>someurl</param-value>
 </init-param>
 <init-param>
 <param-name>password</param-name>
 <param-value>bah</param-value>
 </init-param>
 <init-param>
 <param-name>username</param-name>
 <param-value>foo</param-value>
 </init-param>
 </servlet>
 */
public class ServletInitialisationParameters extends HttpServlet {
  public void init() throws ServletException {
    String jdbcURL = getInitParameter( "jdbcurl" );
    String username = getInitParameter( "username" );
    String password = getInitParameter( "password" );

    try {
      if( jdbcURL == null || username == null || password == null ) {
        StringBuffer buf = new StringBuffer( "you must specify the " );
        buf.append( " 'jdbcurl', 'username', 'password' init params to -> " );
        buf.append( getClass().getName() + " within you web.xml file" );
        String msg = buf.toString();
        System.out.println( buf );
//        log( msg );
//        throw new ServletException( msg );
      }
      else {
        // possible get connection to database
      }
    }
    catch( Exception ex ) {
      log( ex.toString() );
      throw new ServletException( ex.toString() );
    }
    finally {
      // do any clean-up if you need to
    }

    log( "Completed Initialisation ->" + getClass().getName() );
  }

  public void doGet( HttpServletRequest req, HttpServletResponse res )
      throws ServletException, IOException {
    res.setContentType( "text/html" );
    PrintWriter pw = res.getWriter();

    pw.println( "<h3>Servlet Initialisation Parameters</h3>" );
    pw.println( "<p><hr noshade><p>" );
    Enumeration e = getInitParameterNames();
    while( e.hasMoreElements() ) {
      String paramName = (String) e.nextElement();
      pw.println( "Initialisation Parameter: [ " );
      pw.println( paramName + " = " + getInitParameter( paramName ) );
      pw.println( " ]<br>" );
    }
  }

}


Servlet session event notifications
  
 

package com.ack.web.servlet;

import javax.servlet.http.HttpSessionActivationListener;
import javax.servlet.http.HttpSessionAttributeListener;
import javax.servlet.http.HttpSessionBindingEvent;
import javax.servlet.http.HttpSessionEvent;

/**
 * Get application events for when a servlet session
 * is activated and destroyed.  Also, get events when
 * attributes are added, removed and replaced within
 * the servlet session.
 <web-app>
 <listener>
 <listener-class>com.ack.web.servlet.ServletSessionEventNotifications</listener-class>
 </listener>
 </web-app>
 */
public class ServletSessionEventNotifications
    implements HttpSessionAttributeListener, HttpSessionActivationListener {

  public void sessionDidActivate( HttpSessionEvent evt ) {
    System.out.println( "session activated: " + evt );
  }

  public void sessionWillPassivate( HttpSessionEvent evt ) {
    System.out.println( "session passivated: " + evt );
  }

  public void attributeAdded( HttpSessionBindingEvent evt ) {
    System.out.println( "attribute added to session: " + dump( evt ) );
  }

  public void attributeRemoved( HttpSessionBindingEvent evt ) {
    System.out.println( "attribute removed from session: " + dump( evt ) );
  }

  public void attributeReplaced( HttpSessionBindingEvent evt ) {
    System.out.println( "attribute replaced in session: " + dump( evt ) );
  }


  private String dump( HttpSessionBindingEvent evt ) {
    return "\n attribute name: " + evt.getName() + "\n session: " +
        evt.getSession() + "\n attribute value: " + evt.getValue();
  }
}


Servlet session event notifications
  
 

package com.ack.web.servlet;

import javax.servlet.http.HttpSessionActivationListener;
import javax.servlet.http.HttpSessionAttributeListener;
import javax.servlet.http.HttpSessionBindingEvent;
import javax.servlet.http.HttpSessionEvent;

/**
 * Get application events for when a servlet session
 * is activated and destroyed.  Also, get events when
 * attributes are added, removed and replaced within
 * the servlet session.
 <web-app>
 <listener>
 <listener-class>com.ack.web.servlet.ServletSessionEventNotifications</listener-class>
 </listener>
 </web-app>
 */
public class ServletSessionEventNotifications
    implements HttpSessionAttributeListener, HttpSessionActivationListener {

  public void sessionDidActivate( HttpSessionEvent evt ) {
    System.out.println( "session activated: " + evt );
  }

  public void sessionWillPassivate( HttpSessionEvent evt ) {
    System.out.println( "session passivated: " + evt );
  }

  public void attributeAdded( HttpSessionBindingEvent evt ) {
    System.out.println( "attribute added to session: " + dump( evt ) );
  }

  public void attributeRemoved( HttpSessionBindingEvent evt ) {
    System.out.println( "attribute removed from session: " + dump( evt ) );
  }

  public void attributeReplaced( HttpSessionBindingEvent evt ) {
    System.out.println( "attribute replaced in session: " + dump( evt ) );
  }


  private String dump( HttpSessionBindingEvent evt ) {
    return "\n attribute name: " + evt.getName() + "\n session: " +
        evt.getSession() + "\n attribute value: " + evt.getValue();
  }
}


Simple receiver
  
 

package com.ack.webservices.jaxm.servlet;

import javax.servlet.ServletException;
import javax.xml.messaging.JAXMServlet;
import javax.xml.messaging.ReqRespListener;
import javax.xml.soap.MessageFactory;
import javax.xml.soap.SOAPEnvelope;
import javax.xml.soap.SOAPMessage;


/**
 * An adapted example of the ReceiverServlet to highlight
 * the JAXM specific aspects of messaging and remove non-essential
 * API code such as servlets and log4j.
 *
 * big fanfare to the original authors:
 *
 */
public class SimpleReceiver extends JAXMServlet implements ReqRespListener {
  private MessageFactory fac;

  public void init() throws ServletException {
    try {
      fac = MessageFactory.newInstance();
    }
    catch( Exception ex ) {
      ex.printStackTrace();
      throw new ServletException( ex );
    }
  }

  // This is the application code for handling the message.. Once the
  // message is received the application can retrieve the soap part, the
  // attachment part if there are any, or any other information from the
  // message.

  public SOAPMessage onMessage( SOAPMessage message ) {
    System.out.println( "On message called in receiving servlet" );
    try {
      System.out.println( "\nMessage Received: " );
      System.out.println( "\n============ start ============\n" );

      // dump out the message
      message.writeTo( System.out );

      System.out.println( "\n============ end ============\n" );

      // create a message to send back
      SOAPMessage msg = fac.createMessage();
      SOAPEnvelope env = msg.getSOAPPart().getEnvelope();
      env.getBody()
          .addChildElement( env.createName( "MessageResponse" ) )
          .addTextNode( "Right back at you" );

      return msg;
    }
    catch( Exception e ) {
      e.printStackTrace();
      return null;
    }
  }
}


Updating the client cache
  
 

package com.ack.web.servlet;

import java.io.IOException;
import java.util.Date;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

public class UpdatingTheClientCache extends HttpServlet {
  private Date lastUpdate;

  public void init() {
    lastUpdate = new Date( System.currentTimeMillis() );
  }

  /**
   * This will see the server stuffing the Last-Modified header
   * into the response that is used by the client during
   * page reloads to check whether content on the server has
   * changed.
   *
   * Refer to how the If-Modified-Since and Last-Modified
   * headers used within the HTTP protocol
   *
   */
  public long getLastModified( HttpServletRequest req ) {
    // round time down to the last second
    return lastUpdate.getTime() / 1000 * 1000;
  }

  public void doGet( HttpServletRequest req, HttpServletResponse res )
      throws ServletException, IOException {
    boolean needToUpdate = false;

    // process some work

    if( needToUpdate ) {
      synchronized( this ) {
        lastUpdate = new Date( System.currentTimeMillis() );
      }
    }

    res.getWriter().println( "done some work" );
  }
}


Using path information
  
 

package com.ack.web.servlet;

import java.io.IOException;
import java.io.PrintWriter;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;


/**
 * For the web application, named 'ack' this servlet
 * outputted the following when run on our machines
 * with the URL:
 *
 * http://localhost:8080/ack/servlet/
 *          com.ack.web.servlet.UsingPathInformation/images/hey.gif
 *
 * URL Path: /images/hey.gif
 * Physical Path: E:\servlets\ack\images\hey.gif
 * Resource Path: E:\servlets\ack\index.jsp
 * Web Application Path: /ack
 *
 */
public class UsingPathInformation extends HttpServlet {

  public void doGet( HttpServletRequest req, HttpServletResponse res )
      throws ServletException, IOException {
    res.setContentType( "text/html" );
    PrintWriter pw = res.getWriter();

    // work with extra path information
    if( req.getPathInfo() != null ) {
      pw.println( "<br>URL Path: " + req.getPathInfo() );
      pw.println( "<br>Physical Path: " + req.getPathTranslated() );
    }
    else {
      pw.println( "<br>No extra path information" );
    }

    // get physical path of something without extra path information
    pw.println( "<br>Resource Path: " +
                getServletContext().getRealPath( "/index.jsp" ) );

    // get the URL path of the current web application
    pw.println( "<br>Web Application Path: " + req.getContextPath() );

  }
}


Working with images
  
 

package com.ack.web.servlet;

import java.io.IOException;
import java.io.InputStream;
import java.net.URL;
import java.net.URLConnection;
import javax.servlet.ServletException;
import javax.servlet.ServletOutputStream;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

public class WorkingWithImages extends HttpServlet {
  private int counter;

  public void doGet( HttpServletRequest req, HttpServletResponse res )
      throws ServletException, IOException {
    ServletOutputStream os = res.getOutputStream();
    res.setContentType( "image/bmp" );

    // where possible, tell the client how big the file is
    res.setContentLength( 3936256 );

    // get resource as a url
    URL resourceUrl = getServletContext().getResource( "/images/large.bmp" );
    if( resourceUrl == null ) {
      res.sendError( HttpServletResponse.SC_NOT_FOUND );
      return;
    }

    // open connection to resource
    URLConnection con = null;
    try {
      con = resourceUrl.openConnection();
      con.connect();
    }
    catch( IOException ioe ) {
      res.sendError( HttpServletResponse.SC_INTERNAL_SERVER_ERROR,
                     "unable to read resource: /images/large.bmp" );
    }

    // send resource contents back down output stream
    try {
      InputStream is = con.getInputStream();
      byte[] buf = new byte[8096];
      int bytesRead;
      while( ( bytesRead = is.read( buf ) ) != -1 ) {
        os.write( buf, 0, bytesRead );
      }
    }
    catch( IOException ioe ) {
      res.sendError( HttpServletResponse.SC_INTERNAL_SERVER_ERROR,
                     "unable to send resource to client: /image/large.bmp" );
    }
  }
}


Write to a temporary file
  
 

package com.ack.web.servlet;

import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

public class WriteToATemporaryFile extends HttpServlet {

  public void doGet( HttpServletRequest req, HttpServletResponse res )
      throws ServletException, IOException {
    // get the web applications temporary directory
    File tempDir = (File) getServletContext().
        getAttribute( "javax.servlet.context.tempdir" );

    // create a temporary file in that directory
    File tempFile = File.createTempFile( getServletName(), ".tmp", tempDir );

    // write to file
    FileWriter fw = new FileWriter( tempFile );
    try {
      fw.write( "done and dusted" );
    }
    finally {
      fw.close();
    }

    // tell servlet client where to look for file
    res.getWriter().println( "check file: " + tempFile.getAbsolutePath() );
  }

}


Accessing session items

package com.ack.web.servlet;

import java.io.IOException;
import java.io.PrintWriter;
import java.util.Enumeration;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

public class AccessingSessionItems extends HttpServlet {
  public void goGet( HttpServletRequest req, HttpServletResponse res )
      throws ServletException, IOException {
    res.setContentType( "text/html" );
    PrintWriter pw = res.getWriter();
    pw.println( "<HTML><BODY>" );

    HttpSession theSession = req.getSession();

    // get a named item out of the session
    Object obj = theSession.getAttribute( "power" );
    pw.println( "<BR>" + obj );

    // get all the items out of the session
    Enumeration attributeNames = theSession.getAttributeNames();
    while( attributeNames.hasMoreElements() ) {
      String attributeName = (String) attributeNames.nextElement();
      obj = theSession.getAttribute( attributeName );
      pw.println( "<BR>" + attributeName + " = " + obj );
    }

    pw.println( "</BODY></HTML>" );
  }
}


Equalizer bean

package com.ack.j2ee.ejb.session;

import java.rmi.RemoteException;
import javax.ejb.CreateException;
import javax.ejb.EJBException;
import javax.ejb.RemoveException;
import javax.ejb.SessionBean;
import javax.ejb.SessionContext;
import javax.naming.InitialContext;
import javax.naming.NamingException;
import javax.rmi.PortableRemoteObject;

/**
 *
 <session>
 <display-name>Equalizer</display-name>
 ...
 <ejb-ref>
 <description>one the top CIA informers</description>
 <ejb-ref-name>cia/grass</ejb-ref-name>
 <ejb-ref-type>Session</ejb-ref-type>
 <home>com.ack.j2ee.ejb.session.EqualizerHome</home>
 <remote>com.ack.j2ee.ejb.session.Equalizer</remote>
 <ejb-link>Equalizer</ejb-link>
 </ejb-ref>
 </session>
 */

public class EqualizerBean implements SessionBean {
  private SessionContext sessionContext;

  public String getTimeOfHit() throws RemoteException {
    Informer informer = null;
    try {
      InitialContext ctx = new InitialContext();

      // note that by making the Informer session bean an ejb link,
      // it can be accessed from within its naming environment,
      // that is 'java:comp/env' by using the name specified
      // within its deployment descriptor, that is 'cia/grass'
      Object ejbObject = ctx.lookup( "java:comp/env/cia/grass" );

      // then its business as usual once we have the ejbObject
      InformerHome home = (InformerHome) PortableRemoteObject.
          narrow( ejbObject, InformerHome.class );
      informer = home.create();
      return "Assassination Time: " + informer.getTheTime();
    }
    catch( NamingException nex ) {
      throw new EJBException( "cannot find informer", nex );
    }
    catch( CreateException cex ) {
      throw new EJBException( "problem getting informed", cex );
    }
    finally {
      if( informer != null ) {
        try {
          informer.remove();
        }
        catch( RemoveException rex ) {
          throw new EJBException( "problem getting rid of informer", rex );
        }
      }
    }
  }

  public void ejbCreate() throws CreateException {
  }

  public void ejbRemove() {
  }

  public void ejbActivate() {
  }

  public void ejbPassivate() {
  }

  public void setSessionContext( SessionContext sessionContext ) {
    this.sessionContext = sessionContext;
  }

}


Equalizer home

package com.ack.j2ee.ejb.session;

import java.rmi.RemoteException;
import javax.ejb.CreateException;

import com.ack.j2ee.ejb.session.Equalizer;

public interface EqualizerHome extends javax.ejb.EJBHome {
  public Equalizer create() throws CreateException, RemoteException;
}


Equalizer

package com.ack.j2ee.ejb.session;

import java.rmi.RemoteException;

public interface Equalizer extends javax.ejb.EJBObject {
  public String getTimeOfHit() throws RemoteException;
}


Informer bean

package com.ack.j2ee.ejb.session;

import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import javax.ejb.CreateException;
import javax.ejb.SessionBean;
import javax.ejb.SessionContext;
import javax.naming.InitialContext;
import javax.naming.NamingException;

/**
 *  Define environment variables within the a components
 *  deployment descriptor (e.g. ejb-jar.xml )
 *
 <session>
 ...
 <env-entry>
 <description>
 determines whether date time output
 should be the long or short form
 </description>
 <env-entry-name>useLongDateFormat</env-entry-name>
 <env-entry-type>java.lang.Boolean</env-entry-type>
 <env-entry-value>true</env-entry-value>
 </env-entry>
 </session>
 */
public class InformerBean implements SessionBean {
  private SessionContext sessionContext;
  private Calendar cal;
  private DateFormat formatter;

  public void ejbCreate() throws CreateException {
    cal = Calendar.getInstance();
    try {
      setup();
    }
    catch( Exception ex ) {
      throw new CreateException( ex.getMessage() );
    }
  }

  public void ejbRemove() {
  }

  public void ejbActivate() {
  }

  public void ejbPassivate() {
  }

  public void setSessionContext( SessionContext sessionContext ) {
    this.sessionContext = sessionContext;
  }

  public String getTheTime() {
    return formatter.format( cal.getTime() );
  }

  // demonstrates how to read an environment variable declared within
  // the deployment descriptor of this component
  private void setup() throws NamingException {
    InitialContext ctx = new InitialContext();
    Boolean b = (Boolean) ctx.lookup( "java:comp/env/useLongDateFormat" );
    int style = ( b.booleanValue() ) ? DateFormat.LONG : DateFormat.SHORT;
    formatter = SimpleDateFormat.getDateTimeInstance( style, style );
  }
}


Informer home

package com.ack.j2ee.ejb.session;

import java.rmi.RemoteException;
import javax.ejb.CreateException;

import com.ack.j2ee.ejb.session.Informer;

public interface InformerHome extends javax.ejb.EJBHome {
  public Informer create() throws CreateException, RemoteException;
}


Lawyer bean
  
 

package com.ack.j2ee.ejb.session;

import javax.ejb.CreateException;
import javax.ejb.EJBException;
import javax.ejb.RemoveException;
import javax.ejb.SessionBean;
import javax.ejb.SessionContext;
import javax.ejb.SessionSynchronization;
import javax.naming.InitialContext;
import javax.naming.NamingException;
import javax.rmi.PortableRemoteObject;


public class LawyerBean implements SessionBean, SessionSynchronization {
  private SessionContext sessionContext;

  // called after transaction begin happens on a business method
  public void afterBegin() {
    System.out.println( "### just begun transaction" );
  }

  // called just before a transaction completes on a business method
  public void beforeCompletion() {
    System.out.println( "### about to complete transaction" );
  }

  // called after the transaction and reports whether it
  // was committed or not
  public void afterCompletion( boolean committed ) {
    System.out.println( "### after transaction: committed -> " + committed );
  }

  public void sendHimDown( String criminal ) {
    ReporterLocal reporter = null;
    try {
      InitialContext ctx = new InitialContext();

      // note that by making the Informer session bean an ejb link,
      // it can be accessed from within its naming environment,
      // that is 'java:comp/env' by using the name specified
      // within its deployment descriptor, that is 'cia/grass'
      Object ejbObject = ctx.lookup( "java:comp/env/journalist" );

      // then its business as usual once we have the ejbObject
      ReporterLocalHome home = (ReporterLocalHome) PortableRemoteObject.
          narrow( ejbObject, ReporterLocalHome.class );
      reporter = home.create();
      reporter.makeStory( criminal, true );
    }
    catch( NamingException nex ) {
      throw new EJBException( "cannot find informer", nex );
    }
    catch( CreateException cex ) {
      throw new EJBException( "problem getting informed", cex );
    }
    finally {
      if( reporter != null ) {
        try {
          reporter.remove();
        }
        catch( RemoveException rex ) {
          throw new EJBException( "problem getting rid of informer", rex );
        }
      }
    }

  }

  public void ejbCreate() throws CreateException {
  }

  public void ejbRemove() {
  }

  public void ejbActivate() {
  }

  public void ejbPassivate() {
  }

  public void setSessionContext( SessionContext sessionContext ) {
    this.sessionContext = sessionContext;
  }
}


Reporter bean
  
 

package com.ack.j2ee.ejb.session;

import java.sql.Connection;
import java.sql.Statement;
import javax.ejb.CreateException;
import javax.ejb.SessionBean;
import javax.ejb.SessionContext;
import javax.naming.Context;
import javax.naming.InitialContext;
import javax.sql.DataSource;
import javax.transaction.UserTransaction;

public class ReporterBean implements SessionBean {

  private SessionContext sessionContext;

  public void makeStory( String criminal, boolean isGuilty ) {
    UserTransaction tx = null;
    Connection con = null;
    try {
      // create a user transaction
      tx = sessionContext.getUserTransaction();
      tx.begin();

      // get hold of a database connection
      Context ctx = new InitialContext();
      DataSource ds = (DataSource) ctx.lookup( "jdbc/gangland" );
      con = ds.getConnection();
      con.setAutoCommit( false );

      // perform the insert
      Statement stmt = con.createStatement();
      stmt.executeUpdate( "insert into enemies values ( '" + criminal + "')" );
      tx.commit();
    }
    catch( Exception ex ) {
      if( tx != null ) {
        try {
          tx.rollback();
        }
        catch( Exception nex ) {
          ex.printStackTrace();
        }
      }
    }
    finally {
      if( con != null ) {
        try {
          con.close();
        }
        catch( Exception ex ) {
          ex.printStackTrace();
        }
      }
    }
  }

  public void ejbCreate() throws CreateException {
  }

  public void ejbRemove() {
  }

  public void ejbActivate() {
  }

  public void ejbPassivate() {
  }

  public void setSessionContext( SessionContext sessionContext ) {
    this.sessionContext = sessionContext;
  }

}


Session item notification
  
 

package com.ack.web.servlet;

import java.io.IOException;
import java.io.Serializable;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;
import javax.servlet.http.HttpSessionBindingEvent;
import javax.servlet.http.HttpSessionBindingListener;

public class SessionItemNotification extends HttpServlet {
  public void doGet( HttpServletRequest req, HttpServletResponse res )
      throws ServletException, IOException {
    HttpSession session = req.getSession();

    session.setAttribute( "cone", new KnowAllItem( "snake eyes" ) );
    session.removeAttribute( "cone" );

    res.getWriter().println( "check your console..." );
  }
}

/**
 * By implementing HttpSessionBindingListener, KnowAllItem objects get
 * informed when they are added and/or removed from a servlet session
 *
 * Also, remember to make you session items serializable
 */
class KnowAllItem implements HttpSessionBindingListener, Serializable {
  private String id;

  public KnowAllItem( String theId ) {
    id = theId;
  }

  public void valueBound( HttpSessionBindingEvent evt ) {
    System.out.println( "added KnowAllItem to session -> " + dump( evt ) );
  }

  public void valueUnbound( HttpSessionBindingEvent evt ) {
    System.out.println( "removed KnowAllItem from session -> " + dump( evt ) );
  }

  private String dump( HttpSessionBindingEvent evt ) {
    return "\n attribute name: " + evt.getName() + "\n session: " +
        evt.getSession() + "\n attribute value: " + evt.getValue();
  }

  public String toString() {
    return id;
  }
}


Updating session items
  
 

package com.ack.web.servlet;

import java.io.IOException;
import java.io.PrintWriter;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

public class UpdatingSessionItems extends HttpServlet {
  public void doGet( HttpServletRequest req, HttpServletResponse res )
      throws ServletException, IOException {
    res.setContentType( "text/html" );
    PrintWriter pw = res.getWriter();
    pw.println( "<HTML><BODY>" );

    HttpSession theSession = req.getSession();

    // updated a named item in the session
    synchronized( theSession ) {
      /**
       * when updating items within a session object, you must
       * ensure that you have exclusive access to session object
       * by first synchronizing on the session
       */
      Integer counter = (Integer) theSession.getAttribute( "counter" );

      if( counter == null ) {
        theSession.setAttribute( "counter", new Integer( 1 ) );
      }
      else {
        theSession.setAttribute( "counter", new Integer( counter.intValue() + 1 ) );
      }

      pw.println( "<BR>" + counter );
      /**
       * also note that items inside your session object should really
       * be serializable to ensure that your session can scale within
       * a clustered environment
       */
    }

    pw.println( "</BODY></HTML>" );
  }
}


Audio channel player

import java.io.File;
import java.io.InputStream;
import java.io.IOException;
import java.net.URL;
import java.util.ArrayList;
import java.util.List;

import javax.sound.sampled.AudioFormat;
import javax.sound.sampled.AudioInputStream;
import javax.sound.sampled.AudioSystem;
import javax.sound.sampled.LineUnavailableException;
import javax.sound.sampled.LineListener;
import javax.sound.sampled.LineEvent;
import javax.sound.sampled.Mixer;
import javax.sound.sampled.SourceDataLine;
import javax.sound.sampled.DataLine;
import javax.sound.sampled.FloatControl;
import javax.sound.sampled.BooleanControl;


public class AudioChannelPlayer
{
private static final boolean DEBUG = true;
private static final int BUFFER_SIZE = 16384;



public static void main(String[] args)
{
 // TODO: set AudioFormat after the first soundfile
 AudioFormat audioFormat = new AudioFormat(
  AudioFormat.Encoding.PCM_SIGNED,
  44100.0F, 16, 2, 4, 44100.0F, true);
 SourceDataLine  line = null;

 try
 {
  DataLine.Info info = new DataLine.Info(SourceDataLine.class, audioFormat);
  line = (SourceDataLine) AudioSystem.getLine(info);
  line.open(audioFormat, line.getBufferSize());
 }
 catch (LineUnavailableException e)
 {
  e.printStackTrace();
 }
 line.start();
 AudioChannel channel = new AudioChannel(line);
 channel.start();
 for (int nArgPos = 0; nArgPos < args.length; nArgPos++)
 {
  if (args[nArgPos].startsWith("-s"))
  {
   String strDuration = args[nArgPos].substring(2);
   int nDuration = Integer.parseInt(strDuration);
   handleSilence(nDuration, channel);
  }
  else
  {
   handleFile(args[nArgPos], channel);
  }

 }
 // TODO: instead of waiting a fixed amount of time, wait until the queue of AudioChannel is empty.
 try
 {
  Thread.sleep(10000);
 }
 catch (InterruptedException e)
 {
 }
}


private static void handleFile(String strFilename, AudioChannel channel)
{
 File audioFile = new File(strFilename);
 AudioInputStream audioInputStream = null;
 try
 {
  audioInputStream = AudioSystem.getAudioInputStream(audioFile);
 }
 catch (Exception e)
 {
  /*
   * In case of an exception, we dump the exception
   * including the stack trace to the console output.
   * Then, we exit the program.
   */
  e.printStackTrace();
  System.exit(1);
 }
 if (audioInputStream != null)
 {
  boolean bSuccessfull = channel.addAudioInputStream(audioInputStream);
  if (! bSuccessfull)
  {
   out("Warning: could not enqueue AudioInputStream; presumably formats don't match!");
  }
 }
}


private static void handleSilence(int nDuration, AudioChannel channel)
{
}



private static void out(String strMessage)
{
 System.out.println(strMessage);
}
}


/*** AudioChannelPlayer.java ***/

Built by Text2Html 


Audio channel

import java.io.InputStream;
import java.io.IOException;
import java.net.URL;
import java.util.ArrayList;
import java.util.List;

import javax.sound.sampled.AudioFormat;
import javax.sound.sampled.AudioInputStream;
import javax.sound.sampled.AudioSystem;
import javax.sound.sampled.LineUnavailableException;
import javax.sound.sampled.LineListener;
import javax.sound.sampled.LineEvent;
import javax.sound.sampled.Mixer;
import javax.sound.sampled.SourceDataLine;
import javax.sound.sampled.DataLine;
import javax.sound.sampled.FloatControl;
import javax.sound.sampled.BooleanControl;


// IDEA: can this class be derived from AudioStream??
public class AudioChannel
extends  Thread
{
private static final boolean DEBUG = true;
private static final int BUFFER_SIZE = 16384;

private List   m_audioStreamQueue;
private SourceDataLine  m_line;
private byte[]   m_dataArray;



/*
 * Uses the passed Mixer.
 */
public AudioChannel(SourceDataLine line)
{
 super("AudioChannel");
 /*  Setting this thread to daemon means that this thread
  doesn't prevent the VM from exiting even if it is
  still running.
  */
 setDaemon(true);
 // TODO: check if priority makes sense
 setPriority(9);
 m_line = line;
 m_audioStreamQueue = new ArrayList();
 // TODO: make size configurable
 int nBufSizeInFrames = 0;
 if (m_line.getBufferSize() > 0)
 {
  nBufSizeInFrames = m_line.getBufferSize() / 2;
 }
 else
 {
  nBufSizeInFrames = 4096;
 }
 m_dataArray = new byte[nBufSizeInFrames];
}



public AudioFormat getFormat()
{
 return m_line.getFormat();
}


public boolean addAudioInputStream(AudioInputStream audioStream)
{
 if (DEBUG) { out("AudioChannel.addAudioInputStream(): called."); }
 if (!getFormat().matches(audioStream.getFormat()))
 {
  if (DEBUG) { out("AudioChannel.addAudioInputStream(): audio formats do not match, trying to convert."); }
  AudioInputStream asold = audioStream;
  audioStream = AudioSystem.getAudioInputStream(getFormat(), asold);
  if (audioStream == null)
  {
   out("###  AudioChannel.addAudioInputStream(): could not convert.");
   return false;
  }
  if (DEBUG) { out(" converted"); }
 }
 synchronized (m_audioStreamQueue)
 {
  m_audioStreamQueue.add(audioStream);
  m_audioStreamQueue.notifyAll();
 }
 if (DEBUG) { out("AudioChannel.addAudioInputStream(): enqueued " + audioStream); }
 return true;
}


// TODO: termination of loop
public void run()
{
 if (DEBUG)
 {
  out("AudioChannel.run(): starting");
 }
 while (true)
 {
  AudioInputStream audioStream = null;
  synchronized (m_audioStreamQueue)
  {
   while (m_audioStreamQueue.size() == 0)
   {
    try
    {
     m_audioStreamQueue.wait();
    }
    catch (InterruptedException e)
    {
     e.printStackTrace();
    }
   }
   audioStream = (AudioInputStream) m_audioStreamQueue.remove(0);
  }
  if (DEBUG)
  {
   out("AudioChannel.run(): playing " + audioStream);
  }
  int nBytesRead;
  while (true)
  {
   try
   {
    nBytesRead = audioStream.read(m_dataArray);
    if (nBytesRead == -1)
    {
     // m_line.write(null, 0, 0);
     break;
    }
    int nBytesWritten = m_line.write(m_dataArray, 0, nBytesRead);
    // Contract.check(nBytesWritten == nBytesRead);
   }
   catch (IOException e)
   {
    e.printStackTrace();
    break;
   }
  }
 }
}


public void closeChannel()
{
 // TODO:
}


public void startChannel()
{
 // TODO:
 m_line.start();
 super.start();
}



// should not block, but trigger the termination
public void stopChannel()
{
 // TODO: do some mystery to
 // a) stop the line (without interupting current plays)
 // b) stop the Thread
}



private static void out(String strMessage)
{
 System.out.println(strMessage);
}
}

/*** AudioChannel.java ***/

Built by Text2Html 


Cdda Player

import java.io.File;
import java.io.InputStream;
import java.io.IOException;
import java.io.OutputStream;

import java.net.URL;
import java.net.MalformedURLException;

import javax.sound.sampled.AudioFormat;
import javax.sound.sampled.AudioFileFormat;
import javax.sound.sampled.AudioInputStream;
import javax.sound.sampled.AudioSystem;
import javax.sound.sampled.SourceDataLine;
import javax.sound.sampled.DataLine;
import javax.sound.sampled.Line;
import javax.sound.sampled.LineUnavailableException;

import org.tritonus.sampled.cdda.CddaURLStreamHandlerFactory;


/** CddaPlayer



Reads data digitally from an audio CD and plays them via Java Sound.


Advanced


java CddaPlayer


java CddaPlayer
tracknumber



tracknumber
the number of the track on the audio CD that should be played (starting with 1).


If no argument is given, the table of content is displayed.


The CDROM drive is hardcoded to '/dev/cdrom'.

It is reported that there are problems with mixed mode CDs.


CddaPlayer.java

  
*/
public class CddaPlayer
{
static
{
 URL.setURLStreamHandlerFactory(new CddaURLStreamHandlerFactory());
}

/** Flag for debugging messages.
 * If true, some messages are dumped to the console
 * during operation. 
 */
private static boolean DEBUG = false;

private static int DEFAULT_EXTERNAL_BUFFER_SIZE = 128000;



public static void main(String[] args)
{
 int nExternalBufferSize = DEFAULT_EXTERNAL_BUFFER_SIZE;
 int nInternalBufferSize = AudioSystem.NOT_SPECIFIED;

 /** CDROM drive number.
  Defaults to first drive. [how is the order constituted?]
  Not used for now. Hardcoded default to /dev/cdrom.
 */
 int  nDrive = 0;

 boolean  bTocOnly = true;
 int  nTrack = 0;

 if (args.length < 1)
 {
  bTocOnly = true;
 }
 else if (args.length == 1)
 {
  nTrack = Integer.parseInt(args[0]);
  bTocOnly = false;
 }

 // TODO: should not be hardcoded
 String strDrive = "/dev/cdrom";

 if (bTocOnly)
 {
  URL tocURL = null;
  try
  {
   tocURL = new URL("cdda:" + strDrive);
  }
  catch (MalformedURLException e)
  {
   e.printStackTrace();
  }
  InputStream tocInputStream = null;
  try
  {
   tocInputStream = tocURL.openStream();
  }
  catch (IOException e)
  {
   e.printStackTrace();
  }
  output(tocInputStream);
 }

  if (! bTocOnly)
 {
  URL trackURL = null;
  try
  {
   trackURL = new URL("cdda://" + strDrive + "#" + nTrack);
  }
  catch (MalformedURLException e)
  {
   e.printStackTrace();
  }
  InputStream trackInputStream = null;
  try
  {
   trackInputStream = trackURL.openStream();
  }
  catch (IOException e)
  {
   e.printStackTrace();
  }

  AudioInputStream audioInputStream = (AudioInputStream) trackInputStream;

   SourceDataLine line = null;
   AudioFormat audioFormat = audioInputStream.getFormat();
   Line.Info info = new DataLine.Info(SourceDataLine.class, audioFormat);

   try
   {
    line = (SourceDataLine) AudioSystem.getLine(info);
    line.open();
    line.start();
   }
   catch (LineUnavailableException e)
   {
    e.printStackTrace();
   }

  int nBytesRead = 0;
  byte[] abData = new byte[nExternalBufferSize];
  while (nBytesRead != -1)
  {
   try
   {
    nBytesRead = audioInputStream.read(abData, 0, abData.length);
   }
   catch (IOException e)
   {
    e.printStackTrace();
   }
   if (DEBUG)
   {
    out("AudioPlayer.main(): read from AudioInputStream (bytes): " + nBytesRead);
   }
   if (nBytesRead >= 0)
   {
    int nBytesWritten = line.write(abData, 0, nBytesRead);
    if (DEBUG)
    {
     out("AudioPlayer.main(): written to SourceDataLine (bytes): " + nBytesWritten);
    }
   }
  }
 }
}


private static void output(InputStream inputStream)
{
 byte[] buffer = new byte[4096];
 OutputStream outputStream = System.out;

 try
 {
  int nBytesRead = 0;
  nBytesRead = inputStream.read(buffer);
  while (nBytesRead >= 0)
  {
   outputStream.write(buffer, 0, nBytesRead);
   nBytesRead = inputStream.read(buffer);
  }
 }
 catch (IOException e)
 {
  e.printStackTrace();
 }
}


private static void out(String strMessage)
{
 System.out.println(strMessage);
}
}

/*** CddaPlayer.java ****/
Built by Text2Html


Demonstrating the Java Media Player

 import java.awt.*;
 import java.awt.event.*;
 import java.io.*;
 import javax.swing.*;
 import javax.media.*;

 public class MediaPlayerDemo extends JFrame 
 {
	 private Player player;
	 private File file;

	 public MediaPlayerDemo()
	 {
		 super( "Demonstrating the Java Media Player" );

		 JButton openFile = new JButton( "Open file to play" );
		 openFile.addActionListener( new ActionListener() 
		 {
			 public void actionPerformed( ActionEvent e )
			 {
				 openFile();
				 createPlayer();
			 }
		 });
		 getContentPane().add( openFile, BorderLayout.NORTH );

		 setSize( 300, 300 );
		 show();
	 }

	 private void openFile()
	 {
		 JFileChooser fileChooser = new JFileChooser();

		 fileChooser.setFileSelectionMode( JFileChooser.FILES_ONLY );
		 int result = fileChooser.showOpenDialog( this );

		 // user clicked Cancel button on dialog
		 if ( result == JFileChooser.CANCEL_OPTION )
			 file = null;
		 else
			 file = fileChooser.getSelectedFile();
	 }

	 private void createPlayer()
	 {
		 if ( file == null )
			 return;

		 removePreviousPlayer();

		 try 
		 {
			 // create a new player and add listener
			 player = Manager.createPlayer( file.toURL() );
			 player.addControllerListener( new EventHandler() );
			 player.start(); // start player
		 }
		 catch ( Exception e )
		 {
			 JOptionPane.showMessageDialog( this, "Invalid file or location", "Error loading file",
			 JOptionPane.ERROR_MESSAGE );
		 }
	 }

	 private void removePreviousPlayer()
	 {
		 if ( player == null )
			 return;

		 player.close();

		 Component visual = player.getVisualComponent();
		 Component control = player.getControlPanelComponent();

		 Container c = getContentPane();

		 if ( visual != null )
			 c.remove( visual );

		 if ( control != null )
			 c.remove( control );
	 }

	 public static void main(String args[])
	 {
		 MediaPlayerDemo app = new MediaPlayerDemo();

		 app.addWindowListener( new WindowAdapter() 
		 {
			 public void windowClosing( WindowEvent e )
			 {
				 System.exit(0);
			 }
		 });
	 }

	 // inner class to handler events from media player
	 private class EventHandler implements ControllerListener 
	 {
		 public void controllerUpdate( ControllerEvent e ) 
		 {
			 if ( e instanceof RealizeCompleteEvent ) 
			 {
				 Container c = getContentPane();

				 // load Visual and Control components if they exist
				 Component visualComponent = player.getVisualComponent();

				 if ( visualComponent != null )
					 c.add( visualComponent, BorderLayout.CENTER );

				 Component controlsComponent = player.getControlPanelComponent();

				 if ( controlsComponent != null )
					 c.add( controlsComponent, BorderLayout.SOUTH );

				 c.doLayout();
			 }
		 }
	 }
 }


Load an audio clip and play it

 import java.applet.*;
 import java.awt.*;
 import java.awt.event.*;
 import javax.swing.*;

 public class LoadAudioAndPlay extends JApplet
 {
	 private AudioClip sound1, sound2, currentSound;
	 private JButton playSound, loopSound, stopSound;
	 private JComboBox chooseSound;

	 // load the image when the applet begins executing
	 public void init()
	 {
		 Container c = getContentPane();
		 c.setLayout( new FlowLayout() );

		 String choices[] = { "Welcome", "Hi" };
		 chooseSound = new JComboBox( choices );
		 chooseSound.addItemListener( new ItemListener()
		 {
			 public void itemStateChanged( ItemEvent e )
			 {
				 currentSound.stop();

				 currentSound = chooseSound.getSelectedIndex() == 0 ? sound1 : sound2;
			 }
		 });
		 c.add( chooseSound );

		 ButtonHandler handler = new ButtonHandler();
		 playSound = new JButton( "Play" );
		 playSound.addActionListener( handler );
		 c.add( playSound );
		 loopSound = new JButton( "Loop" );
		 loopSound.addActionListener( handler );
		 c.add( loopSound );
		 stopSound = new JButton( "Stop" );
		 stopSound.addActionListener( handler );
		 c.add( stopSound );

		 sound1 = getAudioClip( getDocumentBase(), "welcome.wav" );
		 sound2 = getAudioClip( getDocumentBase(), "hi.au" );
		 currentSound = sound1;
	 }

	 // stop the sound when the user switches Web pages
	 // (i.e., be polite to the user)
	 public void stop()
	 {
		 currentSound.stop();
	 }

	 private class ButtonHandler implements ActionListener
	 {
		 public void actionPerformed( ActionEvent e )
		 {
			 if ( e.getSource() == playSound )
				 currentSound.play();
			 else if ( e.getSource() == loopSound )
				 currentSound.loop();
			 else if ( e.getSource() == stopSound )
				 currentSound.stop();
		 }
	 }
 }


Demonstrating the runnable interface

  import java.awt.*;
 import java.awt.event.*;
 import javax.swing.*;

 public class RandomCharacters extends JApplet implements Runnable, ActionListener 
 {
	 private String alphabet = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
	 private JLabel outputs[];
	 private JCheckBox checkboxes[];
	 private final static int SIZE = 3;

	 private Thread threads[];
	 private boolean suspended[];

	 public void init()
	 {
		 outputs = new JLabel[ SIZE ];
		 checkboxes = new JCheckBox[ SIZE ];
		 threads = new Thread[ SIZE ];
		 suspended = new boolean[ SIZE ];

		 Container c = getContentPane();
		 c.setLayout( new GridLayout( SIZE, 2, 5, 5 ) );

		 for ( int i = 0; i < SIZE; i++ ) 
		 {
			 outputs[ i ] = new JLabel();
			 outputs[ i ].setBackground( Color.green );
			 outputs[ i ].setOpaque( true );
			 c.add( outputs[ i ] );

			 checkboxes[ i ] = new JCheckBox( "Suspended" );
			 checkboxes[ i ].addActionListener( this );
			 c.add( checkboxes[ i ] );
		 }
	}

	 public void start()
	 {
		 // create threads and start every time start is called
		 for ( int i = 0; i < threads.length; i++ ) 
		 {
			 threads[ i ] = new Thread( this, "Thread " + (i + 1) );
			 threads[ i ].start();
		 }
	 }

	 public void run()
	 {
		 Thread currentThread = Thread.currentThread();
		 int index = getIndex( currentThread );
		 char displayChar;

		 while ( threads[ index ] == currentThread ) 
		 {
			 // sleep from 0 to 1 second
			 try 
			 {
				 Thread.sleep( (int) ( Math.random() * 1000 ) );

				 synchronized( this ) 
				 {
					 while ( suspended[ index ] && threads[ index ] == currentThread )
					 wait();
				 }
			 }
			 catch ( InterruptedException e ) 
			 {
				 System.err.println( "sleep interrupted" );
			 }

			 displayChar = alphabet.charAt( (int) ( Math.random() * 26 ) );
			 outputs[ index ].setText( currentThread.getName() +
			 ": " + displayChar );
		 }

		 System.err.println( currentThread.getName() + " terminating" );
	 }

	 private int getIndex( Thread current )
	 {
		 for ( int i = 0; i < threads.length; i++ )
			 if ( current == threads[ i ] )
				 return i;

		 return -1;
	 }

	 public synchronized void stop()
	 {
		 // stop threads every time stop is called
		 // as the user browses another Web page
		 for ( int i = 0; i < threads.length; i++ )
			 threads[ i ] = null;

		 notifyAll();
	 }

	 public synchronized void actionPerformed( ActionEvent e )
	 {
		 for ( int i = 0; i < checkboxes.length; i++ ) 
		 {
			 if ( e.getSource() == checkboxes[ i ] ) 
			 {
				 suspended[ i ] = !suspended[ i ];

				 outputs[ i ].setBackground( !suspended[ i ] ? Color.green : Color.red );

				 if ( !suspended[ i ] )
				 notify();

				 return;
			 }
		 }
	 }
 }


Listing all running threads

// Find the root thread group
ThreadGroup root = Thread.currentThread().getThreadGroup().getParent();
    while (root.getParent() != null) {
     root = root.getParent();
}

// Visit each thread group
visit(root, 0);

// This method recursively visits all thread groups under `group'.
    public static void visit(ThreadGroup group, int level) {
     // Get threads in `group'
     int numThreads = group.activeCount();
     Thread[] threads = new Thread[numThreads*2];
     numThreads = group.enumerate(threads, false);
    
     // Enumerate each thread in `group'
         for (int i=0; i         // Get thread
         Thread thread = threads[i];
     }
    
     // Get thread subgroups of `group'
     int numGroups = group.activeGroupCount();
     ThreadGroup[] groups = new ThreadGroup[numGroups*2];
     numGroups = group.enumerate(groups, false);
    
     // Recursively visit each subgroup
         for (int i=0; i         visit(groups[i], level+1);
     }
}

//Here's an example of some thread groups that contain some threads: 
java.lang.ThreadGroup[name=system,maxpri=10]
Thread[Reference Handler,10,system]
Thread[Finalizer,8,system]
Thread[Signal Dispatcher,10,system]
Thread[CompileThread0,10,system]
java.lang.ThreadGroup[name=main,maxpri=10]
Thread[main,5,main]
Thread[Thread-1,5,main]


Stop watch programme

import java.awt.event.*;
import java.awt.*;
import javax.swing.*;

public class Stopwatch extends JFrame implements ActionListener, Runnable
    {
     private long startTime;
     private final static java.text.SimpleDateFormat timerFormat = new java.text.SimpleDateFormat("mm : ss.SSS");
     private final JButton startStopButton= new JButton("Start/stop");
     private Thread updater;
     private boolean isRunning= false;
     private final Runnable displayUpdater= new Runnable()
         {
         public void run()
             {
             displayElapsedTime(System.currentTimeMillis() - Stopwatch.this.startTime);
         }
     };
     public void actionPerformed(ActionEvent ae)
         {
         if(isRunning)
             {
             long elapsed= System.currentTimeMillis() - startTime;
             isRunning= false;
             try
                 {
                 updater.join();
                 // Wait for updater to finish
             }
             catch(InterruptedException ie) {}
             displayElapsedTime(elapsed);
             // Display the end-result
         }
         else
             {
             startTime= System.currentTimeMillis();
             isRunning= true;
             updater= new Thread(this);
             updater.start();
         }
     }
     private void displayElapsedTime(long elapsedTime)
         {
         startStopButton.setText(timerFormat.format(new java.util.Date(elapsedTime)));
     }
     public void run()
         {
         try
             {
             while(isRunning)
                 {
                 SwingUtilities.invokeAndWait(displayUpdater);
                 Thread.sleep(50);
             }
         }
         catch(java.lang.reflect.InvocationTargetException ite)
             {
             ite.printStackTrace(System.err);
             // Should never happen!
         }
         catch(InterruptedException ie) {}
         // Ignore and return!
     }
     public Stopwatch()
         {
         startStopButton.addActionListener(this);
         getContentPane().add(startStopButton);
         setSize(100,50);
         setVisible(true);
     }
     public static void main(String[] arg)
         {
         new Stopwatch().addWindowListener(new WindowAdapter()
             {
             public void windowClosing(WindowEvent e)
                 {
                 System.exit(0);
             }
         });
     }
}


Callable statement example

public class CallableStmt
    {
     public static void main(String args[])
         {
         try
             {
             Class.forName("sun.jdbc.odbc.JdbcOdbcDriver");
             Connection con = DriverManager.getConnection("jdbc:odbc:uma","kworker","kworker");
            
             //calling a stored procedure with no input/output param
             /*
             CREATE PROCEDURE HELLOWORLD
             AS
             SELECT 'HELLOWORLD' AS HELLO
             */
             CallableStatement cs1 = con.prepareCall("{call HelloWorld}");
             ResultSet rs1 = cs1.executeQuery();
             while(rs1.next())
                 {
                 String one = rs1.getString("HELLO");
                 System.out.println(one);
             }
            
            
             //Calling a stored procedure which takes in 2 parameters for addition
             /*
             --EXECUTE ADDITION 10,25,NULL
             ALTER PROCEDURE ADDITION
             @A INT
             , @B INT
             , @C INT OUT
             AS
             SELECT @C = @A + @B
             */
             CallableStatement cs2 = con.prepareCall("{call ADDITION(?,?,?)}");
             cs2.registerOutParameter(3,java.sql.Types.INTEGER);
             cs2.setInt(1,10);
             cs2.setInt(2,25);
             cs2.execute();
             int res = cs2.getInt(3);
             System.out.println(res);
            
             //Another way
             /*
             --create table test(slno int,ques varchar(100),ans text)
             --EXECUTE fetchRec 1
             create procedure fetchRec
             @A int
             as
             select * from test where slno=@A
             */
             CallableStatement cs3 = con.prepareCall("{call fetchRec(?)}");
             cs3.registerOutParameter(1,java.sql.Types.INTEGER);
             cs3.setInt(1,5);
             ResultSet rs3 = cs3.executeQuery();
             while(rs3.next())
                 {
                 String ques = rs3.getString(2);
                 String ans = rs3.getString(3);
                 System.out.println(ques);
                 System.out.println(ans);
             }
            
            
         }
         catch(Exception e)
             {
             e.printStackTrace();
         }
     }
}


Getting column names for a table

import java.sql.*;

public class GetColNames
    {
    
    public static void main(String args[])
        {
         try
             {
             Class.forName("sun.jdbc.odbc.JdbcOdbcDriver");
             Connection connection = DriverManager.getConnection("jdbc:odbc:dd","","");
             // Create a result set
             Statement stmt = connection.createStatement();
             ResultSet rs = stmt.executeQuery("SELECT * FROM test");
            
             // Get result set meta data
             ResultSetMetaData rsmd = rs.getMetaData();
             int numColumns = rsmd.getColumnCount();
            
             // Get the column names; column indices start from 1
             for (int i=1; i                 {
                 String columnName = rsmd.getColumnName(i);
                
                 // Get the name of the column's table name
                 String tableName = rsmd.getTableName(i);
                 System.out.println("columnName "+columnName);
             }
         }
         catch (Exception e)
             {
             System.out.println(e);
         }
    }
}


Inserting an Image into SQL Server

public class InsertBlob_SQLServer
    {
     static Connection conn = null;
    
     public InsertBlob_SQLServer()
         {
         try
             {
             Class.forName("sun.jdbc.odbc.JdbcOdbcDriver");
             conn = DriverManager.getConnection("jdbc:odbc:javaxxx", "userid", "pwd");
         }
         catch(Exception e)
             {
             e.printStackTrace();
         }
     }
     public static void main(String[] args)
         {
         InsertBlob_SQLServer insertBlob1 = new InsertBlob_SQLServer();
         if(args.length != 2)
             {
             System.out.println("Usage: java InsertBlob_SQLServer FileName File");
             System.out.println("Example: java InsertBlob_SQLServer myImage.jpg \"C:\\\\MyFolder\\\\myImage.jpg\"");
         }
         else
             {
             try
                 {
                 insertBlob1.insPic(conn, args[0], args[1]);
             }
             catch(Exception e)
                 {
                 e.printStackTrace();
             }
             finally
                 {
                 insertBlob1 = null;
             }
         }
     }
    
     private void insPic(Connection c, String name, String fName)
         {
         try
             {
             File f = new File(fName);
             FileInputStream in = new FileInputStream(f);
             byte[] image = new byte[(int) f.length()];
             in.read(image);
             // Below: the question marks are IN parameter placeholders.
             String sql = "INSERT INTO testImage VALUES(?,?)";
             PreparedStatement stmt = c.prepareStatement(sql);
             stmt.setString(1, name);
             stmt.setBytes(2, image);
             stmt.executeUpdate();
             stmt.close();
         }
         catch (SQLException e)
             {
             System.out.print(e.getMessage());
         }
         catch (IOException e)
             {
             System.out.print(e.getMessage());
         }
     }
}
//create table testImage(fname varchar(100),img image)


Stored Procedure Calling in java

import java.sql.*;
    class ProcedureCalling {
         public static void main(String args[]){
             try{
             Class.forName("sun.jdbc.odbc.JdbcOdbcDriver");
             Connection con=DriverManager.getConnection("jdbc:odbc:test1","sa","password");
             String sql= "{ call procname(?) }"; // procname is name of procedure
             cst=con.prepareCall(sql);
             int i=1;
             cst.registerOutParameter(1,Types.NUMERIC,0);
             cst.setInt(1,i);
             cst.executeUpdate();
             i=cst.getInt(1);
         }catch(Exception proc)
             { System.out.println("error ine executed query is :" + proc);
     } }
}
}


